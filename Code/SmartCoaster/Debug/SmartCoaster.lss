
SmartCoaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  000016a4  00001738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000051  00800156  00800156  0000178e  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  0000178e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f15  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cad  00000000  00000000  000038b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013f0  00000000  00000000  00004562  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000470  00000000  00000000  00005954  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ea  00000000  00000000  00005dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017f3  00000000  00000000  000065ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00007da1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 6a 08 	jmp	0x10d4	; 0x10d4 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ea       	ldi	r30, 0xA4	; 164
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 35       	cpi	r26, 0x56	; 86
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a6 e5       	ldi	r26, 0x56	; 86
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 3a       	cpi	r26, 0xA7	; 167
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 3c 07 	call	0xe78	; 0xe78 <main>
      9e:	0c 94 50 0b 	jmp	0x16a0	; 0x16a0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
      a6:	7f 92       	push	r7
      a8:	8f 92       	push	r8
      aa:	9f 92       	push	r9
      ac:	af 92       	push	r10
      ae:	bf 92       	push	r11
      b0:	cf 92       	push	r12
      b2:	df 92       	push	r13
      b4:	ef 92       	push	r14
      b6:	ff 92       	push	r15
      b8:	0f 93       	push	r16
      ba:	1f 93       	push	r17
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
      c0:	84 e6       	ldi	r24, 0x64	; 100
      c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
      c6:	ea e7       	ldi	r30, 0x7A	; 122
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	83 ea       	ldi	r24, 0xA3	; 163
      cc:	80 83       	st	Z, r24
      ce:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
      d2:	84 e0       	ldi	r24, 0x04	; 4
      d4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
      d8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
      dc:	78 94       	sei
      de:	80 81       	ld	r24, Z
      e0:	80 64       	ori	r24, 0x40	; 64
      e2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e4:	2f ef       	ldi	r18, 0xFF	; 255
      e6:	84 e3       	ldi	r24, 0x34	; 52
      e8:	9c e0       	ldi	r25, 0x0C	; 12
      ea:	21 50       	subi	r18, 0x01	; 1
      ec:	80 40       	sbci	r24, 0x00	; 0
      ee:	90 40       	sbci	r25, 0x00	; 0
      f0:	e1 f7       	brne	.-8      	; 0xea <initADC+0x44>
      f2:	00 c0       	rjmp	.+0      	; 0xf4 <initADC+0x4e>
      f4:	00 00       	nop
      f6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
      fa:	22 23       	and	r18, r18
      fc:	d9 f1       	breq	.+118    	; 0x174 <initADC+0xce>
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	40 e0       	ldi	r20, 0x00	; 0
     102:	50 e0       	ldi	r21, 0x00	; 0
     104:	60 e0       	ldi	r22, 0x00	; 0
     106:	7e ee       	ldi	r23, 0xEE	; 238
     108:	82 e0       	ldi	r24, 0x02	; 2
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 87 0a 	call	0x150e	; 0x150e <__divmodsi4>
     110:	69 01       	movw	r12, r18
     112:	7a 01       	movw	r14, r20
     114:	02 2f       	mov	r16, r18
     116:	1d 2d       	mov	r17, r13
     118:	de 2d       	mov	r29, r14
     11a:	cf 2d       	mov	r28, r15
     11c:	49 01       	movw	r8, r18
     11e:	5a 01       	movw	r10, r20
     120:	bb 0c       	add	r11, r11
     122:	88 08       	sbc	r8, r8
     124:	98 2c       	mov	r9, r8
     126:	54 01       	movw	r10, r8
     128:	b8 2d       	mov	r27, r8
     12a:	a8 2d       	mov	r26, r8
     12c:	f8 2d       	mov	r31, r8
     12e:	78 2c       	mov	r7, r8
     130:	20 93 56 01 	sts	0x0156, r18	; 0x800156 <__data_end>
     134:	d0 92 57 01 	sts	0x0157, r13	; 0x800157 <__data_end+0x1>
     138:	e0 92 58 01 	sts	0x0158, r14	; 0x800158 <__data_end+0x2>
     13c:	f0 92 59 01 	sts	0x0159, r15	; 0x800159 <__data_end+0x3>
     140:	80 92 5a 01 	sts	0x015A, r8	; 0x80015a <__data_end+0x4>
     144:	80 92 5b 01 	sts	0x015B, r8	; 0x80015b <__data_end+0x5>
     148:	80 92 5c 01 	sts	0x015C, r8	; 0x80015c <__data_end+0x6>
     14c:	80 92 5d 01 	sts	0x015D, r8	; 0x80015d <__data_end+0x7>
     150:	3d 2d       	mov	r19, r13
     152:	4e 2d       	mov	r20, r14
     154:	5f 2d       	mov	r21, r15
     156:	68 2d       	mov	r22, r8
     158:	78 2d       	mov	r23, r8
     15a:	88 2d       	mov	r24, r8
     15c:	98 2d       	mov	r25, r8
     15e:	28 36       	cpi	r18, 0x68	; 104
     160:	30 41       	sbci	r19, 0x10	; 16
     162:	41 05       	cpc	r20, r1
     164:	51 05       	cpc	r21, r1
     166:	61 05       	cpc	r22, r1
     168:	71 05       	cpc	r23, r1
     16a:	81 05       	cpc	r24, r1
     16c:	91 05       	cpc	r25, r1
     16e:	09 f0       	breq	.+2      	; 0x172 <initADC+0xcc>
     170:	e0 f4       	brcc	.+56     	; 0x1aa <initADC+0x104>
     172:	1f c0       	rjmp	.+62     	; 0x1b2 <initADC+0x10c>
     174:	80 ea       	ldi	r24, 0xA0	; 160
     176:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
     17a:	8f e0       	ldi	r24, 0x0F	; 15
     17c:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <__data_end+0x1>
     180:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <__data_end+0x2>
     184:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <__data_end+0x3>
     188:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__data_end+0x4>
     18c:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <__data_end+0x5>
     190:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end+0x6>
     194:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <__data_end+0x7>
     198:	00 ea       	ldi	r16, 0xA0	; 160
     19a:	1f e0       	ldi	r17, 0x0F	; 15
     19c:	d0 e0       	ldi	r29, 0x00	; 0
     19e:	c0 e0       	ldi	r28, 0x00	; 0
     1a0:	b0 e0       	ldi	r27, 0x00	; 0
     1a2:	a0 e0       	ldi	r26, 0x00	; 0
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	71 2c       	mov	r7, r1
     1a8:	19 c0       	rjmp	.+50     	; 0x1dc <initADC+0x136>
     1aa:	86 e1       	ldi	r24, 0x16	; 22
     1ac:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <akkuoffset>
     1b0:	34 c0       	rjmp	.+104    	; 0x21a <initADC+0x174>
     1b2:	2c 2d       	mov	r18, r12
     1b4:	3d 2d       	mov	r19, r13
     1b6:	4e 2d       	mov	r20, r14
     1b8:	5f 2d       	mov	r21, r15
     1ba:	68 2d       	mov	r22, r8
     1bc:	78 2d       	mov	r23, r8
     1be:	88 2d       	mov	r24, r8
     1c0:	98 2d       	mov	r25, r8
     1c2:	23 37       	cpi	r18, 0x73	; 115
     1c4:	3e 40       	sbci	r19, 0x0E	; 14
     1c6:	41 05       	cpc	r20, r1
     1c8:	51 05       	cpc	r21, r1
     1ca:	61 05       	cpc	r22, r1
     1cc:	71 05       	cpc	r23, r1
     1ce:	81 05       	cpc	r24, r1
     1d0:	91 05       	cpc	r25, r1
     1d2:	09 f0       	breq	.+2      	; 0x1d6 <initADC+0x130>
     1d4:	18 f4       	brcc	.+6      	; 0x1dc <initADC+0x136>
     1d6:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <akkuoffset>
     1da:	1f c0       	rjmp	.+62     	; 0x21a <initADC+0x174>
     1dc:	20 2f       	mov	r18, r16
     1de:	31 2f       	mov	r19, r17
     1e0:	4d 2f       	mov	r20, r29
     1e2:	5c 2f       	mov	r21, r28
     1e4:	6b 2f       	mov	r22, r27
     1e6:	7a 2f       	mov	r23, r26
     1e8:	8f 2f       	mov	r24, r31
     1ea:	97 2d       	mov	r25, r7
     1ec:	24 57       	subi	r18, 0x74	; 116
     1ee:	3e 40       	sbci	r19, 0x0E	; 14
     1f0:	41 09       	sbc	r20, r1
     1f2:	51 09       	sbc	r21, r1
     1f4:	61 09       	sbc	r22, r1
     1f6:	71 09       	sbc	r23, r1
     1f8:	81 09       	sbc	r24, r1
     1fa:	91 09       	sbc	r25, r1
     1fc:	0f 2e       	mov	r0, r31
     1fe:	f6 e1       	ldi	r31, 0x16	; 22
     200:	af 2e       	mov	r10, r31
     202:	f0 2d       	mov	r31, r0
     204:	b1 2c       	mov	r11, r1
     206:	c1 2c       	mov	r12, r1
     208:	d1 2c       	mov	r13, r1
     20a:	e1 2c       	mov	r14, r1
     20c:	f1 2c       	mov	r15, r1
     20e:	00 e0       	ldi	r16, 0x00	; 0
     210:	10 e0       	ldi	r17, 0x00	; 0
     212:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__udivdi3>
     216:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <akkuoffset>
     21a:	ea e7       	ldi	r30, 0x7A	; 122
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	10 82       	st	Z, r1
     220:	85 e6       	ldi	r24, 0x65	; 101
     222:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     226:	83 ea       	ldi	r24, 0xA3	; 163
     228:	80 83       	st	Z, r24
     22a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
     22e:	84 e0       	ldi	r24, 0x04	; 4
     230:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
     234:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
     238:	78 94       	sei
     23a:	80 81       	ld	r24, Z
     23c:	80 64       	ori	r24, 0x40	; 64
     23e:	80 83       	st	Z, r24
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	1f 91       	pop	r17
     246:	0f 91       	pop	r16
     248:	ff 90       	pop	r15
     24a:	ef 90       	pop	r14
     24c:	df 90       	pop	r13
     24e:	cf 90       	pop	r12
     250:	bf 90       	pop	r11
     252:	af 90       	pop	r10
     254:	9f 90       	pop	r9
     256:	8f 90       	pop	r8
     258:	7f 90       	pop	r7
     25a:	08 95       	ret

0000025c <getIRCommandRec>:
	sei();
}

uint32_t getIRCommandRec()  
{
	if (signalready)
     25c:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <signalready>
     260:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <signalready+0x1>
     264:	40 91 62 01 	lds	r20, 0x0162	; 0x800162 <signalready+0x2>
     268:	50 91 63 01 	lds	r21, 0x0163	; 0x800163 <signalready+0x3>
     26c:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <signalready+0x4>
     270:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <signalready+0x5>
     274:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <signalready+0x6>
     278:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <signalready+0x7>
     27c:	a0 e0       	ldi	r26, 0x00	; 0
     27e:	0e 94 0e 0b 	call	0x161c	; 0x161c <__cmpdi2_s8>
     282:	e9 f0       	breq	.+58     	; 0x2be <getIRCommandRec+0x62>
	{
		uint64_t temp = dataBuffer;
     284:	50 91 81 01 	lds	r21, 0x0181	; 0x800181 <dataBuffer>
     288:	40 91 82 01 	lds	r20, 0x0182	; 0x800182 <dataBuffer+0x1>
     28c:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <dataBuffer+0x2>
     290:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <dataBuffer+0x3>
		dataBuffer=0;
     294:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <dataBuffer>
     298:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <dataBuffer+0x1>
     29c:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <dataBuffer+0x2>
     2a0:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <dataBuffer+0x3>
     2a4:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <dataBuffer+0x4>
     2a8:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <dataBuffer+0x5>
     2ac:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <dataBuffer+0x6>
     2b0:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <dataBuffer+0x7>
		return temp;
     2b4:	65 2f       	mov	r22, r21
     2b6:	74 2f       	mov	r23, r20
     2b8:	83 2f       	mov	r24, r19
     2ba:	92 2f       	mov	r25, r18
     2bc:	08 95       	ret
	}
	else
	{
		return 0;
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     2c6:	08 95       	ret

000002c8 <__vector_4>:

//attached to IR 
ISR(PCINT1_vect)
{
     2c8:	1f 92       	push	r1
     2ca:	0f 92       	push	r0
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	0f 92       	push	r0
     2d0:	11 24       	eor	r1, r1
     2d2:	af 92       	push	r10
     2d4:	bf 92       	push	r11
     2d6:	cf 92       	push	r12
     2d8:	df 92       	push	r13
     2da:	ef 92       	push	r14
     2dc:	ff 92       	push	r15
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	2f 93       	push	r18
     2e4:	3f 93       	push	r19
     2e6:	4f 93       	push	r20
     2e8:	5f 93       	push	r21
     2ea:	6f 93       	push	r22
     2ec:	7f 93       	push	r23
     2ee:	8f 93       	push	r24
     2f0:	9f 93       	push	r25
     2f2:	af 93       	push	r26
     2f4:	bf 93       	push	r27
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	ef 93       	push	r30
     2fc:	ff 93       	push	r31
	if(irFlag==0)
     2fe:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <irFlag>
     302:	81 11       	cpse	r24, r1
     304:	24 c0       	rjmp	.+72     	; 0x34e <__vector_4+0x86>
	{
	dataBuffer=0;
     306:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <dataBuffer>
     30a:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <dataBuffer+0x1>
     30e:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <dataBuffer+0x2>
     312:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <dataBuffer+0x3>
     316:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <dataBuffer+0x4>
     31a:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <dataBuffer+0x5>
     31e:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <dataBuffer+0x6>
     322:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <dataBuffer+0x7>
	irFlag = 1;
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <irFlag>
	signalready=0;
     32c:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <signalready>
     330:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <signalready+0x1>
     334:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <signalready+0x2>
     338:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <signalready+0x3>
     33c:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <signalready+0x4>
     340:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <signalready+0x5>
     344:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <signalready+0x6>
     348:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <signalready+0x7>
     34c:	f1 c0       	rjmp	.+482    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
	}
	else
	{
		if (ready)
     34e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     352:	88 23       	and	r24, r24
     354:	09 f4       	brne	.+2      	; 0x358 <__vector_4+0x90>
     356:	ec c0       	rjmp	.+472    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
		{
			    timePassed=milli-lastSignal;
     358:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <milli>
     35c:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <milli+0x1>
     360:	a0 90 79 01 	lds	r10, 0x0179	; 0x800179 <lastSignal>
     364:	b0 90 7a 01 	lds	r11, 0x017A	; 0x80017a <lastSignal+0x1>
     368:	c0 90 7b 01 	lds	r12, 0x017B	; 0x80017b <lastSignal+0x2>
     36c:	d0 90 7c 01 	lds	r13, 0x017C	; 0x80017c <lastSignal+0x3>
     370:	e0 90 7d 01 	lds	r14, 0x017D	; 0x80017d <lastSignal+0x4>
     374:	f0 90 7e 01 	lds	r15, 0x017E	; 0x80017e <lastSignal+0x5>
     378:	00 91 7f 01 	lds	r16, 0x017F	; 0x80017f <lastSignal+0x6>
     37c:	10 91 80 01 	lds	r17, 0x0180	; 0x800180 <lastSignal+0x7>
     380:	28 2f       	mov	r18, r24
     382:	39 2f       	mov	r19, r25
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	50 e0       	ldi	r21, 0x00	; 0
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 05 0b 	call	0x160a	; 0x160a <__subdi3>
     394:	20 93 89 01 	sts	0x0189, r18	; 0x800189 <timePassed>
     398:	30 93 8a 01 	sts	0x018A, r19	; 0x80018a <timePassed+0x1>
     39c:	40 93 8b 01 	sts	0x018B, r20	; 0x80018b <timePassed+0x2>
     3a0:	50 93 8c 01 	sts	0x018C, r21	; 0x80018c <timePassed+0x3>
     3a4:	60 93 8d 01 	sts	0x018D, r22	; 0x80018d <timePassed+0x4>
     3a8:	70 93 8e 01 	sts	0x018E, r23	; 0x80018e <timePassed+0x5>
     3ac:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <timePassed+0x6>
     3b0:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <timePassed+0x7>
				uint8_t pinState = (PINC & (1 << 1)) >> 1; //interrupt pin state
     3b4:	e6 b1       	in	r30, 0x06	; 6
     3b6:	e6 95       	lsr	r30
     3b8:	e1 70       	andi	r30, 0x01	; 1
				if (timePassed>1000)
     3ba:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <timePassed>
     3be:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <timePassed+0x1>
     3c2:	40 91 8b 01 	lds	r20, 0x018B	; 0x80018b <timePassed+0x2>
     3c6:	50 91 8c 01 	lds	r21, 0x018C	; 0x80018c <timePassed+0x3>
     3ca:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <timePassed+0x4>
     3ce:	70 91 8e 01 	lds	r23, 0x018E	; 0x80018e <timePassed+0x5>
     3d2:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <timePassed+0x6>
     3d6:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <timePassed+0x7>
     3da:	28 3e       	cpi	r18, 0xE8	; 232
     3dc:	33 40       	sbci	r19, 0x03	; 3
     3de:	41 05       	cpc	r20, r1
     3e0:	51 05       	cpc	r21, r1
     3e2:	61 05       	cpc	r22, r1
     3e4:	71 05       	cpc	r23, r1
     3e6:	81 05       	cpc	r24, r1
     3e8:	91 05       	cpc	r25, r1
     3ea:	99 f0       	breq	.+38     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3ec:	90 f0       	brcs	.+36     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
				{
					dataBuffer=0;
     3ee:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <dataBuffer>
     3f2:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <dataBuffer+0x1>
     3f6:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <dataBuffer+0x2>
     3fa:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <dataBuffer+0x3>
     3fe:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <dataBuffer+0x4>
     402:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <dataBuffer+0x5>
     406:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <dataBuffer+0x6>
     40a:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <dataBuffer+0x7>
					counter=0;
     40e:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <counter>
				}
				signalready=0;
     412:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <signalready>
     416:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <signalready+0x1>
     41a:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <signalready+0x2>
     41e:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <signalready+0x3>
     422:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <signalready+0x4>
     426:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <signalready+0x5>
     42a:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <signalready+0x6>
     42e:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <signalready+0x7>
				if (pinState==1)
     432:	e1 30       	cpi	r30, 0x01	; 1
     434:	09 f0       	breq	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     436:	7c c0       	rjmp	.+248    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
				{
					
				
					if (counter>21 && counter<34) //eigentlich ab 17 aber geht irgendwie nicht
     438:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <counter>
     43c:	8a ee       	ldi	r24, 0xEA	; 234
     43e:	8e 0f       	add	r24, r30
     440:	8c 30       	cpi	r24, 0x0C	; 12
     442:	08 f0       	brcs	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     444:	49 c0       	rjmp	.+146    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
					{
						if (timePassed>17) //if logic null
     446:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <timePassed>
     44a:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <timePassed+0x1>
     44e:	40 91 8b 01 	lds	r20, 0x018B	; 0x80018b <timePassed+0x2>
     452:	50 91 8c 01 	lds	r21, 0x018C	; 0x80018c <timePassed+0x3>
     456:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <timePassed+0x4>
     45a:	70 91 8e 01 	lds	r23, 0x018E	; 0x80018e <timePassed+0x5>
     45e:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <timePassed+0x6>
     462:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <timePassed+0x7>
     466:	a1 e1       	ldi	r26, 0x11	; 17
     468:	0e 94 0e 0b 	call	0x161c	; 0x161c <__cmpdi2_s8>
     46c:	a9 f1       	breq	.+106    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     46e:	a0 f1       	brcs	.+104    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
						{
							dataBuffer=dataBuffer | (1<<(counter-22));
     470:	21 e0       	ldi	r18, 0x01	; 1
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	8a ee       	ldi	r24, 0xEA	; 234
     476:	8e 0f       	add	r24, r30
     478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     47a:	22 0f       	add	r18, r18
     47c:	33 1f       	adc	r19, r19
     47e:	8a 95       	dec	r24
     480:	e2 f7       	brpl	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     482:	83 2f       	mov	r24, r19
     484:	88 0f       	add	r24, r24
     486:	88 0b       	sbc	r24, r24
     488:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <dataBuffer>
     48c:	92 2b       	or	r25, r18
     48e:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <dataBuffer>
     492:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <dataBuffer+0x1>
     496:	93 2b       	or	r25, r19
     498:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <dataBuffer+0x1>
     49c:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <dataBuffer+0x2>
     4a0:	98 2b       	or	r25, r24
     4a2:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <dataBuffer+0x2>
     4a6:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <dataBuffer+0x3>
     4aa:	98 2b       	or	r25, r24
     4ac:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <dataBuffer+0x3>
     4b0:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <dataBuffer+0x4>
     4b4:	98 2b       	or	r25, r24
     4b6:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <dataBuffer+0x4>
     4ba:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <dataBuffer+0x5>
     4be:	98 2b       	or	r25, r24
     4c0:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <dataBuffer+0x5>
     4c4:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <dataBuffer+0x6>
     4c8:	98 2b       	or	r25, r24
     4ca:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <dataBuffer+0x6>
     4ce:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <dataBuffer+0x7>
     4d2:	89 2b       	or	r24, r25
     4d4:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <dataBuffer+0x7>
							
						}
						
					}
				counter++;		
     4d8:	ef 5f       	subi	r30, 0xFF	; 255
     4da:	e0 93 5f 01 	sts	0x015F, r30	; 0x80015f <counter>
				lastSignal=milli;	
     4de:	00 91 a5 01 	lds	r16, 0x01A5	; 0x8001a5 <milli>
     4e2:	10 91 a6 01 	lds	r17, 0x01A6	; 0x8001a6 <milli+0x1>
     4e6:	00 93 79 01 	sts	0x0179, r16	; 0x800179 <lastSignal>
     4ea:	10 93 7a 01 	sts	0x017A, r17	; 0x80017a <lastSignal+0x1>
     4ee:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <lastSignal+0x2>
     4f2:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <lastSignal+0x3>
     4f6:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <lastSignal+0x4>
     4fa:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <lastSignal+0x5>
     4fe:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <lastSignal+0x6>
     502:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <lastSignal+0x7>
				if (counter==34)
     506:	e2 32       	cpi	r30, 0x22	; 34
     508:	99 f4       	brne	.+38     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
				{
					signalready=1;
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <signalready>
     510:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <signalready+0x1>
     514:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <signalready+0x2>
     518:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <signalready+0x3>
     51c:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <signalready+0x4>
     520:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <signalready+0x5>
     524:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <signalready+0x6>
     528:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <signalready+0x7>
					counter=0;
     52c:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <counter>
				}
								
		}
	}
	
}
     530:	ff 91       	pop	r31
     532:	ef 91       	pop	r30
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	bf 91       	pop	r27
     53a:	af 91       	pop	r26
     53c:	9f 91       	pop	r25
     53e:	8f 91       	pop	r24
     540:	7f 91       	pop	r23
     542:	6f 91       	pop	r22
     544:	5f 91       	pop	r21
     546:	4f 91       	pop	r20
     548:	3f 91       	pop	r19
     54a:	2f 91       	pop	r18
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	ef 90       	pop	r14
     554:	df 90       	pop	r13
     556:	cf 90       	pop	r12
     558:	bf 90       	pop	r11
     55a:	af 90       	pop	r10
     55c:	0f 90       	pop	r0
     55e:	0f be       	out	0x3f, r0	; 63
     560:	0f 90       	pop	r0
     562:	1f 90       	pop	r1
     564:	18 95       	reti

00000566 <ws2812_setleds>:
     566:	9b 01       	movw	r18, r22
     568:	22 0f       	add	r18, r18
     56a:	33 1f       	adc	r19, r19
     56c:	62 0f       	add	r22, r18
     56e:	73 1f       	adc	r23, r19
     570:	21 9a       	sbi	0x04, 1	; 4
     572:	25 b1       	in	r18, 0x05	; 5
     574:	2d 7f       	andi	r18, 0xFD	; 253
     576:	35 b1       	in	r19, 0x05	; 5
     578:	32 60       	ori	r19, 0x02	; 2
     57a:	4f b7       	in	r20, 0x3f	; 63
     57c:	f8 94       	cli
     57e:	61 15       	cp	r22, r1
     580:	71 05       	cpc	r23, r1
     582:	09 f4       	brne	.+2      	; 0x586 <ws2812_setleds+0x20>
     584:	21 c0       	rjmp	.+66     	; 0x5c8 <loop54+0x38>
     586:	fc 01       	movw	r30, r24
     588:	68 0f       	add	r22, r24
     58a:	79 1f       	adc	r23, r25
     58c:	91 91       	ld	r25, Z+
     58e:	88 e0       	ldi	r24, 0x08	; 8

00000590 <loop54>:
     590:	35 b9       	out	0x05, r19	; 5
     592:	97 ff       	sbrs	r25, 7
     594:	25 b9       	out	0x05, r18	; 5
     596:	99 0f       	add	r25, r25
     598:	00 00       	nop
     59a:	00 c0       	rjmp	.+0      	; 0x59c <loop54+0xc>
     59c:	25 b9       	out	0x05, r18	; 5
     59e:	00 00       	nop
     5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <loop54+0x12>
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <loop54+0x14>
     5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <loop54+0x16>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <loop54+0x18>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <loop54+0x1a>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <loop54+0x1c>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <loop54+0x1e>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <loop54+0x20>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <loop54+0x22>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <loop54+0x24>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <loop54+0x26>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <loop54+0x28>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <loop54+0x2a>
     5ba:	00 c0       	rjmp	.+0      	; 0x5bc <loop54+0x2c>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <loop54+0x2e>
     5be:	8a 95       	dec	r24
     5c0:	39 f7       	brne	.-50     	; 0x590 <loop54>
     5c2:	e6 17       	cp	r30, r22
     5c4:	f7 07       	cpc	r31, r23
     5c6:	11 f7       	brne	.-60     	; 0x58c <ws2812_setleds+0x26>
     5c8:	4f bf       	out	0x3f, r20	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ca:	85 e8       	ldi	r24, 0x85	; 133
     5cc:	8a 95       	dec	r24
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <loop54+0x3c>
     5d0:	00 00       	nop
     5d2:	08 95       	ret

000005d4 <c_spin>:

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
	dest[1]=source[1];
	dest[2]=source[2];
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <defaultcolors>
     5e2:	88 23       	and	r24, r24
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <c_spin+0x14>
     5e6:	41 c0       	rjmp	.+130    	; 0x66a <c_spin+0x96>
     5e8:	e4 e1       	ldi	r30, 0x14	; 20
     5ea:	f1 e0       	ldi	r31, 0x01	; 1
     5ec:	10 82       	st	Z, r1
     5ee:	8a e0       	ldi	r24, 0x0A	; 10
     5f0:	81 83       	std	Z+1, r24	; 0x01
     5f2:	8e e1       	ldi	r24, 0x1E	; 30
     5f4:	82 83       	std	Z+2, r24	; 0x02
     5f6:	39 c0       	rjmp	.+114    	; 0x66a <c_spin+0x96>
     5f8:	f7 01       	movw	r30, r14
     5fa:	80 81       	ld	r24, Z
     5fc:	8a 87       	std	Y+10, r24	; 0x0a
     5fe:	81 81       	ldd	r24, Z+1	; 0x01
     600:	89 87       	std	Y+9, r24	; 0x09
     602:	82 81       	ldd	r24, Z+2	; 0x02
     604:	8b 87       	std	Y+11, r24	; 0x0b
     606:	13 30       	cpi	r17, 0x03	; 3
     608:	18 f0       	brcs	.+6      	; 0x610 <c_spin+0x3c>
     60a:	19 82       	std	Y+1, r1	; 0x01
     60c:	18 82       	st	Y, r1
     60e:	1a 82       	std	Y+2, r1	; 0x02
     610:	23 96       	adiw	r28, 0x03	; 3
     612:	68 e1       	ldi	r22, 0x18	; 24
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	8a e9       	ldi	r24, 0x9A	; 154
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	0e 94 b3 02 	call	0x566	; 0x566 <ws2812_setleds>
     61e:	8f e5       	ldi	r24, 0x5F	; 95
     620:	9a ee       	ldi	r25, 0xEA	; 234
     622:	01 97       	sbiw	r24, 0x01	; 1
     624:	f1 f7       	brne	.-4      	; 0x622 <c_spin+0x4e>
     626:	00 c0       	rjmp	.+0      	; 0x628 <c_spin+0x54>
     628:	00 00       	nop
     62a:	1f 5f       	subi	r17, 0xFF	; 255
     62c:	16 31       	cpi	r17, 0x16	; 22
     62e:	21 f7       	brne	.-56     	; 0x5f8 <c_spin+0x24>
     630:	2f c0       	rjmp	.+94     	; 0x690 <c_spin+0xbc>
     632:	f7 01       	movw	r30, r14
     634:	80 81       	ld	r24, Z
     636:	89 83       	std	Y+1, r24	; 0x01
     638:	81 81       	ldd	r24, Z+1	; 0x01
     63a:	88 83       	st	Y, r24
     63c:	82 81       	ldd	r24, Z+2	; 0x02
     63e:	8a 83       	std	Y+2, r24	; 0x02
     640:	13 31       	cpi	r17, 0x13	; 19
     642:	18 f4       	brcc	.+6      	; 0x64a <c_spin+0x76>
     644:	1a 86       	std	Y+10, r1	; 0x0a
     646:	19 86       	std	Y+9, r1	; 0x09
     648:	1b 86       	std	Y+11, r1	; 0x0b
     64a:	23 97       	sbiw	r28, 0x03	; 3
     64c:	68 e1       	ldi	r22, 0x18	; 24
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	8a e9       	ldi	r24, 0x9A	; 154
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 b3 02 	call	0x566	; 0x566 <ws2812_setleds>
     658:	8f e5       	ldi	r24, 0x5F	; 95
     65a:	9a ee       	ldi	r25, 0xEA	; 234
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <c_spin+0x88>
     660:	00 c0       	rjmp	.+0      	; 0x662 <c_spin+0x8e>
     662:	00 00       	nop
     664:	11 50       	subi	r17, 0x01	; 1
     666:	29 f7       	brne	.-54     	; 0x632 <c_spin+0x5e>
     668:	23 c0       	rjmp	.+70     	; 0x6b0 <c_spin+0xdc>
     66a:	ea e9       	ldi	r30, 0x9A	; 154
     66c:	f1 e0       	ldi	r31, 0x01	; 1
     66e:	a4 e1       	ldi	r26, 0x14	; 20
     670:	b1 e0       	ldi	r27, 0x01	; 1
     672:	8c 91       	ld	r24, X
     674:	81 83       	std	Z+1, r24	; 0x01
     676:	11 96       	adiw	r26, 0x01	; 1
     678:	8c 91       	ld	r24, X
     67a:	11 97       	sbiw	r26, 0x01	; 1
     67c:	80 83       	st	Z, r24
     67e:	12 96       	adiw	r26, 0x02	; 2
     680:	8c 91       	ld	r24, X
     682:	12 97       	sbiw	r26, 0x02	; 2
     684:	82 83       	std	Z+2, r24	; 0x02
     686:	c4 e9       	ldi	r28, 0x94	; 148
     688:	d1 e0       	ldi	r29, 0x01	; 1
     68a:	10 e0       	ldi	r17, 0x00	; 0
     68c:	7d 01       	movw	r14, r26
     68e:	c1 cf       	rjmp	.-126    	; 0x612 <c_spin+0x3e>
     690:	e4 e1       	ldi	r30, 0x14	; 20
     692:	f1 e0       	ldi	r31, 0x01	; 1
     694:	80 81       	ld	r24, Z
     696:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__bss_end+0x33>
     69a:	81 81       	ldd	r24, Z+1	; 0x01
     69c:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <__bss_end+0x32>
     6a0:	82 81       	ldd	r24, Z+2	; 0x02
     6a2:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <__bss_end+0x34>
     6a6:	c6 ed       	ldi	r28, 0xD6	; 214
     6a8:	d1 e0       	ldi	r29, 0x01	; 1
     6aa:	15 e1       	ldi	r17, 0x15	; 21
     6ac:	7f 01       	movw	r14, r30
     6ae:	ce cf       	rjmp	.-100    	; 0x64c <c_spin+0x78>
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	1f 91       	pop	r17
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	08 95       	ret

000006bc <clear>:
     6bc:	ea e9       	ldi	r30, 0x9A	; 154
     6be:	f1 e0       	ldi	r31, 0x01	; 1
     6c0:	82 ee       	ldi	r24, 0xE2	; 226
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	11 82       	std	Z+1, r1	; 0x01
     6c6:	10 82       	st	Z, r1
     6c8:	12 82       	std	Z+2, r1	; 0x02
     6ca:	33 96       	adiw	r30, 0x03	; 3
     6cc:	e8 17       	cp	r30, r24
     6ce:	f9 07       	cpc	r31, r25
     6d0:	c9 f7       	brne	.-14     	; 0x6c4 <clear+0x8>
     6d2:	68 e1       	ldi	r22, 0x18	; 24
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	8a e9       	ldi	r24, 0x9A	; 154
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 b3 02 	call	0x566	; 0x566 <ws2812_setleds>
     6de:	08 95       	ret

000006e0 <auswahl>:
     6e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     6e4:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <samplecounter>
     6e8:	8f 5f       	subi	r24, 0xFF	; 255
     6ea:	85 30       	cpi	r24, 0x05	; 5
     6ec:	19 f0       	breq	.+6      	; 0x6f4 <auswahl+0x14>
     6ee:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <samplecounter>
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <auswahl+0x18>
     6f4:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <samplecounter>
     6f8:	ea e6       	ldi	r30, 0x6A	; 106
     6fa:	f1 e0       	ldi	r31, 0x01	; 1
     6fc:	a0 91 69 01 	lds	r26, 0x0169	; 0x800169 <samplecounter>
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	a6 59       	subi	r26, 0x96	; 150
     704:	be 4f       	sbci	r27, 0xFE	; 254
     706:	9c 93       	st	X, r25
     708:	20 81       	ld	r18, Z
     70a:	81 81       	ldd	r24, Z+1	; 0x01
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	82 0f       	add	r24, r18
     710:	91 1d       	adc	r25, r1
     712:	22 81       	ldd	r18, Z+2	; 0x02
     714:	82 0f       	add	r24, r18
     716:	91 1d       	adc	r25, r1
     718:	23 81       	ldd	r18, Z+3	; 0x03
     71a:	82 0f       	add	r24, r18
     71c:	91 1d       	adc	r25, r1
     71e:	24 81       	ldd	r18, Z+4	; 0x04
     720:	82 0f       	add	r24, r18
     722:	91 1d       	adc	r25, r1
     724:	65 e0       	ldi	r22, 0x05	; 5
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__divmodhi4>
     72c:	77 27       	eor	r23, r23
     72e:	07 2e       	mov	r0, r23
     730:	00 0c       	add	r0, r0
     732:	88 0b       	sbc	r24, r24
     734:	99 0b       	sbc	r25, r25
     736:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__floatsisf>
     73a:	2d ec       	ldi	r18, 0xCD	; 205
     73c:	3c ec       	ldi	r19, 0xCC	; 204
     73e:	4c e4       	ldi	r20, 0x4C	; 76
     740:	5e e3       	ldi	r21, 0x3E	; 62
     742:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	40 e0       	ldi	r20, 0x00	; 0
     74c:	50 e4       	ldi	r21, 0x40	; 64
     74e:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__subsf3>
     752:	0e 94 49 09 	call	0x1292	; 0x1292 <__fixunssfsi>
     756:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <zeiger_values>
     75a:	68 17       	cp	r22, r24
     75c:	91 f0       	breq	.+36     	; 0x782 <auswahl+0xa2>
     75e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <zeiger_values+0x1>
     762:	68 17       	cp	r22, r24
     764:	81 f0       	breq	.+32     	; 0x786 <auswahl+0xa6>
     766:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <zeiger_values+0x2>
     76a:	68 17       	cp	r22, r24
     76c:	71 f0       	breq	.+28     	; 0x78a <auswahl+0xaa>
     76e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <zeiger_values+0x3>
     772:	68 17       	cp	r22, r24
     774:	61 f0       	breq	.+24     	; 0x78e <auswahl+0xae>
     776:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <zeiger_values+0x4>
     77a:	68 17       	cp	r22, r24
     77c:	51 f0       	breq	.+20     	; 0x792 <auswahl+0xb2>
     77e:	9a e0       	ldi	r25, 0x0A	; 10
     780:	09 c0       	rjmp	.+18     	; 0x794 <auswahl+0xb4>
     782:	98 ec       	ldi	r25, 0xC8	; 200
     784:	07 c0       	rjmp	.+14     	; 0x794 <auswahl+0xb4>
     786:	98 ec       	ldi	r25, 0xC8	; 200
     788:	05 c0       	rjmp	.+10     	; 0x794 <auswahl+0xb4>
     78a:	98 ec       	ldi	r25, 0xC8	; 200
     78c:	03 c0       	rjmp	.+6      	; 0x794 <auswahl+0xb4>
     78e:	98 ec       	ldi	r25, 0xC8	; 200
     790:	01 c0       	rjmp	.+2      	; 0x794 <auswahl+0xb4>
     792:	98 ec       	ldi	r25, 0xC8	; 200
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	fb 01       	movw	r30, r22
     798:	ee 0f       	add	r30, r30
     79a:	ff 1f       	adc	r31, r31
     79c:	e6 0f       	add	r30, r22
     79e:	f7 1f       	adc	r31, r23
     7a0:	e6 56       	subi	r30, 0x66	; 102
     7a2:	fe 4f       	sbci	r31, 0xFE	; 254
     7a4:	8a e0       	ldi	r24, 0x0A	; 10
     7a6:	81 83       	std	Z+1, r24	; 0x01
     7a8:	90 83       	st	Z, r25
     7aa:	fb 01       	movw	r30, r22
     7ac:	33 97       	sbiw	r30, 0x03	; 3
     7ae:	cf 01       	movw	r24, r30
     7b0:	88 0f       	add	r24, r24
     7b2:	99 1f       	adc	r25, r25
     7b4:	e8 0f       	add	r30, r24
     7b6:	f9 1f       	adc	r31, r25
     7b8:	e6 56       	subi	r30, 0x66	; 102
     7ba:	fe 4f       	sbci	r31, 0xFE	; 254
     7bc:	11 82       	std	Z+1, r1	; 0x01
     7be:	10 82       	st	Z, r1
     7c0:	6d 5f       	subi	r22, 0xFD	; 253
     7c2:	7f 4f       	sbci	r23, 0xFF	; 255
     7c4:	fb 01       	movw	r30, r22
     7c6:	ee 0f       	add	r30, r30
     7c8:	ff 1f       	adc	r31, r31
     7ca:	6e 0f       	add	r22, r30
     7cc:	7f 1f       	adc	r23, r31
     7ce:	fb 01       	movw	r30, r22
     7d0:	e6 56       	subi	r30, 0x66	; 102
     7d2:	fe 4f       	sbci	r31, 0xFE	; 254
     7d4:	11 82       	std	Z+1, r1	; 0x01
     7d6:	10 82       	st	Z, r1
     7d8:	12 82       	std	Z+2, r1	; 0x02
     7da:	68 e1       	ldi	r22, 0x18	; 24
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	8a e9       	ldi	r24, 0x9A	; 154
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0e 94 b3 02 	call	0x566	; 0x566 <ws2812_setleds>
     7e6:	08 95       	ret

000007e8 <ReadCommand>:
     7e8:	bf 92       	push	r11
     7ea:	cf 92       	push	r12
     7ec:	df 92       	push	r13
     7ee:	ef 92       	push	r14
     7f0:	ff 92       	push	r15
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	6b 01       	movw	r12, r22
     7fc:	7c 01       	movw	r14, r24
     7fe:	0e 94 5e 03 	call	0x6bc	; 0x6bc <clear>
     802:	ea e9       	ldi	r30, 0x9A	; 154
     804:	f1 e0       	ldi	r31, 0x01	; 1
     806:	11 82       	std	Z+1, r1	; 0x01
     808:	8e e1       	ldi	r24, 0x1E	; 30
     80a:	80 83       	st	Z, r24
     80c:	12 82       	std	Z+2, r1	; 0x02
     80e:	68 e1       	ldi	r22, 0x18	; 24
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	cf 01       	movw	r24, r30
     814:	0e 94 b3 02 	call	0x566	; 0x566 <ws2812_setleds>
     818:	2f eb       	ldi	r18, 0xBF	; 191
     81a:	8e ec       	ldi	r24, 0xCE	; 206
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	21 50       	subi	r18, 0x01	; 1
     820:	80 40       	sbci	r24, 0x00	; 0
     822:	90 40       	sbci	r25, 0x00	; 0
     824:	e1 f7       	brne	.-8      	; 0x81e <ReadCommand+0x36>
     826:	00 c0       	rjmp	.+0      	; 0x828 <ReadCommand+0x40>
     828:	00 00       	nop
     82a:	ca e9       	ldi	r28, 0x9A	; 154
     82c:	d1 e0       	ldi	r29, 0x01	; 1
     82e:	05 ee       	ldi	r16, 0xE5	; 229
     830:	11 e0       	ldi	r17, 0x01	; 1
     832:	0f 2e       	mov	r0, r31
     834:	fe e1       	ldi	r31, 0x1E	; 30
     836:	bf 2e       	mov	r11, r31
     838:	f0 2d       	mov	r31, r0
     83a:	c0 fe       	sbrs	r12, 0
     83c:	0a c0       	rjmp	.+20     	; 0x852 <ReadCommand+0x6a>
     83e:	b9 82       	std	Y+1, r11	; 0x01
     840:	18 82       	st	Y, r1
     842:	ba 82       	std	Y+2, r11	; 0x02
     844:	68 e1       	ldi	r22, 0x18	; 24
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	8a e9       	ldi	r24, 0x9A	; 154
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 b3 02 	call	0x566	; 0x566 <ws2812_setleds>
     850:	09 c0       	rjmp	.+18     	; 0x864 <ReadCommand+0x7c>
     852:	19 82       	std	Y+1, r1	; 0x01
     854:	18 82       	st	Y, r1
     856:	1a 82       	std	Y+2, r1	; 0x02
     858:	68 e1       	ldi	r22, 0x18	; 24
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	8a e9       	ldi	r24, 0x9A	; 154
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 b3 02 	call	0x566	; 0x566 <ws2812_setleds>
     864:	f6 94       	lsr	r15
     866:	e7 94       	ror	r14
     868:	d7 94       	ror	r13
     86a:	c7 94       	ror	r12
     86c:	2f e7       	ldi	r18, 0x7F	; 127
     86e:	88 e3       	ldi	r24, 0x38	; 56
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	21 50       	subi	r18, 0x01	; 1
     874:	80 40       	sbci	r24, 0x00	; 0
     876:	90 40       	sbci	r25, 0x00	; 0
     878:	e1 f7       	brne	.-8      	; 0x872 <ReadCommand+0x8a>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <ReadCommand+0x94>
     87c:	00 00       	nop
     87e:	23 96       	adiw	r28, 0x03	; 3
     880:	c0 17       	cp	r28, r16
     882:	d1 07       	cpc	r29, r17
     884:	d1 f6       	brne	.-76     	; 0x83a <ReadCommand+0x52>
     886:	2f ef       	ldi	r18, 0xFF	; 255
     888:	89 e6       	ldi	r24, 0x69	; 105
     88a:	98 e1       	ldi	r25, 0x18	; 24
     88c:	21 50       	subi	r18, 0x01	; 1
     88e:	80 40       	sbci	r24, 0x00	; 0
     890:	90 40       	sbci	r25, 0x00	; 0
     892:	e1 f7       	brne	.-8      	; 0x88c <ReadCommand+0xa4>
     894:	00 c0       	rjmp	.+0      	; 0x896 <ReadCommand+0xae>
     896:	00 00       	nop
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	ff 90       	pop	r15
     8a2:	ef 90       	pop	r14
     8a4:	df 90       	pop	r13
     8a6:	cf 90       	pop	r12
     8a8:	bf 90       	pop	r11
     8aa:	08 95       	ret

000008ac <fillRGB>:
     8ac:	fc 01       	movw	r30, r24
     8ae:	40 81       	ld	r20, Z
     8b0:	31 81       	ldd	r19, Z+1	; 0x01
     8b2:	22 81       	ldd	r18, Z+2	; 0x02
     8b4:	ea e9       	ldi	r30, 0x9A	; 154
     8b6:	f1 e0       	ldi	r31, 0x01	; 1
     8b8:	82 ee       	ldi	r24, 0xE2	; 226
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	41 83       	std	Z+1, r20	; 0x01
     8be:	30 83       	st	Z, r19
     8c0:	22 83       	std	Z+2, r18	; 0x02
     8c2:	33 96       	adiw	r30, 0x03	; 3
     8c4:	e8 17       	cp	r30, r24
     8c6:	f9 07       	cpc	r31, r25
     8c8:	c9 f7       	brne	.-14     	; 0x8bc <fillRGB+0x10>
     8ca:	68 e1       	ldi	r22, 0x18	; 24
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	8a e9       	ldi	r24, 0x9A	; 154
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	0e 94 b3 02 	call	0x566	; 0x566 <ws2812_setleds>
     8d6:	08 95       	ret

000008d8 <akku_anzeige>:
     8d8:	bf 92       	push	r11
     8da:	cf 92       	push	r12
     8dc:	df 92       	push	r13
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	00 d0       	rcall	.+0      	; 0x8ec <akku_anzeige+0x14>
     8ec:	1f 92       	push	r1
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	d0 90 5e 01 	lds	r13, 0x015E	; 0x80015e <akkuoffset>
     8f6:	d1 10       	cpse	r13, r1
     8f8:	0b c0       	rjmp	.+22     	; 0x910 <__stack+0x11>
     8fa:	84 e6       	ldi	r24, 0x64	; 100
     8fc:	89 83       	std	Y+1, r24	; 0x01
     8fe:	1a 82       	std	Y+2, r1	; 0x02
     900:	1b 82       	std	Y+3, r1	; 0x03
     902:	ce 01       	movw	r24, r28
     904:	01 96       	adiw	r24, 0x01	; 1
     906:	0e 94 56 04 	call	0x8ac	; 0x8ac <fillRGB>
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	05 c0       	rjmp	.+10     	; 0x91a <__stack+0x1b>
     910:	2d 2d       	mov	r18, r13
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	22 31       	cpi	r18, 0x12	; 18
     916:	31 05       	cpc	r19, r1
     918:	24 f4       	brge	.+8      	; 0x922 <__stack+0x23>
     91a:	81 e1       	ldi	r24, 0x11	; 17
     91c:	c8 2e       	mov	r12, r24
     91e:	c2 1a       	sub	r12, r18
     920:	01 c0       	rjmp	.+2      	; 0x924 <__stack+0x25>
     922:	c1 2c       	mov	r12, r1
     924:	88 e0       	ldi	r24, 0x08	; 8
     926:	8d 15       	cp	r24, r13
     928:	30 f4       	brcc	.+12     	; 0x936 <__stack+0x37>
     92a:	0f 2e       	mov	r0, r31
     92c:	f8 ef       	ldi	r31, 0xF8	; 248
     92e:	bf 2e       	mov	r11, r31
     930:	f0 2d       	mov	r31, r0
     932:	bd 0c       	add	r11, r13
     934:	01 c0       	rjmp	.+2      	; 0x938 <__stack+0x39>
     936:	b1 2c       	mov	r11, r1
     938:	0f 2e       	mov	r0, r31
     93a:	fa e9       	ldi	r31, 0x9A	; 154
     93c:	ef 2e       	mov	r14, r31
     93e:	f1 e0       	ldi	r31, 0x01	; 1
     940:	ff 2e       	mov	r15, r31
     942:	f0 2d       	mov	r31, r0
     944:	00 e0       	ldi	r16, 0x00	; 0
     946:	10 e0       	ldi	r17, 0x00	; 0
     948:	0d 15       	cp	r16, r13
     94a:	50 f4       	brcc	.+20     	; 0x960 <__stack+0x61>
     94c:	f7 01       	movw	r30, r14
     94e:	c1 82       	std	Z+1, r12	; 0x01
     950:	b0 82       	st	Z, r11
     952:	12 82       	std	Z+2, r1	; 0x02
     954:	b8 01       	movw	r22, r16
     956:	8a e9       	ldi	r24, 0x9A	; 154
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 b3 02 	call	0x566	; 0x566 <ws2812_setleds>
     95e:	09 c0       	rjmp	.+18     	; 0x972 <__stack+0x73>
     960:	f7 01       	movw	r30, r14
     962:	11 82       	std	Z+1, r1	; 0x01
     964:	10 82       	st	Z, r1
     966:	12 82       	std	Z+2, r1	; 0x02
     968:	b8 01       	movw	r22, r16
     96a:	8a e9       	ldi	r24, 0x9A	; 154
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	0e 94 b3 02 	call	0x566	; 0x566 <ws2812_setleds>
     972:	0f 5f       	subi	r16, 0xFF	; 255
     974:	1f 4f       	sbci	r17, 0xFF	; 255
     976:	f3 e0       	ldi	r31, 0x03	; 3
     978:	ef 0e       	add	r14, r31
     97a:	f1 1c       	adc	r15, r1
     97c:	09 31       	cpi	r16, 0x19	; 25
     97e:	11 05       	cpc	r17, r1
     980:	19 f7       	brne	.-58     	; 0x948 <__stack+0x49>
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	ff 90       	pop	r15
     992:	ef 90       	pop	r14
     994:	df 90       	pop	r13
     996:	cf 90       	pop	r12
     998:	bf 90       	pop	r11
     99a:	08 95       	ret

0000099c <displayPalette>:
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	c7 e1       	ldi	r28, 0x17	; 23
     9a2:	d1 e0       	ldi	r29, 0x01	; 1
     9a4:	a0 e0       	ldi	r26, 0x00	; 0
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	2a 2f       	mov	r18, r26
     9aa:	cd 01       	movw	r24, r26
     9ac:	13 96       	adiw	r26, 0x03	; 3
     9ae:	ad 01       	movw	r20, r26
     9b0:	8a 17       	cp	r24, r26
     9b2:	9b 07       	cpc	r25, r27
     9b4:	a4 f4       	brge	.+40     	; 0x9de <displayPalette+0x42>
     9b6:	78 81       	ld	r23, Y
     9b8:	69 81       	ldd	r22, Y+1	; 0x01
     9ba:	3a 81       	ldd	r19, Y+2	; 0x02
     9bc:	fc 01       	movw	r30, r24
     9be:	ee 0f       	add	r30, r30
     9c0:	ff 1f       	adc	r31, r31
     9c2:	8e 0f       	add	r24, r30
     9c4:	9f 1f       	adc	r25, r31
     9c6:	fc 01       	movw	r30, r24
     9c8:	e6 56       	subi	r30, 0x66	; 102
     9ca:	fe 4f       	sbci	r31, 0xFE	; 254
     9cc:	71 83       	std	Z+1, r23	; 0x01
     9ce:	60 83       	st	Z, r22
     9d0:	32 83       	std	Z+2, r19	; 0x02
     9d2:	2f 5f       	subi	r18, 0xFF	; 255
     9d4:	82 2f       	mov	r24, r18
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	84 17       	cp	r24, r20
     9da:	95 07       	cpc	r25, r21
     9dc:	7c f3       	brlt	.-34     	; 0x9bc <displayPalette+0x20>
     9de:	23 96       	adiw	r28, 0x03	; 3
     9e0:	a5 31       	cpi	r26, 0x15	; 21
     9e2:	b1 05       	cpc	r27, r1
     9e4:	09 f7       	brne	.-62     	; 0x9a8 <displayPalette+0xc>
     9e6:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__bss_end+0x33>
     9ea:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <__bss_end+0x32>
     9ee:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <__bss_end+0x34>
     9f2:	68 e1       	ldi	r22, 0x18	; 24
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	8a e9       	ldi	r24, 0x9A	; 154
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	0e 94 b3 02 	call	0x566	; 0x566 <ws2812_setleds>
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	08 95       	ret

00000a04 <displayMenu>:
     a04:	ea e9       	ldi	r30, 0x9A	; 154
     a06:	f1 e0       	ldi	r31, 0x01	; 1
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	90 fd       	sbrc	r25, 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <displayMenu+0x12>
     a0e:	81 83       	std	Z+1, r24	; 0x01
     a10:	60 83       	st	Z, r22
     a12:	42 83       	std	Z+2, r20	; 0x02
     a14:	03 c0       	rjmp	.+6      	; 0xa1c <displayMenu+0x18>
     a16:	11 82       	std	Z+1, r1	; 0x01
     a18:	10 82       	st	Z, r1
     a1a:	12 82       	std	Z+2, r1	; 0x02
     a1c:	9f 5f       	subi	r25, 0xFF	; 255
     a1e:	33 96       	adiw	r30, 0x03	; 3
     a20:	98 31       	cpi	r25, 0x18	; 24
     a22:	99 f7       	brne	.-26     	; 0xa0a <displayMenu+0x6>
     a24:	68 e1       	ldi	r22, 0x18	; 24
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	8a e9       	ldi	r24, 0x9A	; 154
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	0e 94 b3 02 	call	0x566	; 0x566 <ws2812_setleds>
     a30:	08 95       	ret

00000a32 <colorselection>:
}
void colorselection (int ir)
{

	switch (ir)
     a32:	84 3f       	cpi	r24, 0xF4	; 244
     a34:	2b e0       	ldi	r18, 0x0B	; 11
     a36:	92 07       	cpc	r25, r18
     a38:	09 f4       	brne	.+2      	; 0xa3c <colorselection+0xa>
     a3a:	a5 c0       	rjmp	.+330    	; 0xb86 <colorselection+0x154>
     a3c:	7c f4       	brge	.+30     	; 0xa5c <colorselection+0x2a>
     a3e:	85 35       	cpi	r24, 0x55	; 85
     a40:	2a e0       	ldi	r18, 0x0A	; 10
     a42:	92 07       	cpc	r25, r18
     a44:	09 f4       	brne	.+2      	; 0xa48 <colorselection+0x16>
     a46:	79 c0       	rjmp	.+242    	; 0xb3a <colorselection+0x108>
     a48:	84 3d       	cpi	r24, 0xD4	; 212
     a4a:	2b e0       	ldi	r18, 0x0B	; 11
     a4c:	92 07       	cpc	r25, r18
     a4e:	09 f4       	brne	.+2      	; 0xa52 <colorselection+0x20>
     a50:	87 c0       	rjmp	.+270    	; 0xb60 <colorselection+0x12e>
     a52:	85 31       	cpi	r24, 0x15	; 21
     a54:	9a 40       	sbci	r25, 0x0A	; 10
     a56:	09 f0       	breq	.+2      	; 0xa5a <colorselection+0x28>
     a58:	a2 c0       	rjmp	.+324    	; 0xb9e <colorselection+0x16c>
     a5a:	36 c0       	rjmp	.+108    	; 0xac8 <colorselection+0x96>
     a5c:	81 37       	cpi	r24, 0x71	; 113
     a5e:	2e e0       	ldi	r18, 0x0E	; 14
     a60:	92 07       	cpc	r25, r18
     a62:	f9 f0       	breq	.+62     	; 0xaa2 <colorselection+0x70>
     a64:	2c f4       	brge	.+10     	; 0xa70 <colorselection+0x3e>
     a66:	81 33       	cpi	r24, 0x31	; 49
     a68:	9e 40       	sbci	r25, 0x0E	; 14
     a6a:	09 f4       	brne	.+2      	; 0xa6e <colorselection+0x3c>
     a6c:	53 c0       	rjmp	.+166    	; 0xb14 <colorselection+0xe2>
     a6e:	08 95       	ret
     a70:	80 33       	cpi	r24, 0x30	; 48
     a72:	2f e0       	ldi	r18, 0x0F	; 15
     a74:	92 07       	cpc	r25, r18
     a76:	21 f0       	breq	.+8      	; 0xa80 <colorselection+0x4e>
     a78:	80 37       	cpi	r24, 0x70	; 112
     a7a:	9f 40       	sbci	r25, 0x0F	; 15
     a7c:	c1 f1       	breq	.+112    	; 0xaee <colorselection+0xbc>
     a7e:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     a80:	e4 e1       	ldi	r30, 0x14	; 20
     a82:	f1 e0       	ldi	r31, 0x01	; 1
     a84:	a7 e1       	ldi	r26, 0x17	; 23
     a86:	b1 e0       	ldi	r27, 0x01	; 1
     a88:	8c 91       	ld	r24, X
     a8a:	80 83       	st	Z, r24
	dest[1]=source[1];
     a8c:	11 96       	adiw	r26, 0x01	; 1
     a8e:	8c 91       	ld	r24, X
     a90:	11 97       	sbiw	r26, 0x01	; 1
     a92:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     a94:	12 96       	adiw	r26, 0x02	; 2
     a96:	8c 91       	ld	r24, X
     a98:	82 83       	std	Z+2, r24	; 0x02

	switch (ir)
	{
		case ONE: //Taste 1
        assignColor(c_spin_color,colors[0]);
		fillRGB(c_spin_color);
     a9a:	cf 01       	movw	r24, r30
     a9c:	0e 94 56 04 	call	0x8ac	; 0x8ac <fillRGB>
		break;
     aa0:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     aa2:	e4 e1       	ldi	r30, 0x14	; 20
     aa4:	f1 e0       	ldi	r31, 0x01	; 1
     aa6:	a7 e1       	ldi	r26, 0x17	; 23
     aa8:	b1 e0       	ldi	r27, 0x01	; 1
     aaa:	13 96       	adiw	r26, 0x03	; 3
     aac:	8c 91       	ld	r24, X
     aae:	13 97       	sbiw	r26, 0x03	; 3
     ab0:	80 83       	st	Z, r24
	dest[1]=source[1];
     ab2:	14 96       	adiw	r26, 0x04	; 4
     ab4:	8c 91       	ld	r24, X
     ab6:	14 97       	sbiw	r26, 0x04	; 4
     ab8:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     aba:	15 96       	adiw	r26, 0x05	; 5
     abc:	8c 91       	ld	r24, X
     abe:	82 83       	std	Z+2, r24	; 0x02
		fillRGB(c_spin_color);
		break;
		
		case TWO: //Taste 2
        assignColor(c_spin_color,colors[1]);
		fillRGB(c_spin_color);
     ac0:	cf 01       	movw	r24, r30
     ac2:	0e 94 56 04 	call	0x8ac	; 0x8ac <fillRGB>
		break;
     ac6:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     ac8:	e4 e1       	ldi	r30, 0x14	; 20
     aca:	f1 e0       	ldi	r31, 0x01	; 1
     acc:	a7 e1       	ldi	r26, 0x17	; 23
     ace:	b1 e0       	ldi	r27, 0x01	; 1
     ad0:	16 96       	adiw	r26, 0x06	; 6
     ad2:	8c 91       	ld	r24, X
     ad4:	16 97       	sbiw	r26, 0x06	; 6
     ad6:	80 83       	st	Z, r24
	dest[1]=source[1];
     ad8:	17 96       	adiw	r26, 0x07	; 7
     ada:	8c 91       	ld	r24, X
     adc:	17 97       	sbiw	r26, 0x07	; 7
     ade:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     ae0:	18 96       	adiw	r26, 0x08	; 8
     ae2:	8c 91       	ld	r24, X
     ae4:	82 83       	std	Z+2, r24	; 0x02
		fillRGB(c_spin_color);
		break;

		case THREE: //Taste 3
        assignColor(c_spin_color,colors[2]);
		fillRGB(c_spin_color);
     ae6:	cf 01       	movw	r24, r30
     ae8:	0e 94 56 04 	call	0x8ac	; 0x8ac <fillRGB>
		break;
     aec:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     aee:	e4 e1       	ldi	r30, 0x14	; 20
     af0:	f1 e0       	ldi	r31, 0x01	; 1
     af2:	a7 e1       	ldi	r26, 0x17	; 23
     af4:	b1 e0       	ldi	r27, 0x01	; 1
     af6:	19 96       	adiw	r26, 0x09	; 9
     af8:	8c 91       	ld	r24, X
     afa:	19 97       	sbiw	r26, 0x09	; 9
     afc:	80 83       	st	Z, r24
	dest[1]=source[1];
     afe:	1a 96       	adiw	r26, 0x0a	; 10
     b00:	8c 91       	ld	r24, X
     b02:	1a 97       	sbiw	r26, 0x0a	; 10
     b04:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     b06:	1b 96       	adiw	r26, 0x0b	; 11
     b08:	8c 91       	ld	r24, X
     b0a:	82 83       	std	Z+2, r24	; 0x02
		fillRGB(c_spin_color);
		break;
		
		case FOUR: //Taste 4
		assignColor(c_spin_color,colors[3]);
		fillRGB(c_spin_color);
     b0c:	cf 01       	movw	r24, r30
     b0e:	0e 94 56 04 	call	0x8ac	; 0x8ac <fillRGB>
		break;
     b12:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     b14:	e4 e1       	ldi	r30, 0x14	; 20
     b16:	f1 e0       	ldi	r31, 0x01	; 1
     b18:	a7 e1       	ldi	r26, 0x17	; 23
     b1a:	b1 e0       	ldi	r27, 0x01	; 1
     b1c:	1c 96       	adiw	r26, 0x0c	; 12
     b1e:	8c 91       	ld	r24, X
     b20:	1c 97       	sbiw	r26, 0x0c	; 12
     b22:	80 83       	st	Z, r24
	dest[1]=source[1];
     b24:	1d 96       	adiw	r26, 0x0d	; 13
     b26:	8c 91       	ld	r24, X
     b28:	1d 97       	sbiw	r26, 0x0d	; 13
     b2a:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     b2c:	1e 96       	adiw	r26, 0x0e	; 14
     b2e:	8c 91       	ld	r24, X
     b30:	82 83       	std	Z+2, r24	; 0x02
		fillRGB(c_spin_color);
		break;
		
		case FIVE: //Taste 5
		assignColor(c_spin_color,colors[4]);
		fillRGB(c_spin_color);
     b32:	cf 01       	movw	r24, r30
     b34:	0e 94 56 04 	call	0x8ac	; 0x8ac <fillRGB>
		break;
     b38:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     b3a:	e4 e1       	ldi	r30, 0x14	; 20
     b3c:	f1 e0       	ldi	r31, 0x01	; 1
     b3e:	a7 e1       	ldi	r26, 0x17	; 23
     b40:	b1 e0       	ldi	r27, 0x01	; 1
     b42:	1f 96       	adiw	r26, 0x0f	; 15
     b44:	8c 91       	ld	r24, X
     b46:	1f 97       	sbiw	r26, 0x0f	; 15
     b48:	80 83       	st	Z, r24
	dest[1]=source[1];
     b4a:	50 96       	adiw	r26, 0x10	; 16
     b4c:	8c 91       	ld	r24, X
     b4e:	50 97       	sbiw	r26, 0x10	; 16
     b50:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     b52:	51 96       	adiw	r26, 0x11	; 17
     b54:	8c 91       	ld	r24, X
     b56:	82 83       	std	Z+2, r24	; 0x02
		fillRGB(c_spin_color);
		break;

		case SIX: //Taste 6
		assignColor(c_spin_color,colors[5]);
		fillRGB(c_spin_color);
     b58:	cf 01       	movw	r24, r30
     b5a:	0e 94 56 04 	call	0x8ac	; 0x8ac <fillRGB>
		break;
     b5e:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     b60:	e4 e1       	ldi	r30, 0x14	; 20
     b62:	f1 e0       	ldi	r31, 0x01	; 1
     b64:	a7 e1       	ldi	r26, 0x17	; 23
     b66:	b1 e0       	ldi	r27, 0x01	; 1
     b68:	52 96       	adiw	r26, 0x12	; 18
     b6a:	8c 91       	ld	r24, X
     b6c:	52 97       	sbiw	r26, 0x12	; 18
     b6e:	80 83       	st	Z, r24
	dest[1]=source[1];
     b70:	53 96       	adiw	r26, 0x13	; 19
     b72:	8c 91       	ld	r24, X
     b74:	53 97       	sbiw	r26, 0x13	; 19
     b76:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     b78:	54 96       	adiw	r26, 0x14	; 20
     b7a:	8c 91       	ld	r24, X
     b7c:	82 83       	std	Z+2, r24	; 0x02
		fillRGB(c_spin_color);
		break;
		
		case SEVEN: //Taste 7
		assignColor(c_spin_color,colors[6]);
		fillRGB(c_spin_color);
     b7e:	cf 01       	movw	r24, r30
     b80:	0e 94 56 04 	call	0x8ac	; 0x8ac <fillRGB>
		break;		
     b84:	08 95       	ret

		case PLAY: //Taste play
		colormode=0;
     b86:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <colormode>
		defaultcolors=0;
     b8a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <defaultcolors>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     b8e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>

		case PLAY: //Taste play
		colormode=0;
		defaultcolors=0;
		turnofftimer();
		irFlag=0;
     b92:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <irFlag>
		state=0;
     b96:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <state>
		clear();
     b9a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <clear>
     b9e:	08 95       	ret

00000ba0 <setState>:

}

void setState (int ir)
{
	switch (ir)
     ba0:	84 3d       	cpi	r24, 0xD4	; 212
     ba2:	2b e0       	ldi	r18, 0x0B	; 11
     ba4:	92 07       	cpc	r25, r18
     ba6:	09 f4       	brne	.+2      	; 0xbaa <setState+0xa>
     ba8:	52 c0       	rjmp	.+164    	; 0xc4e <setState+0xae>
     baa:	a4 f4       	brge	.+40     	; 0xbd4 <setState+0x34>
     bac:	85 35       	cpi	r24, 0x55	; 85
     bae:	2a e0       	ldi	r18, 0x0A	; 10
     bb0:	92 07       	cpc	r25, r18
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <setState+0x16>
     bb4:	45 c0       	rjmp	.+138    	; 0xc40 <setState+0xa0>
     bb6:	24 f4       	brge	.+8      	; 0xbc0 <setState+0x20>
     bb8:	85 31       	cpi	r24, 0x15	; 21
     bba:	9a 40       	sbci	r25, 0x0A	; 10
     bbc:	61 f1       	breq	.+88     	; 0xc16 <setState+0x76>
     bbe:	52 c0       	rjmp	.+164    	; 0xc64 <setState+0xc4>
     bc0:	85 3d       	cpi	r24, 0xD5	; 213
     bc2:	2a e0       	ldi	r18, 0x0A	; 10
     bc4:	92 07       	cpc	r25, r18
     bc6:	09 f4       	brne	.+2      	; 0xbca <setState+0x2a>
     bc8:	46 c0       	rjmp	.+140    	; 0xc56 <setState+0xb6>
     bca:	84 36       	cpi	r24, 0x64	; 100
     bcc:	9b 40       	sbci	r25, 0x0B	; 11
     bce:	09 f4       	brne	.+2      	; 0xbd2 <setState+0x32>
     bd0:	46 c0       	rjmp	.+140    	; 0xc5e <setState+0xbe>
     bd2:	48 c0       	rjmp	.+144    	; 0xc64 <setState+0xc4>
     bd4:	81 37       	cpi	r24, 0x71	; 113
     bd6:	2e e0       	ldi	r18, 0x0E	; 14
     bd8:	92 07       	cpc	r25, r18
     bda:	b9 f0       	breq	.+46     	; 0xc0a <setState+0x6a>
     bdc:	44 f4       	brge	.+16     	; 0xbee <setState+0x4e>
     bde:	81 33       	cpi	r24, 0x31	; 49
     be0:	2e e0       	ldi	r18, 0x0E	; 14
     be2:	92 07       	cpc	r25, r18
     be4:	31 f1       	breq	.+76     	; 0xc32 <setState+0x92>
     be6:	81 36       	cpi	r24, 0x61	; 97
     be8:	9e 40       	sbci	r25, 0x0E	; 14
     bea:	f1 f1       	breq	.+124    	; 0xc68 <setState+0xc8>
     bec:	3b c0       	rjmp	.+118    	; 0xc64 <setState+0xc4>
     bee:	80 33       	cpi	r24, 0x30	; 48
     bf0:	2f e0       	ldi	r18, 0x0F	; 15
     bf2:	92 07       	cpc	r25, r18
     bf4:	21 f0       	breq	.+8      	; 0xbfe <setState+0x5e>
     bf6:	80 37       	cpi	r24, 0x70	; 112
     bf8:	9f 40       	sbci	r25, 0x0F	; 15
     bfa:	a1 f0       	breq	.+40     	; 0xc24 <setState+0x84>
     bfc:	33 c0       	rjmp	.+102    	; 0xc64 <setState+0xc4>
	{
		case ONE: //Taste 1 //0,1
	    alcoholmode=0;
     bfe:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <alcoholmode>
		state=1;
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <state>
		break;
     c08:	08 95       	ret
		
		case TWO: //Taste 2  //0,2
	    alcoholmode=1;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <alcoholmode>
	    state=1;
     c10:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <state>
		break;
     c14:	08 95       	ret

		case THREE: //Taste 3  //0,3
	    alcoholmode=2;
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <alcoholmode>
        state=1;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <state>
		break;
     c22:	08 95       	ret
		
		case FOUR: //Taste 4  //0,4
		alcoholmode=3;
     c24:	83 e0       	ldi	r24, 0x03	; 3
     c26:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <alcoholmode>
	    state=1;        
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <state>
		break;
     c30:	08 95       	ret
		
		case FIVE: //Taste 5   //0,5
	    alcoholmode=4;
     c32:	84 e0       	ldi	r24, 0x04	; 4
     c34:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <alcoholmode>
	    state=1;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <state>
		break;
     c3e:	08 95       	ret

		case SIX: //Taste 6    //0,6
	    alcoholmode=5;
     c40:	85 e0       	ldi	r24, 0x05	; 5
     c42:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <alcoholmode>
	    state=1;       
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <state>
		break;
     c4c:	08 95       	ret
		
		case SEVEN: //Taste 7
        state=3;  //akkuanzeige
     c4e:	83 e0       	ldi	r24, 0x03	; 3
     c50:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <state>
		break;
     c54:	08 95       	ret
        
		case EIGHT: //Taste 8
        state=2;  //debug
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <state>
        break;
     c5c:	08 95       	ret
		
		case NINE: //Taste 9
		state=0;  //cspin
     c5e:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <state>
		break;
     c62:	08 95       	ret
		case EQ: //Taste EQ
		//belegt durch tara
		break;
		
		default:
		state=0;   //cspin
     c64:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <state>
     c68:	08 95       	ret

00000c6a <taraselection>:
}

void taraselection(int ir,uint8_t adc_val)
{
	
	switch (ir)
     c6a:	81 33       	cpi	r24, 0x31	; 49
     c6c:	2e e0       	ldi	r18, 0x0E	; 14
     c6e:	92 07       	cpc	r25, r18
     c70:	09 f4       	brne	.+2      	; 0xc74 <taraselection+0xa>
     c72:	59 c0       	rjmp	.+178    	; 0xd26 <taraselection+0xbc>
     c74:	4c f4       	brge	.+18     	; 0xc88 <taraselection+0x1e>
     c76:	85 31       	cpi	r24, 0x15	; 21
     c78:	2a e0       	ldi	r18, 0x0A	; 10
     c7a:	92 07       	cpc	r25, r18
     c7c:	91 f1       	breq	.+100    	; 0xce2 <taraselection+0x78>
     c7e:	85 35       	cpi	r24, 0x55	; 85
     c80:	9a 40       	sbci	r25, 0x0A	; 10
     c82:	09 f4       	brne	.+2      	; 0xc86 <taraselection+0x1c>
     c84:	61 c0       	rjmp	.+194    	; 0xd48 <taraselection+0xde>
     c86:	71 c0       	rjmp	.+226    	; 0xd6a <taraselection+0x100>
     c88:	80 33       	cpi	r24, 0x30	; 48
     c8a:	2f e0       	ldi	r18, 0x0F	; 15
     c8c:	92 07       	cpc	r25, r18
     c8e:	49 f0       	breq	.+18     	; 0xca2 <taraselection+0x38>
     c90:	80 37       	cpi	r24, 0x70	; 112
     c92:	2f e0       	ldi	r18, 0x0F	; 15
     c94:	92 07       	cpc	r25, r18
     c96:	b1 f1       	breq	.+108    	; 0xd04 <taraselection+0x9a>
     c98:	81 37       	cpi	r24, 0x71	; 113
     c9a:	9e 40       	sbci	r25, 0x0E	; 14
     c9c:	09 f0       	breq	.+2      	; 0xca0 <taraselection+0x36>
     c9e:	65 c0       	rjmp	.+202    	; 0xd6a <taraselection+0x100>
     ca0:	10 c0       	rjmp	.+32     	; 0xcc2 <taraselection+0x58>
	{
		case ONE: //Taste 1 //0,1
		adc_offsets[0]=adc_val;
     ca2:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <adc_offsets>
	    alcoholmode=0;
     ca6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <alcoholmode>
		state=1;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <state>
		taramode=0;
     cb0:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <taramode>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     cb4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		adc_offsets[0]=adc_val;
	    alcoholmode=0;
		state=1;
		taramode=0;
		turnofftimer();
		irFlag=0;
     cb8:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <irFlag>
		clear();
     cbc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <clear>
		break;
     cc0:	08 95       	ret
		
		case TWO: //Taste 2  //0,2
		adc_offsets[1]=adc_val;
     cc2:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <adc_offsets+0x1>
		alcoholmode=1;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <alcoholmode>
		state=1;
     ccc:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <state>
		taramode=0;
     cd0:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <taramode>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     cd4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		adc_offsets[1]=adc_val;
		alcoholmode=1;
		state=1;
		taramode=0;
		turnofftimer();
		irFlag=0;
     cd8:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <irFlag>
		clear();		
     cdc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <clear>
		break;
     ce0:	08 95       	ret

		case THREE: //Taste 3  //0,3
		adc_offsets[2]=adc_val;
     ce2:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <adc_offsets+0x2>
		alcoholmode=2;
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <alcoholmode>
		state=1;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <state>
		taramode=0;
     cf2:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <taramode>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     cf6:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		adc_offsets[2]=adc_val;
		alcoholmode=2;
		state=1;
		taramode=0;
		turnofftimer();
		irFlag=0;
     cfa:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <irFlag>
		clear();
     cfe:	0e 94 5e 03 	call	0x6bc	; 0x6bc <clear>
		break;
     d02:	08 95       	ret
		
		case FOUR: //Taste 4 //0,4
		adc_offsets[3]=adc_val;
     d04:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <adc_offsets+0x3>
		alcoholmode=3;
     d08:	83 e0       	ldi	r24, 0x03	; 3
     d0a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <alcoholmode>
		state=1;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <state>
		taramode=0;
     d14:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <taramode>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     d18:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		adc_offsets[3]=adc_val;
		alcoholmode=3;
		state=1;
		taramode=0;
		turnofftimer();
		irFlag=0;
     d1c:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <irFlag>
		clear();
     d20:	0e 94 5e 03 	call	0x6bc	; 0x6bc <clear>
		break;
     d24:	08 95       	ret
		
		case FIVE: //Taste 5  //0,5
		adc_offsets[4]=adc_val;
     d26:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <adc_offsets+0x4>
		alcoholmode=4;
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <alcoholmode>
		state=1;
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <state>
		taramode=0;
     d36:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <taramode>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     d3a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		adc_offsets[4]=adc_val;
		alcoholmode=4;
		state=1;
		taramode=0;
		turnofftimer();
		irFlag=0;
     d3e:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <irFlag>
		clear();
     d42:	0e 94 5e 03 	call	0x6bc	; 0x6bc <clear>
		break;
     d46:	08 95       	ret

		case SIX: //Taste 6  //0,6
		adc_offsets[5]=adc_val;
     d48:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <adc_offsets+0x5>
		alcoholmode=5;
     d4c:	85 e0       	ldi	r24, 0x05	; 5
     d4e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <alcoholmode>
		state=1;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <state>
		taramode=0;
     d58:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <taramode>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     d5c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		adc_offsets[5]=adc_val;
		alcoholmode=5;
		state=1;
		taramode=0;
		turnofftimer();
		irFlag=0;
     d60:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <irFlag>
		clear();
     d64:	0e 94 5e 03 	call	0x6bc	; 0x6bc <clear>
		break;
     d68:	08 95       	ret
		
		default:
		displayMenu(20,20,20); //weiss fuer tara
     d6a:	44 e1       	ldi	r20, 0x14	; 20
     d6c:	64 e1       	ldi	r22, 0x14	; 20
     d6e:	84 e1       	ldi	r24, 0x14	; 20
     d70:	0e 94 02 05 	call	0xa04	; 0xa04 <displayMenu>
     d74:	08 95       	ret

00000d76 <init_ml>:
		break;
	}
}

void init_ml()
{
     d76:	2f 92       	push	r2
     d78:	3f 92       	push	r3
     d7a:	4f 92       	push	r4
     d7c:	5f 92       	push	r5
     d7e:	6f 92       	push	r6
     d80:	7f 92       	push	r7
     d82:	8f 92       	push	r8
     d84:	9f 92       	push	r9
     d86:	af 92       	push	r10
     d88:	bf 92       	push	r11
     d8a:	cf 92       	push	r12
     d8c:	df 92       	push	r13
     d8e:	ef 92       	push	r14
     d90:	ff 92       	push	r15
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
	//uint64_t ml1=(112200)/vcc;    //255* 438mV     438mV entsprechen 500ml      //vcc zwischen 3700 und 4200
	//uint64_t ml2=(112200)/vcc;    //255* 438mV
	//uint64_t ml3=(112200)/vcc;    //255* 438mV 
	ml[0]=149600/vcc;    
     d9a:	20 90 56 01 	lds	r2, 0x0156	; 0x800156 <__data_end>
     d9e:	30 90 57 01 	lds	r3, 0x0157	; 0x800157 <__data_end+0x1>
     da2:	40 90 58 01 	lds	r4, 0x0158	; 0x800158 <__data_end+0x2>
     da6:	50 90 59 01 	lds	r5, 0x0159	; 0x800159 <__data_end+0x3>
     daa:	60 90 5a 01 	lds	r6, 0x015A	; 0x80015a <__data_end+0x4>
     dae:	70 90 5b 01 	lds	r7, 0x015B	; 0x80015b <__data_end+0x5>
     db2:	80 90 5c 01 	lds	r8, 0x015C	; 0x80015c <__data_end+0x6>
     db6:	90 90 5d 01 	lds	r9, 0x015D	; 0x80015d <__data_end+0x7>
     dba:	c7 e0       	ldi	r28, 0x07	; 7
     dbc:	d1 e0       	ldi	r29, 0x01	; 1
     dbe:	a2 2c       	mov	r10, r2
     dc0:	b3 2c       	mov	r11, r3
     dc2:	c4 2c       	mov	r12, r4
     dc4:	d5 2c       	mov	r13, r5
     dc6:	e6 2c       	mov	r14, r6
     dc8:	f7 2c       	mov	r15, r7
     dca:	08 2d       	mov	r16, r8
     dcc:	19 2d       	mov	r17, r9
     dce:	20 e6       	ldi	r18, 0x60	; 96
     dd0:	38 e4       	ldi	r19, 0x48	; 72
     dd2:	42 e0       	ldi	r20, 0x02	; 2
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__udivdi3>
     de2:	28 83       	st	Y, r18
	ml[1]=29920/vcc;   
     de4:	20 ee       	ldi	r18, 0xE0	; 224
     de6:	34 e7       	ldi	r19, 0x74	; 116
     de8:	40 e0       	ldi	r20, 0x00	; 0
     dea:	50 e0       	ldi	r21, 0x00	; 0
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__udivdi3>
     df8:	29 83       	std	Y+1, r18	; 0x01
	ml[2]=44880/vcc;
     dfa:	20 e5       	ldi	r18, 0x50	; 80
     dfc:	3f ea       	ldi	r19, 0xAF	; 175
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__udivdi3>
     e0e:	2a 83       	std	Y+2, r18	; 0x02
	ml[3]=59840/vcc;
     e10:	20 ec       	ldi	r18, 0xC0	; 192
     e12:	39 ee       	ldi	r19, 0xE9	; 233
     e14:	40 e0       	ldi	r20, 0x00	; 0
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__udivdi3>
     e24:	2b 83       	std	Y+3, r18	; 0x03
	ml[4]=72800/vcc;
     e26:	20 e6       	ldi	r18, 0x60	; 96
     e28:	3c e1       	ldi	r19, 0x1C	; 28
     e2a:	41 e0       	ldi	r20, 0x01	; 1
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__udivdi3>
     e3a:	2c 83       	std	Y+4, r18	; 0x04
	ml[5]=88760/vcc;
     e3c:	28 eb       	ldi	r18, 0xB8	; 184
     e3e:	3a e5       	ldi	r19, 0x5A	; 90
     e40:	41 e0       	ldi	r20, 0x01	; 1
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__udivdi3>
     e50:	2d 83       	std	Y+5, r18	; 0x05
	
	



}
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	ff 90       	pop	r15
     e5c:	ef 90       	pop	r14
     e5e:	df 90       	pop	r13
     e60:	cf 90       	pop	r12
     e62:	bf 90       	pop	r11
     e64:	af 90       	pop	r10
     e66:	9f 90       	pop	r9
     e68:	8f 90       	pop	r8
     e6a:	7f 90       	pop	r7
     e6c:	6f 90       	pop	r6
     e6e:	5f 90       	pop	r5
     e70:	4f 90       	pop	r4
     e72:	3f 90       	pop	r3
     e74:	2f 90       	pop	r2
     e76:	08 95       	ret

00000e78 <main>:
void akku_anzeige();
void init_ml();
///////////////////////////////////////////////////////////////////////////////////////////////////
int main(void) {
	//initTimer();
	initADC();
     e78:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	init_ml();
     e7c:	0e 94 bb 06 	call	0xd76	; 0xd76 <init_ml>

	//initIR();
	//DDRB |= (1 << 5) | (1 << 4);		   // set PB5 (pin 28) and PC4 (pin 27) for output
    DDRB |= (1 << 1);				        //set PB1 (D9) output for LED ring
     e80:	21 9a       	sbi	0x04, 1	; 4
	DDRC &= ~(1 << 5); 				        // set PC5 input for ADC 
     e82:	3d 98       	cbi	0x07, 5	; 7
	DDRC &= ~(1 << 4); 				        // set PC4 input for ADC vergleichswert
     e84:	3c 98       	cbi	0x07, 4	; 7

	DDRC &= ~(1 << 1);                       //set PC1 input for IR
     e86:	39 98       	cbi	0x07, 1	; 7
		}
		else
		{
			if (milli-IRmodeStart>500)
			{
				ready=1;
     e88:	77 24       	eor	r7, r7
     e8a:	73 94       	inc	r7
     e8c:	c6 e5       	ldi	r28, 0x56	; 86
     e8e:	d1 e0       	ldi	r29, 0x01	; 1
				{
					colorselection(ir);
				}
				else if (taramode)
				{
					adc_tara=ADCH;
     e90:	0f 2e       	mov	r0, r31
     e92:	f9 e7       	ldi	r31, 0x79	; 121
     e94:	8f 2e       	mov	r8, r31
     e96:	91 2c       	mov	r9, r1
     e98:	f0 2d       	mov	r31, r0

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     e9a:	0f 2e       	mov	r0, r31
     e9c:	ff e6       	ldi	r31, 0x6F	; 111
     e9e:	2f 2e       	mov	r2, r31
     ea0:	31 2c       	mov	r3, r1
     ea2:	f0 2d       	mov	r31, r0
				else if (ir!=0 && !colormode && !taramode)
				{
					turnofftimer();
					irFlag=0;
					clear();
					setState (ir);
     ea4:	0f 2e       	mov	r0, r31
     ea6:	f3 e7       	ldi	r31, 0x73	; 115
     ea8:	4f 2e       	mov	r4, r31
     eaa:	f1 e0       	ldi	r31, 0x01	; 1
     eac:	5f 2e       	mov	r5, r31
     eae:	f0 2d       	mov	r31, r0
	DDRC &= ~(1 << 1);                       //set PC1 input for IR

	while (1) 
	{
     
	if (irFlag==0) 
     eb0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <irFlag>
     eb4:	81 11       	cpse	r24, r1
     eb6:	1e c0       	rjmp	.+60     	; 0xef4 <main+0x7c>
	{
	fillFlag=0;
     eb8:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <fillFlag>
	ready=0;
     ebc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	switch(state)
     ec0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <state>
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	49 f0       	breq	.+18     	; 0xeda <main+0x62>
     ec8:	28 f0       	brcs	.+10     	; 0xed4 <main+0x5c>
     eca:	82 30       	cpi	r24, 0x02	; 2
     ecc:	49 f0       	breq	.+18     	; 0xee0 <main+0x68>
     ece:	83 30       	cpi	r24, 0x03	; 3
     ed0:	71 f0       	breq	.+28     	; 0xeee <main+0x76>
     ed2:	ee cf       	rjmp	.-36     	; 0xeb0 <main+0x38>
	{
	
	case 0  :
	
	auswahl();
     ed4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <auswahl>
	break;
     ed8:	eb cf       	rjmp	.-42     	; 0xeb0 <main+0x38>
	
	case 1  :
	//adc_anzeige();
	c_spin(); 
     eda:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <c_spin>
	break;
     ede:	e8 cf       	rjmp	.-48     	; 0xeb0 <main+0x38>
	
	case 2  :
	ReadCommand(0b0110111010101111);
     ee0:	6f ea       	ldi	r22, 0xAF	; 175
     ee2:	7e e6       	ldi	r23, 0x6E	; 110
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <ReadCommand>
	break;
     eec:	e1 cf       	rjmp	.-62     	; 0xeb0 <main+0x38>
	
	case 3 :
	//ReadCommand(akkuoffset);
	akku_anzeige();
     eee:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <akku_anzeige>
     ef2:	de cf       	rjmp	.-68     	; 0xeb0 <main+0x38>
	}
	}
	else
	{
		
		if (fillFlag==0)
     ef4:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <fillFlag>
     ef8:	81 11       	cpse	r24, r1
     efa:	1d c0       	rjmp	.+58     	; 0xf36 <main+0xbe>
		{
			
		    displayMenu(0,10,15); //tuerkis fuer tara
     efc:	4f e0       	ldi	r20, 0x0F	; 15
     efe:	6a e0       	ldi	r22, 0x0A	; 10
     f00:	0e 94 02 05 	call	0xa04	; 0xa04 <displayMenu>
			fillFlag=1;
     f04:	70 92 77 01 	sts	0x0177, r7	; 0x800177 <fillFlag>
			initTimer();
     f08:	0e 94 44 08 	call	0x1088	; 0x1088 <initTimer>
			IRmodeStart=milli;
     f0c:	00 91 a5 01 	lds	r16, 0x01A5	; 0x8001a5 <milli>
     f10:	10 91 a6 01 	lds	r17, 0x01A6	; 0x8001a6 <milli+0x1>
     f14:	00 93 92 01 	sts	0x0192, r16	; 0x800192 <IRmodeStart>
     f18:	10 93 93 01 	sts	0x0193, r17	; 0x800193 <IRmodeStart+0x1>
     f1c:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <IRmodeStart+0x2>
     f20:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <IRmodeStart+0x3>
     f24:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <IRmodeStart+0x4>
     f28:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <IRmodeStart+0x5>
     f2c:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <IRmodeStart+0x6>
     f30:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <IRmodeStart+0x7>
     f34:	bd cf       	rjmp	.-134    	; 0xeb0 <main+0x38>
		}
		else
		{
			if (milli-IRmodeStart>500)
     f36:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <milli>
     f3a:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <milli+0x1>
     f3e:	a0 90 92 01 	lds	r10, 0x0192	; 0x800192 <IRmodeStart>
     f42:	b0 90 93 01 	lds	r11, 0x0193	; 0x800193 <IRmodeStart+0x1>
     f46:	c0 90 94 01 	lds	r12, 0x0194	; 0x800194 <IRmodeStart+0x2>
     f4a:	d0 90 95 01 	lds	r13, 0x0195	; 0x800195 <IRmodeStart+0x3>
     f4e:	e0 90 96 01 	lds	r14, 0x0196	; 0x800196 <IRmodeStart+0x4>
     f52:	f0 90 97 01 	lds	r15, 0x0197	; 0x800197 <IRmodeStart+0x5>
     f56:	00 91 98 01 	lds	r16, 0x0198	; 0x800198 <IRmodeStart+0x6>
     f5a:	10 91 99 01 	lds	r17, 0x0199	; 0x800199 <IRmodeStart+0x7>
     f5e:	a9 01       	movw	r20, r18
     f60:	35 2f       	mov	r19, r21
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 05 0b 	call	0x160a	; 0x160a <__subdi3>
     f72:	24 3f       	cpi	r18, 0xF4	; 244
     f74:	31 40       	sbci	r19, 0x01	; 1
     f76:	41 05       	cpc	r20, r1
     f78:	51 05       	cpc	r21, r1
     f7a:	61 05       	cpc	r22, r1
     f7c:	71 05       	cpc	r23, r1
     f7e:	81 05       	cpc	r24, r1
     f80:	91 05       	cpc	r25, r1
     f82:	09 f0       	breq	.+2      	; 0xf86 <main+0x10e>
     f84:	08 f4       	brcc	.+2      	; 0xf88 <main+0x110>
     f86:	94 cf       	rjmp	.-216    	; 0xeb0 <main+0x38>
			{
				ready=1;
     f88:	70 92 00 01 	sts	0x0100, r7	; 0x800100 <__data_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f8c:	ff e7       	ldi	r31, 0x7F	; 127
     f8e:	28 e3       	ldi	r18, 0x38	; 56
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	f1 50       	subi	r31, 0x01	; 1
     f94:	20 40       	sbci	r18, 0x00	; 0
     f96:	80 40       	sbci	r24, 0x00	; 0
     f98:	e1 f7       	brne	.-8      	; 0xf92 <main+0x11a>
     f9a:	00 c0       	rjmp	.+0      	; 0xf9c <main+0x124>
     f9c:	00 00       	nop
				_delay_ms(50);
				ir = getIRCommandRec();
     f9e:	0e 94 2e 01 	call	0x25c	; 0x25c <getIRCommandRec>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <ir>
     faa:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <ir+0x1>
     fae:	a0 93 75 01 	sts	0x0175, r26	; 0x800175 <ir+0x2>
     fb2:	b0 93 76 01 	sts	0x0176, r27	; 0x800176 <ir+0x3>
     fb6:	ec e2       	ldi	r30, 0x2C	; 44
     fb8:	f1 e0       	ldi	r31, 0x01	; 1
     fba:	20 e0       	ldi	r18, 0x00	; 0
				int d;
				validinput=0;
				for (d=0;d<21;d++)
				{
					if (ir==validcodes[d])
     fbc:	41 91       	ld	r20, Z+
     fbe:	51 91       	ld	r21, Z+
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	84 17       	cp	r24, r20
     fc6:	95 07       	cpc	r25, r21
     fc8:	a6 07       	cpc	r26, r22
     fca:	b7 07       	cpc	r27, r23
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <main+0x158>
					{
						validinput=1;
     fce:	27 2d       	mov	r18, r7
				ready=1;
				_delay_ms(50);
				ir = getIRCommandRec();
				int d;
				validinput=0;
				for (d=0;d<21;d++)
     fd0:	ec 17       	cp	r30, r28
     fd2:	fd 07       	cpc	r31, r29
     fd4:	99 f7       	brne	.-26     	; 0xfbc <main+0x144>
     fd6:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <validinput>
						validinput=1;
					}
				}
				
								
				if (validinput)
     fda:	22 23       	and	r18, r18
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <main+0x168>
     fde:	68 cf       	rjmp	.-304    	; 0xeb0 <main+0x38>
				{
							
				if (ir==VOLPLUS && !colormode && !taramode)  //if taste6 color mode  
     fe0:	84 39       	cpi	r24, 0x94	; 148
     fe2:	eb e0       	ldi	r30, 0x0B	; 11
     fe4:	9e 07       	cpc	r25, r30
     fe6:	a1 05       	cpc	r26, r1
     fe8:	b1 05       	cpc	r27, r1
     fea:	69 f4       	brne	.+26     	; 0x1006 <main+0x18e>
     fec:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <colormode>
     ff0:	21 11       	cpse	r18, r1
     ff2:	3b c0       	rjmp	.+118    	; 0x106a <main+0x1f2>
     ff4:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <taramode>
     ff8:	21 11       	cpse	r18, r1
     ffa:	23 c0       	rjmp	.+70     	; 0x1042 <main+0x1ca>
				{
				colormode=1;
     ffc:	70 92 72 01 	sts	0x0172, r7	; 0x800172 <colormode>
				displayPalette();	
    1000:	0e 94 ce 04 	call	0x99c	; 0x99c <displayPalette>
    1004:	55 cf       	rjmp	.-342    	; 0xeb0 <main+0x38>
								
				}
				else if (ir==EQ && !taramode && !colormode)  //TODO: put taramode on different pin
    1006:	81 36       	cpi	r24, 0x61	; 97
    1008:	fe e0       	ldi	r31, 0x0E	; 14
    100a:	9f 07       	cpc	r25, r31
    100c:	a1 05       	cpc	r26, r1
    100e:	b1 05       	cpc	r27, r1
    1010:	81 f4       	brne	.+32     	; 0x1032 <main+0x1ba>
    1012:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <taramode>
    1016:	21 11       	cpse	r18, r1
    1018:	10 c0       	rjmp	.+32     	; 0x103a <main+0x1c2>
    101a:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <colormode>
    101e:	21 11       	cpse	r18, r1
    1020:	24 c0       	rjmp	.+72     	; 0x106a <main+0x1f2>
				{
				taramode=1;
    1022:	70 92 70 01 	sts	0x0170, r7	; 0x800170 <taramode>
				displayMenu(20,20,20); //weiss fuer tara
    1026:	44 e1       	ldi	r20, 0x14	; 20
    1028:	64 e1       	ldi	r22, 0x14	; 20
    102a:	84 e1       	ldi	r24, 0x14	; 20
    102c:	0e 94 02 05 	call	0xa04	; 0xa04 <displayMenu>
    1030:	3f cf       	rjmp	.-386    	; 0xeb0 <main+0x38>
					
				}
				else if (ir!=0 && !colormode && !taramode)
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	a1 05       	cpc	r26, r1
    1036:	b1 05       	cpc	r27, r1
    1038:	a1 f0       	breq	.+40     	; 0x1062 <main+0x1ea>
    103a:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <colormode>
    103e:	21 11       	cpse	r18, r1
    1040:	14 c0       	rjmp	.+40     	; 0x106a <main+0x1f2>
    1042:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <taramode>
    1046:	21 11       	cpse	r18, r1
    1048:	18 c0       	rjmp	.+48     	; 0x107a <main+0x202>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
    104a:	f1 01       	movw	r30, r2
    104c:	10 82       	st	Z, r1
					
				}
				else if (ir!=0 && !colormode && !taramode)
				{
					turnofftimer();
					irFlag=0;
    104e:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <irFlag>
					clear();
    1052:	0e 94 5e 03 	call	0x6bc	; 0x6bc <clear>
					setState (ir);
    1056:	f2 01       	movw	r30, r4
    1058:	80 81       	ld	r24, Z
    105a:	91 81       	ldd	r25, Z+1	; 0x01
    105c:	0e 94 d0 05 	call	0xba0	; 0xba0 <setState>
    1060:	27 cf       	rjmp	.-434    	; 0xeb0 <main+0x38>

				}
				else if (colormode)
    1062:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <colormode>
    1066:	22 23       	and	r18, r18
    1068:	19 f0       	breq	.+6      	; 0x1070 <main+0x1f8>
				{
					colorselection(ir);
    106a:	0e 94 19 05 	call	0xa32	; 0xa32 <colorselection>
    106e:	20 cf       	rjmp	.-448    	; 0xeb0 <main+0x38>
				}
				else if (taramode)
    1070:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <taramode>
    1074:	22 23       	and	r18, r18
    1076:	09 f4       	brne	.+2      	; 0x107a <main+0x202>
    1078:	1b cf       	rjmp	.-458    	; 0xeb0 <main+0x38>
				{
					adc_tara=ADCH;
    107a:	f4 01       	movw	r30, r8
    107c:	60 81       	ld	r22, Z
    107e:	60 93 6f 01 	sts	0x016F, r22	; 0x80016f <adc_tara>
					taraselection(ir,adc_tara);
    1082:	0e 94 35 06 	call	0xc6a	; 0xc6a <taraselection>
    1086:	14 cf       	rjmp	.-472    	; 0xeb0 <main+0x38>

00001088 <initTimer>:

void sec_timer()
{
	TIMSK1 = 0b00000010;
	
	sei();
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	84 bd       	out	0x24, r24	; 36
    108c:	95 e0       	ldi	r25, 0x05	; 5
    108e:	95 bd       	out	0x25, r25	; 37
    1090:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1094:	9a e0       	ldi	r25, 0x0A	; 10
    1096:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    109a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
    109e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    10a2:	80 e8       	ldi	r24, 0x80	; 128
    10a4:	87 bd       	out	0x27, r24	; 39
    10a6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    10aa:	84 e6       	ldi	r24, 0x64	; 100
    10ac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    10b0:	78 94       	sei
    10b2:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <millisekunden+0x1>
    10b6:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <millisekunden>
    10ba:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <sekunde+0x1>
    10be:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <sekunde>
    10c2:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <minute+0x1>
    10c6:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <minute>
    10ca:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <stunde+0x1>
    10ce:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <stunde>
    10d2:	08 95       	ret

000010d4 <__vector_14>:
}
///////////////////////////////////////////////////////////////////////////////////////////////////
ISR(TIMER0_COMPA_vect) { //muss irgendwie definiert werden sonst klappt nicht
    10d4:	1f 92       	push	r1
    10d6:	0f 92       	push	r0
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	0f 92       	push	r0
    10dc:	11 24       	eor	r1, r1

}
    10de:	0f 90       	pop	r0
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	0f 90       	pop	r0
    10e4:	1f 90       	pop	r1
    10e6:	18 95       	reti

000010e8 <__vector_11>:

///////////////////////////////////////////////////////////////////////////////////////////////////
ISR(TIMER1_COMPA_vect) {
    10e8:	1f 92       	push	r1
    10ea:	0f 92       	push	r0
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	0f 92       	push	r0
    10f0:	11 24       	eor	r1, r1
    10f2:	2f 93       	push	r18
    10f4:	8f 93       	push	r24
    10f6:	9f 93       	push	r25
	cli();
    10f8:	f8 94       	cli
	
    milli++;
    10fa:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <milli>
    10fe:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <milli+0x1>
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <milli+0x1>
    1108:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <milli>
	millisekunden++;
    110c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <millisekunden>
    1110:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <millisekunden+0x1>
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <millisekunden+0x1>
    111a:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <millisekunden>
	if(millisekunden == 1000)
    111e:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <millisekunden>
    1122:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <millisekunden+0x1>
    1126:	88 3e       	cpi	r24, 0xE8	; 232
    1128:	93 40       	sbci	r25, 0x03	; 3
    112a:	e9 f5       	brne	.+122    	; 0x11a6 <__vector_11+0xbe>
	{
		
		
		sekunde++;
    112c:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <sekunde>
    1130:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <sekunde+0x1>
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <sekunde+0x1>
    113a:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <sekunde>
		millisekunden = 0;
    113e:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <millisekunden+0x1>
    1142:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <millisekunden>
		if(sekunde == 60)
    1146:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <sekunde>
    114a:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <sekunde+0x1>
    114e:	cc 97       	sbiw	r24, 0x3c	; 60
    1150:	69 f4       	brne	.+26     	; 0x116c <__vector_11+0x84>
		{
			minute++;
    1152:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <minute>
    1156:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <minute+0x1>
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <minute+0x1>
    1160:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <minute>
			sekunde = 0;
    1164:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <sekunde+0x1>
    1168:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <sekunde>
		}
		if(minute == 60)
    116c:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <minute>
    1170:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <minute+0x1>
    1174:	cc 97       	sbiw	r24, 0x3c	; 60
    1176:	69 f4       	brne	.+26     	; 0x1192 <__vector_11+0xaa>
		{
			stunde++;
    1178:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <stunde>
    117c:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <stunde+0x1>
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <stunde+0x1>
    1186:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <stunde>
			minute = 0;
    118a:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <minute+0x1>
    118e:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <minute>
		}
		if(stunde == 24)
    1192:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <stunde>
    1196:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <stunde+0x1>
    119a:	48 97       	sbiw	r24, 0x18	; 24
    119c:	21 f4       	brne	.+8      	; 0x11a6 <__vector_11+0xbe>
		{
			stunde = 0;
    119e:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <stunde+0x1>
    11a2:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <stunde>
		}
	}
	sei();
    11a6:	78 94       	sei
}
    11a8:	9f 91       	pop	r25
    11aa:	8f 91       	pop	r24
    11ac:	2f 91       	pop	r18
    11ae:	0f 90       	pop	r0
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	0f 90       	pop	r0
    11b4:	1f 90       	pop	r1
    11b6:	18 95       	reti

000011b8 <__subsf3>:
    11b8:	50 58       	subi	r21, 0x80	; 128

000011ba <__addsf3>:
    11ba:	bb 27       	eor	r27, r27
    11bc:	aa 27       	eor	r26, r26
    11be:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__addsf3x>
    11c2:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__fp_round>
    11c6:	0e 94 be 09 	call	0x137c	; 0x137c <__fp_pscA>
    11ca:	38 f0       	brcs	.+14     	; 0x11da <__addsf3+0x20>
    11cc:	0e 94 c5 09 	call	0x138a	; 0x138a <__fp_pscB>
    11d0:	20 f0       	brcs	.+8      	; 0x11da <__addsf3+0x20>
    11d2:	39 f4       	brne	.+14     	; 0x11e2 <__addsf3+0x28>
    11d4:	9f 3f       	cpi	r25, 0xFF	; 255
    11d6:	19 f4       	brne	.+6      	; 0x11de <__addsf3+0x24>
    11d8:	26 f4       	brtc	.+8      	; 0x11e2 <__addsf3+0x28>
    11da:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__fp_nan>
    11de:	0e f4       	brtc	.+2      	; 0x11e2 <__addsf3+0x28>
    11e0:	e0 95       	com	r30
    11e2:	e7 fb       	bst	r30, 7
    11e4:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__fp_inf>

000011e8 <__addsf3x>:
    11e8:	e9 2f       	mov	r30, r25
    11ea:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__fp_split3>
    11ee:	58 f3       	brcs	.-42     	; 0x11c6 <__addsf3+0xc>
    11f0:	ba 17       	cp	r27, r26
    11f2:	62 07       	cpc	r22, r18
    11f4:	73 07       	cpc	r23, r19
    11f6:	84 07       	cpc	r24, r20
    11f8:	95 07       	cpc	r25, r21
    11fa:	20 f0       	brcs	.+8      	; 0x1204 <__addsf3x+0x1c>
    11fc:	79 f4       	brne	.+30     	; 0x121c <__addsf3x+0x34>
    11fe:	a6 f5       	brtc	.+104    	; 0x1268 <__addsf3x+0x80>
    1200:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__fp_zero>
    1204:	0e f4       	brtc	.+2      	; 0x1208 <__addsf3x+0x20>
    1206:	e0 95       	com	r30
    1208:	0b 2e       	mov	r0, r27
    120a:	ba 2f       	mov	r27, r26
    120c:	a0 2d       	mov	r26, r0
    120e:	0b 01       	movw	r0, r22
    1210:	b9 01       	movw	r22, r18
    1212:	90 01       	movw	r18, r0
    1214:	0c 01       	movw	r0, r24
    1216:	ca 01       	movw	r24, r20
    1218:	a0 01       	movw	r20, r0
    121a:	11 24       	eor	r1, r1
    121c:	ff 27       	eor	r31, r31
    121e:	59 1b       	sub	r21, r25
    1220:	99 f0       	breq	.+38     	; 0x1248 <__addsf3x+0x60>
    1222:	59 3f       	cpi	r21, 0xF9	; 249
    1224:	50 f4       	brcc	.+20     	; 0x123a <__addsf3x+0x52>
    1226:	50 3e       	cpi	r21, 0xE0	; 224
    1228:	68 f1       	brcs	.+90     	; 0x1284 <__addsf3x+0x9c>
    122a:	1a 16       	cp	r1, r26
    122c:	f0 40       	sbci	r31, 0x00	; 0
    122e:	a2 2f       	mov	r26, r18
    1230:	23 2f       	mov	r18, r19
    1232:	34 2f       	mov	r19, r20
    1234:	44 27       	eor	r20, r20
    1236:	58 5f       	subi	r21, 0xF8	; 248
    1238:	f3 cf       	rjmp	.-26     	; 0x1220 <__addsf3x+0x38>
    123a:	46 95       	lsr	r20
    123c:	37 95       	ror	r19
    123e:	27 95       	ror	r18
    1240:	a7 95       	ror	r26
    1242:	f0 40       	sbci	r31, 0x00	; 0
    1244:	53 95       	inc	r21
    1246:	c9 f7       	brne	.-14     	; 0x123a <__addsf3x+0x52>
    1248:	7e f4       	brtc	.+30     	; 0x1268 <__addsf3x+0x80>
    124a:	1f 16       	cp	r1, r31
    124c:	ba 0b       	sbc	r27, r26
    124e:	62 0b       	sbc	r22, r18
    1250:	73 0b       	sbc	r23, r19
    1252:	84 0b       	sbc	r24, r20
    1254:	ba f0       	brmi	.+46     	; 0x1284 <__addsf3x+0x9c>
    1256:	91 50       	subi	r25, 0x01	; 1
    1258:	a1 f0       	breq	.+40     	; 0x1282 <__addsf3x+0x9a>
    125a:	ff 0f       	add	r31, r31
    125c:	bb 1f       	adc	r27, r27
    125e:	66 1f       	adc	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	c2 f7       	brpl	.-16     	; 0x1256 <__addsf3x+0x6e>
    1266:	0e c0       	rjmp	.+28     	; 0x1284 <__addsf3x+0x9c>
    1268:	ba 0f       	add	r27, r26
    126a:	62 1f       	adc	r22, r18
    126c:	73 1f       	adc	r23, r19
    126e:	84 1f       	adc	r24, r20
    1270:	48 f4       	brcc	.+18     	; 0x1284 <__addsf3x+0x9c>
    1272:	87 95       	ror	r24
    1274:	77 95       	ror	r23
    1276:	67 95       	ror	r22
    1278:	b7 95       	ror	r27
    127a:	f7 95       	ror	r31
    127c:	9e 3f       	cpi	r25, 0xFE	; 254
    127e:	08 f0       	brcs	.+2      	; 0x1282 <__addsf3x+0x9a>
    1280:	b0 cf       	rjmp	.-160    	; 0x11e2 <__addsf3+0x28>
    1282:	93 95       	inc	r25
    1284:	88 0f       	add	r24, r24
    1286:	08 f0       	brcs	.+2      	; 0x128a <__addsf3x+0xa2>
    1288:	99 27       	eor	r25, r25
    128a:	ee 0f       	add	r30, r30
    128c:	97 95       	ror	r25
    128e:	87 95       	ror	r24
    1290:	08 95       	ret

00001292 <__fixunssfsi>:
    1292:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__fp_splitA>
    1296:	88 f0       	brcs	.+34     	; 0x12ba <__fixunssfsi+0x28>
    1298:	9f 57       	subi	r25, 0x7F	; 127
    129a:	98 f0       	brcs	.+38     	; 0x12c2 <__fixunssfsi+0x30>
    129c:	b9 2f       	mov	r27, r25
    129e:	99 27       	eor	r25, r25
    12a0:	b7 51       	subi	r27, 0x17	; 23
    12a2:	b0 f0       	brcs	.+44     	; 0x12d0 <__fixunssfsi+0x3e>
    12a4:	e1 f0       	breq	.+56     	; 0x12de <__fixunssfsi+0x4c>
    12a6:	66 0f       	add	r22, r22
    12a8:	77 1f       	adc	r23, r23
    12aa:	88 1f       	adc	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	1a f0       	brmi	.+6      	; 0x12b6 <__fixunssfsi+0x24>
    12b0:	ba 95       	dec	r27
    12b2:	c9 f7       	brne	.-14     	; 0x12a6 <__fixunssfsi+0x14>
    12b4:	14 c0       	rjmp	.+40     	; 0x12de <__fixunssfsi+0x4c>
    12b6:	b1 30       	cpi	r27, 0x01	; 1
    12b8:	91 f0       	breq	.+36     	; 0x12de <__fixunssfsi+0x4c>
    12ba:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__fp_zero>
    12be:	b1 e0       	ldi	r27, 0x01	; 1
    12c0:	08 95       	ret
    12c2:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__fp_zero>
    12c6:	67 2f       	mov	r22, r23
    12c8:	78 2f       	mov	r23, r24
    12ca:	88 27       	eor	r24, r24
    12cc:	b8 5f       	subi	r27, 0xF8	; 248
    12ce:	39 f0       	breq	.+14     	; 0x12de <__fixunssfsi+0x4c>
    12d0:	b9 3f       	cpi	r27, 0xF9	; 249
    12d2:	cc f3       	brlt	.-14     	; 0x12c6 <__fixunssfsi+0x34>
    12d4:	86 95       	lsr	r24
    12d6:	77 95       	ror	r23
    12d8:	67 95       	ror	r22
    12da:	b3 95       	inc	r27
    12dc:	d9 f7       	brne	.-10     	; 0x12d4 <__fixunssfsi+0x42>
    12de:	3e f4       	brtc	.+14     	; 0x12ee <__fixunssfsi+0x5c>
    12e0:	90 95       	com	r25
    12e2:	80 95       	com	r24
    12e4:	70 95       	com	r23
    12e6:	61 95       	neg	r22
    12e8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ea:	8f 4f       	sbci	r24, 0xFF	; 255
    12ec:	9f 4f       	sbci	r25, 0xFF	; 255
    12ee:	08 95       	ret

000012f0 <__floatunsisf>:
    12f0:	e8 94       	clt
    12f2:	09 c0       	rjmp	.+18     	; 0x1306 <__floatsisf+0x12>

000012f4 <__floatsisf>:
    12f4:	97 fb       	bst	r25, 7
    12f6:	3e f4       	brtc	.+14     	; 0x1306 <__floatsisf+0x12>
    12f8:	90 95       	com	r25
    12fa:	80 95       	com	r24
    12fc:	70 95       	com	r23
    12fe:	61 95       	neg	r22
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	8f 4f       	sbci	r24, 0xFF	; 255
    1304:	9f 4f       	sbci	r25, 0xFF	; 255
    1306:	99 23       	and	r25, r25
    1308:	a9 f0       	breq	.+42     	; 0x1334 <__floatsisf+0x40>
    130a:	f9 2f       	mov	r31, r25
    130c:	96 e9       	ldi	r25, 0x96	; 150
    130e:	bb 27       	eor	r27, r27
    1310:	93 95       	inc	r25
    1312:	f6 95       	lsr	r31
    1314:	87 95       	ror	r24
    1316:	77 95       	ror	r23
    1318:	67 95       	ror	r22
    131a:	b7 95       	ror	r27
    131c:	f1 11       	cpse	r31, r1
    131e:	f8 cf       	rjmp	.-16     	; 0x1310 <__floatsisf+0x1c>
    1320:	fa f4       	brpl	.+62     	; 0x1360 <__floatsisf+0x6c>
    1322:	bb 0f       	add	r27, r27
    1324:	11 f4       	brne	.+4      	; 0x132a <__floatsisf+0x36>
    1326:	60 ff       	sbrs	r22, 0
    1328:	1b c0       	rjmp	.+54     	; 0x1360 <__floatsisf+0x6c>
    132a:	6f 5f       	subi	r22, 0xFF	; 255
    132c:	7f 4f       	sbci	r23, 0xFF	; 255
    132e:	8f 4f       	sbci	r24, 0xFF	; 255
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	16 c0       	rjmp	.+44     	; 0x1360 <__floatsisf+0x6c>
    1334:	88 23       	and	r24, r24
    1336:	11 f0       	breq	.+4      	; 0x133c <__floatsisf+0x48>
    1338:	96 e9       	ldi	r25, 0x96	; 150
    133a:	11 c0       	rjmp	.+34     	; 0x135e <__floatsisf+0x6a>
    133c:	77 23       	and	r23, r23
    133e:	21 f0       	breq	.+8      	; 0x1348 <__floatsisf+0x54>
    1340:	9e e8       	ldi	r25, 0x8E	; 142
    1342:	87 2f       	mov	r24, r23
    1344:	76 2f       	mov	r23, r22
    1346:	05 c0       	rjmp	.+10     	; 0x1352 <__floatsisf+0x5e>
    1348:	66 23       	and	r22, r22
    134a:	71 f0       	breq	.+28     	; 0x1368 <__floatsisf+0x74>
    134c:	96 e8       	ldi	r25, 0x86	; 134
    134e:	86 2f       	mov	r24, r22
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	2a f0       	brmi	.+10     	; 0x1360 <__floatsisf+0x6c>
    1356:	9a 95       	dec	r25
    1358:	66 0f       	add	r22, r22
    135a:	77 1f       	adc	r23, r23
    135c:	88 1f       	adc	r24, r24
    135e:	da f7       	brpl	.-10     	; 0x1356 <__floatsisf+0x62>
    1360:	88 0f       	add	r24, r24
    1362:	96 95       	lsr	r25
    1364:	87 95       	ror	r24
    1366:	97 f9       	bld	r25, 7
    1368:	08 95       	ret

0000136a <__fp_inf>:
    136a:	97 f9       	bld	r25, 7
    136c:	9f 67       	ori	r25, 0x7F	; 127
    136e:	80 e8       	ldi	r24, 0x80	; 128
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	08 95       	ret

00001376 <__fp_nan>:
    1376:	9f ef       	ldi	r25, 0xFF	; 255
    1378:	80 ec       	ldi	r24, 0xC0	; 192
    137a:	08 95       	ret

0000137c <__fp_pscA>:
    137c:	00 24       	eor	r0, r0
    137e:	0a 94       	dec	r0
    1380:	16 16       	cp	r1, r22
    1382:	17 06       	cpc	r1, r23
    1384:	18 06       	cpc	r1, r24
    1386:	09 06       	cpc	r0, r25
    1388:	08 95       	ret

0000138a <__fp_pscB>:
    138a:	00 24       	eor	r0, r0
    138c:	0a 94       	dec	r0
    138e:	12 16       	cp	r1, r18
    1390:	13 06       	cpc	r1, r19
    1392:	14 06       	cpc	r1, r20
    1394:	05 06       	cpc	r0, r21
    1396:	08 95       	ret

00001398 <__fp_round>:
    1398:	09 2e       	mov	r0, r25
    139a:	03 94       	inc	r0
    139c:	00 0c       	add	r0, r0
    139e:	11 f4       	brne	.+4      	; 0x13a4 <__fp_round+0xc>
    13a0:	88 23       	and	r24, r24
    13a2:	52 f0       	brmi	.+20     	; 0x13b8 <__fp_round+0x20>
    13a4:	bb 0f       	add	r27, r27
    13a6:	40 f4       	brcc	.+16     	; 0x13b8 <__fp_round+0x20>
    13a8:	bf 2b       	or	r27, r31
    13aa:	11 f4       	brne	.+4      	; 0x13b0 <__fp_round+0x18>
    13ac:	60 ff       	sbrs	r22, 0
    13ae:	04 c0       	rjmp	.+8      	; 0x13b8 <__fp_round+0x20>
    13b0:	6f 5f       	subi	r22, 0xFF	; 255
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255
    13b4:	8f 4f       	sbci	r24, 0xFF	; 255
    13b6:	9f 4f       	sbci	r25, 0xFF	; 255
    13b8:	08 95       	ret

000013ba <__fp_split3>:
    13ba:	57 fd       	sbrc	r21, 7
    13bc:	90 58       	subi	r25, 0x80	; 128
    13be:	44 0f       	add	r20, r20
    13c0:	55 1f       	adc	r21, r21
    13c2:	59 f0       	breq	.+22     	; 0x13da <__fp_splitA+0x10>
    13c4:	5f 3f       	cpi	r21, 0xFF	; 255
    13c6:	71 f0       	breq	.+28     	; 0x13e4 <__fp_splitA+0x1a>
    13c8:	47 95       	ror	r20

000013ca <__fp_splitA>:
    13ca:	88 0f       	add	r24, r24
    13cc:	97 fb       	bst	r25, 7
    13ce:	99 1f       	adc	r25, r25
    13d0:	61 f0       	breq	.+24     	; 0x13ea <__fp_splitA+0x20>
    13d2:	9f 3f       	cpi	r25, 0xFF	; 255
    13d4:	79 f0       	breq	.+30     	; 0x13f4 <__fp_splitA+0x2a>
    13d6:	87 95       	ror	r24
    13d8:	08 95       	ret
    13da:	12 16       	cp	r1, r18
    13dc:	13 06       	cpc	r1, r19
    13de:	14 06       	cpc	r1, r20
    13e0:	55 1f       	adc	r21, r21
    13e2:	f2 cf       	rjmp	.-28     	; 0x13c8 <__fp_split3+0xe>
    13e4:	46 95       	lsr	r20
    13e6:	f1 df       	rcall	.-30     	; 0x13ca <__fp_splitA>
    13e8:	08 c0       	rjmp	.+16     	; 0x13fa <__fp_splitA+0x30>
    13ea:	16 16       	cp	r1, r22
    13ec:	17 06       	cpc	r1, r23
    13ee:	18 06       	cpc	r1, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	f1 cf       	rjmp	.-30     	; 0x13d6 <__fp_splitA+0xc>
    13f4:	86 95       	lsr	r24
    13f6:	71 05       	cpc	r23, r1
    13f8:	61 05       	cpc	r22, r1
    13fa:	08 94       	sec
    13fc:	08 95       	ret

000013fe <__fp_zero>:
    13fe:	e8 94       	clt

00001400 <__fp_szero>:
    1400:	bb 27       	eor	r27, r27
    1402:	66 27       	eor	r22, r22
    1404:	77 27       	eor	r23, r23
    1406:	cb 01       	movw	r24, r22
    1408:	97 f9       	bld	r25, 7
    140a:	08 95       	ret

0000140c <__mulsf3>:
    140c:	0e 94 19 0a 	call	0x1432	; 0x1432 <__mulsf3x>
    1410:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__fp_round>
    1414:	0e 94 be 09 	call	0x137c	; 0x137c <__fp_pscA>
    1418:	38 f0       	brcs	.+14     	; 0x1428 <__mulsf3+0x1c>
    141a:	0e 94 c5 09 	call	0x138a	; 0x138a <__fp_pscB>
    141e:	20 f0       	brcs	.+8      	; 0x1428 <__mulsf3+0x1c>
    1420:	95 23       	and	r25, r21
    1422:	11 f0       	breq	.+4      	; 0x1428 <__mulsf3+0x1c>
    1424:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__fp_inf>
    1428:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__fp_nan>
    142c:	11 24       	eor	r1, r1
    142e:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__fp_szero>

00001432 <__mulsf3x>:
    1432:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__fp_split3>
    1436:	70 f3       	brcs	.-36     	; 0x1414 <__mulsf3+0x8>

00001438 <__mulsf3_pse>:
    1438:	95 9f       	mul	r25, r21
    143a:	c1 f3       	breq	.-16     	; 0x142c <__mulsf3+0x20>
    143c:	95 0f       	add	r25, r21
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	55 1f       	adc	r21, r21
    1442:	62 9f       	mul	r22, r18
    1444:	f0 01       	movw	r30, r0
    1446:	72 9f       	mul	r23, r18
    1448:	bb 27       	eor	r27, r27
    144a:	f0 0d       	add	r31, r0
    144c:	b1 1d       	adc	r27, r1
    144e:	63 9f       	mul	r22, r19
    1450:	aa 27       	eor	r26, r26
    1452:	f0 0d       	add	r31, r0
    1454:	b1 1d       	adc	r27, r1
    1456:	aa 1f       	adc	r26, r26
    1458:	64 9f       	mul	r22, r20
    145a:	66 27       	eor	r22, r22
    145c:	b0 0d       	add	r27, r0
    145e:	a1 1d       	adc	r26, r1
    1460:	66 1f       	adc	r22, r22
    1462:	82 9f       	mul	r24, r18
    1464:	22 27       	eor	r18, r18
    1466:	b0 0d       	add	r27, r0
    1468:	a1 1d       	adc	r26, r1
    146a:	62 1f       	adc	r22, r18
    146c:	73 9f       	mul	r23, r19
    146e:	b0 0d       	add	r27, r0
    1470:	a1 1d       	adc	r26, r1
    1472:	62 1f       	adc	r22, r18
    1474:	83 9f       	mul	r24, r19
    1476:	a0 0d       	add	r26, r0
    1478:	61 1d       	adc	r22, r1
    147a:	22 1f       	adc	r18, r18
    147c:	74 9f       	mul	r23, r20
    147e:	33 27       	eor	r19, r19
    1480:	a0 0d       	add	r26, r0
    1482:	61 1d       	adc	r22, r1
    1484:	23 1f       	adc	r18, r19
    1486:	84 9f       	mul	r24, r20
    1488:	60 0d       	add	r22, r0
    148a:	21 1d       	adc	r18, r1
    148c:	82 2f       	mov	r24, r18
    148e:	76 2f       	mov	r23, r22
    1490:	6a 2f       	mov	r22, r26
    1492:	11 24       	eor	r1, r1
    1494:	9f 57       	subi	r25, 0x7F	; 127
    1496:	50 40       	sbci	r21, 0x00	; 0
    1498:	9a f0       	brmi	.+38     	; 0x14c0 <__mulsf3_pse+0x88>
    149a:	f1 f0       	breq	.+60     	; 0x14d8 <__mulsf3_pse+0xa0>
    149c:	88 23       	and	r24, r24
    149e:	4a f0       	brmi	.+18     	; 0x14b2 <__mulsf3_pse+0x7a>
    14a0:	ee 0f       	add	r30, r30
    14a2:	ff 1f       	adc	r31, r31
    14a4:	bb 1f       	adc	r27, r27
    14a6:	66 1f       	adc	r22, r22
    14a8:	77 1f       	adc	r23, r23
    14aa:	88 1f       	adc	r24, r24
    14ac:	91 50       	subi	r25, 0x01	; 1
    14ae:	50 40       	sbci	r21, 0x00	; 0
    14b0:	a9 f7       	brne	.-22     	; 0x149c <__mulsf3_pse+0x64>
    14b2:	9e 3f       	cpi	r25, 0xFE	; 254
    14b4:	51 05       	cpc	r21, r1
    14b6:	80 f0       	brcs	.+32     	; 0x14d8 <__mulsf3_pse+0xa0>
    14b8:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__fp_inf>
    14bc:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__fp_szero>
    14c0:	5f 3f       	cpi	r21, 0xFF	; 255
    14c2:	e4 f3       	brlt	.-8      	; 0x14bc <__mulsf3_pse+0x84>
    14c4:	98 3e       	cpi	r25, 0xE8	; 232
    14c6:	d4 f3       	brlt	.-12     	; 0x14bc <__mulsf3_pse+0x84>
    14c8:	86 95       	lsr	r24
    14ca:	77 95       	ror	r23
    14cc:	67 95       	ror	r22
    14ce:	b7 95       	ror	r27
    14d0:	f7 95       	ror	r31
    14d2:	e7 95       	ror	r30
    14d4:	9f 5f       	subi	r25, 0xFF	; 255
    14d6:	c1 f7       	brne	.-16     	; 0x14c8 <__mulsf3_pse+0x90>
    14d8:	fe 2b       	or	r31, r30
    14da:	88 0f       	add	r24, r24
    14dc:	91 1d       	adc	r25, r1
    14de:	96 95       	lsr	r25
    14e0:	87 95       	ror	r24
    14e2:	97 f9       	bld	r25, 7
    14e4:	08 95       	ret

000014e6 <__divmodhi4>:
    14e6:	97 fb       	bst	r25, 7
    14e8:	07 2e       	mov	r0, r23
    14ea:	16 f4       	brtc	.+4      	; 0x14f0 <__divmodhi4+0xa>
    14ec:	00 94       	com	r0
    14ee:	07 d0       	rcall	.+14     	; 0x14fe <__divmodhi4_neg1>
    14f0:	77 fd       	sbrc	r23, 7
    14f2:	09 d0       	rcall	.+18     	; 0x1506 <__divmodhi4_neg2>
    14f4:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__udivmodhi4>
    14f8:	07 fc       	sbrc	r0, 7
    14fa:	05 d0       	rcall	.+10     	; 0x1506 <__divmodhi4_neg2>
    14fc:	3e f4       	brtc	.+14     	; 0x150c <__divmodhi4_exit>

000014fe <__divmodhi4_neg1>:
    14fe:	90 95       	com	r25
    1500:	81 95       	neg	r24
    1502:	9f 4f       	sbci	r25, 0xFF	; 255
    1504:	08 95       	ret

00001506 <__divmodhi4_neg2>:
    1506:	70 95       	com	r23
    1508:	61 95       	neg	r22
    150a:	7f 4f       	sbci	r23, 0xFF	; 255

0000150c <__divmodhi4_exit>:
    150c:	08 95       	ret

0000150e <__divmodsi4>:
    150e:	05 2e       	mov	r0, r21
    1510:	97 fb       	bst	r25, 7
    1512:	1e f4       	brtc	.+6      	; 0x151a <__divmodsi4+0xc>
    1514:	00 94       	com	r0
    1516:	0e 94 9e 0a 	call	0x153c	; 0x153c <__negsi2>
    151a:	57 fd       	sbrc	r21, 7
    151c:	07 d0       	rcall	.+14     	; 0x152c <__divmodsi4_neg2>
    151e:	0e 94 2e 0b 	call	0x165c	; 0x165c <__udivmodsi4>
    1522:	07 fc       	sbrc	r0, 7
    1524:	03 d0       	rcall	.+6      	; 0x152c <__divmodsi4_neg2>
    1526:	4e f4       	brtc	.+18     	; 0x153a <__divmodsi4_exit>
    1528:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__negsi2>

0000152c <__divmodsi4_neg2>:
    152c:	50 95       	com	r21
    152e:	40 95       	com	r20
    1530:	30 95       	com	r19
    1532:	21 95       	neg	r18
    1534:	3f 4f       	sbci	r19, 0xFF	; 255
    1536:	4f 4f       	sbci	r20, 0xFF	; 255
    1538:	5f 4f       	sbci	r21, 0xFF	; 255

0000153a <__divmodsi4_exit>:
    153a:	08 95       	ret

0000153c <__negsi2>:
    153c:	90 95       	com	r25
    153e:	80 95       	com	r24
    1540:	70 95       	com	r23
    1542:	61 95       	neg	r22
    1544:	7f 4f       	sbci	r23, 0xFF	; 255
    1546:	8f 4f       	sbci	r24, 0xFF	; 255
    1548:	9f 4f       	sbci	r25, 0xFF	; 255
    154a:	08 95       	ret

0000154c <__umoddi3>:
    154c:	68 94       	set
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <__udivdi3_umoddi3>

00001550 <__udivdi3>:
    1550:	e8 94       	clt

00001552 <__udivdi3_umoddi3>:
    1552:	8f 92       	push	r8
    1554:	9f 92       	push	r9
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__udivmod64>
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	9f 90       	pop	r9
    1564:	8f 90       	pop	r8
    1566:	08 95       	ret

00001568 <__udivmod64>:
    1568:	88 24       	eor	r8, r8
    156a:	99 24       	eor	r9, r9
    156c:	f4 01       	movw	r30, r8
    156e:	e4 01       	movw	r28, r8
    1570:	b0 e4       	ldi	r27, 0x40	; 64
    1572:	9f 93       	push	r25
    1574:	aa 27       	eor	r26, r26
    1576:	9a 15       	cp	r25, r10
    1578:	8b 04       	cpc	r8, r11
    157a:	9c 04       	cpc	r9, r12
    157c:	ed 05       	cpc	r30, r13
    157e:	fe 05       	cpc	r31, r14
    1580:	cf 05       	cpc	r28, r15
    1582:	d0 07       	cpc	r29, r16
    1584:	a1 07       	cpc	r26, r17
    1586:	98 f4       	brcc	.+38     	; 0x15ae <__udivmod64+0x46>
    1588:	ad 2f       	mov	r26, r29
    158a:	dc 2f       	mov	r29, r28
    158c:	cf 2f       	mov	r28, r31
    158e:	fe 2f       	mov	r31, r30
    1590:	e9 2d       	mov	r30, r9
    1592:	98 2c       	mov	r9, r8
    1594:	89 2e       	mov	r8, r25
    1596:	98 2f       	mov	r25, r24
    1598:	87 2f       	mov	r24, r23
    159a:	76 2f       	mov	r23, r22
    159c:	65 2f       	mov	r22, r21
    159e:	54 2f       	mov	r21, r20
    15a0:	43 2f       	mov	r20, r19
    15a2:	32 2f       	mov	r19, r18
    15a4:	22 27       	eor	r18, r18
    15a6:	b8 50       	subi	r27, 0x08	; 8
    15a8:	31 f7       	brne	.-52     	; 0x1576 <__udivmod64+0xe>
    15aa:	bf 91       	pop	r27
    15ac:	27 c0       	rjmp	.+78     	; 0x15fc <__udivmod64+0x94>
    15ae:	1b 2e       	mov	r1, r27
    15b0:	bf 91       	pop	r27
    15b2:	bb 27       	eor	r27, r27
    15b4:	22 0f       	add	r18, r18
    15b6:	33 1f       	adc	r19, r19
    15b8:	44 1f       	adc	r20, r20
    15ba:	55 1f       	adc	r21, r21
    15bc:	66 1f       	adc	r22, r22
    15be:	77 1f       	adc	r23, r23
    15c0:	88 1f       	adc	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	88 1c       	adc	r8, r8
    15c6:	99 1c       	adc	r9, r9
    15c8:	ee 1f       	adc	r30, r30
    15ca:	ff 1f       	adc	r31, r31
    15cc:	cc 1f       	adc	r28, r28
    15ce:	dd 1f       	adc	r29, r29
    15d0:	aa 1f       	adc	r26, r26
    15d2:	bb 1f       	adc	r27, r27
    15d4:	8a 14       	cp	r8, r10
    15d6:	9b 04       	cpc	r9, r11
    15d8:	ec 05       	cpc	r30, r12
    15da:	fd 05       	cpc	r31, r13
    15dc:	ce 05       	cpc	r28, r14
    15de:	df 05       	cpc	r29, r15
    15e0:	a0 07       	cpc	r26, r16
    15e2:	b1 07       	cpc	r27, r17
    15e4:	48 f0       	brcs	.+18     	; 0x15f8 <__udivmod64+0x90>
    15e6:	8a 18       	sub	r8, r10
    15e8:	9b 08       	sbc	r9, r11
    15ea:	ec 09       	sbc	r30, r12
    15ec:	fd 09       	sbc	r31, r13
    15ee:	ce 09       	sbc	r28, r14
    15f0:	df 09       	sbc	r29, r15
    15f2:	a0 0b       	sbc	r26, r16
    15f4:	b1 0b       	sbc	r27, r17
    15f6:	21 60       	ori	r18, 0x01	; 1
    15f8:	1a 94       	dec	r1
    15fa:	e1 f6       	brne	.-72     	; 0x15b4 <__udivmod64+0x4c>
    15fc:	2e f4       	brtc	.+10     	; 0x1608 <__udivmod64+0xa0>
    15fe:	94 01       	movw	r18, r8
    1600:	af 01       	movw	r20, r30
    1602:	be 01       	movw	r22, r28
    1604:	cd 01       	movw	r24, r26
    1606:	00 0c       	add	r0, r0
    1608:	08 95       	ret

0000160a <__subdi3>:
    160a:	2a 19       	sub	r18, r10
    160c:	3b 09       	sbc	r19, r11
    160e:	4c 09       	sbc	r20, r12
    1610:	5d 09       	sbc	r21, r13
    1612:	6e 09       	sbc	r22, r14
    1614:	7f 09       	sbc	r23, r15
    1616:	80 0b       	sbc	r24, r16
    1618:	91 0b       	sbc	r25, r17
    161a:	08 95       	ret

0000161c <__cmpdi2_s8>:
    161c:	00 24       	eor	r0, r0
    161e:	a7 fd       	sbrc	r26, 7
    1620:	00 94       	com	r0
    1622:	2a 17       	cp	r18, r26
    1624:	30 05       	cpc	r19, r0
    1626:	40 05       	cpc	r20, r0
    1628:	50 05       	cpc	r21, r0
    162a:	60 05       	cpc	r22, r0
    162c:	70 05       	cpc	r23, r0
    162e:	80 05       	cpc	r24, r0
    1630:	90 05       	cpc	r25, r0
    1632:	08 95       	ret

00001634 <__udivmodhi4>:
    1634:	aa 1b       	sub	r26, r26
    1636:	bb 1b       	sub	r27, r27
    1638:	51 e1       	ldi	r21, 0x11	; 17
    163a:	07 c0       	rjmp	.+14     	; 0x164a <__udivmodhi4_ep>

0000163c <__udivmodhi4_loop>:
    163c:	aa 1f       	adc	r26, r26
    163e:	bb 1f       	adc	r27, r27
    1640:	a6 17       	cp	r26, r22
    1642:	b7 07       	cpc	r27, r23
    1644:	10 f0       	brcs	.+4      	; 0x164a <__udivmodhi4_ep>
    1646:	a6 1b       	sub	r26, r22
    1648:	b7 0b       	sbc	r27, r23

0000164a <__udivmodhi4_ep>:
    164a:	88 1f       	adc	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	5a 95       	dec	r21
    1650:	a9 f7       	brne	.-22     	; 0x163c <__udivmodhi4_loop>
    1652:	80 95       	com	r24
    1654:	90 95       	com	r25
    1656:	bc 01       	movw	r22, r24
    1658:	cd 01       	movw	r24, r26
    165a:	08 95       	ret

0000165c <__udivmodsi4>:
    165c:	a1 e2       	ldi	r26, 0x21	; 33
    165e:	1a 2e       	mov	r1, r26
    1660:	aa 1b       	sub	r26, r26
    1662:	bb 1b       	sub	r27, r27
    1664:	fd 01       	movw	r30, r26
    1666:	0d c0       	rjmp	.+26     	; 0x1682 <__udivmodsi4_ep>

00001668 <__udivmodsi4_loop>:
    1668:	aa 1f       	adc	r26, r26
    166a:	bb 1f       	adc	r27, r27
    166c:	ee 1f       	adc	r30, r30
    166e:	ff 1f       	adc	r31, r31
    1670:	a2 17       	cp	r26, r18
    1672:	b3 07       	cpc	r27, r19
    1674:	e4 07       	cpc	r30, r20
    1676:	f5 07       	cpc	r31, r21
    1678:	20 f0       	brcs	.+8      	; 0x1682 <__udivmodsi4_ep>
    167a:	a2 1b       	sub	r26, r18
    167c:	b3 0b       	sbc	r27, r19
    167e:	e4 0b       	sbc	r30, r20
    1680:	f5 0b       	sbc	r31, r21

00001682 <__udivmodsi4_ep>:
    1682:	66 1f       	adc	r22, r22
    1684:	77 1f       	adc	r23, r23
    1686:	88 1f       	adc	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	1a 94       	dec	r1
    168c:	69 f7       	brne	.-38     	; 0x1668 <__udivmodsi4_loop>
    168e:	60 95       	com	r22
    1690:	70 95       	com	r23
    1692:	80 95       	com	r24
    1694:	90 95       	com	r25
    1696:	9b 01       	movw	r18, r22
    1698:	ac 01       	movw	r20, r24
    169a:	bd 01       	movw	r22, r26
    169c:	cf 01       	movw	r24, r30
    169e:	08 95       	ret

000016a0 <_exit>:
    16a0:	f8 94       	cli

000016a2 <__stop_program>:
    16a2:	ff cf       	rjmp	.-2      	; 0x16a2 <__stop_program>

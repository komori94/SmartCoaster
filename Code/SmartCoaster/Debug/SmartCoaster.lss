
SmartCoaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000014f4  00001588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  00800150  00800150  000015d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001608  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e47  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c97  00000000  00000000  000035ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000134b  00000000  00000000  00004286  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000450  00000000  00000000  000055d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000074b  00000000  00000000  00005a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000176b  00000000  00000000  0000616f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  000078da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 a0 01 	jmp	0x340	; 0x340 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 29 09 	jmp	0x1252	; 0x1252 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ef       	ldi	r30, 0xF4	; 244
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 35       	cpi	r26, 0x50	; 80
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a0 e5       	ldi	r26, 0x50	; 80
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 3a       	cpi	r26, 0xA2	; 162
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 f9 07 	call	0xff2	; 0xff2 <main>
      9e:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:

uint8_t akkuoffset=0;
uint64_t vcc = 0;

void initADC()
{
      a6:	7f 92       	push	r7
      a8:	8f 92       	push	r8
      aa:	9f 92       	push	r9
      ac:	af 92       	push	r10
      ae:	bf 92       	push	r11
      b0:	cf 92       	push	r12
      b2:	df 92       	push	r13
      b4:	ef 92       	push	r14
      b6:	ff 92       	push	r15
      b8:	0f 93       	push	r16
      ba:	1f 93       	push	r17
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
	ADMUX = 0b01100100; //PC4
      c0:	84 e6       	ldi	r24, 0x64	; 100
      c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b10100011;
      c6:	ea e7       	ldi	r30, 0x7A	; 122
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	83 ea       	ldi	r24, 0xA3	; 163
      cc:	80 83       	st	Z, r24
	ADCSRB = 0b00000000;
      ce:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	PCICR = 0b00000100;
      d2:	84 e0       	ldi	r24, 0x04	; 4
      d4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK2 = 0b00000100;
      d8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	sei();
      dc:	78 94       	sei
	ADCSRA |= (1 << ADSC);		// start ADC
      de:	80 81       	ld	r24, Z
      e0:	80 64       	ori	r24, 0x40	; 64
      e2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e4:	2f ef       	ldi	r18, 0xFF	; 255
      e6:	84 e3       	ldi	r24, 0x34	; 52
      e8:	9c e0       	ldi	r25, 0x0C	; 12
      ea:	21 50       	subi	r18, 0x01	; 1
      ec:	80 40       	sbci	r24, 0x00	; 0
      ee:	90 40       	sbci	r25, 0x00	; 0
      f0:	e1 f7       	brne	.-8      	; 0xea <initADC+0x44>
      f2:	00 c0       	rjmp	.+0      	; 0xf4 <initADC+0x4e>
      f4:	00 00       	nop
	
	
	_delay_ms(500);
	uint8_t temp=ADCH;
      f6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
	if (temp>0)
      fa:	22 23       	and	r18, r18
      fc:	d9 f1       	breq	.+118    	; 0x174 <initADC+0xce>
	{
		vcc= 192000/temp;  //885mv ref mal 255 = 218025 max, aber selbst ausgerechnet mit 4,2V ist 190000 = 255 * 752mV
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	40 e0       	ldi	r20, 0x00	; 0
     102:	50 e0       	ldi	r21, 0x00	; 0
     104:	60 e0       	ldi	r22, 0x00	; 0
     106:	7e ee       	ldi	r23, 0xEE	; 238
     108:	82 e0       	ldi	r24, 0x02	; 2
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 af 09 	call	0x135e	; 0x135e <__divmodsi4>
     110:	69 01       	movw	r12, r18
     112:	7a 01       	movw	r14, r20
     114:	02 2f       	mov	r16, r18
     116:	1d 2d       	mov	r17, r13
     118:	de 2d       	mov	r29, r14
     11a:	cf 2d       	mov	r28, r15
     11c:	49 01       	movw	r8, r18
     11e:	5a 01       	movw	r10, r20
     120:	bb 0c       	add	r11, r11
     122:	88 08       	sbc	r8, r8
     124:	98 2c       	mov	r9, r8
     126:	54 01       	movw	r10, r8
     128:	b8 2d       	mov	r27, r8
     12a:	a8 2d       	mov	r26, r8
     12c:	f8 2d       	mov	r31, r8
     12e:	78 2c       	mov	r7, r8
     130:	20 93 50 01 	sts	0x0150, r18	; 0x800150 <__data_end>
     134:	d0 92 51 01 	sts	0x0151, r13	; 0x800151 <__data_end+0x1>
     138:	e0 92 52 01 	sts	0x0152, r14	; 0x800152 <__data_end+0x2>
     13c:	f0 92 53 01 	sts	0x0153, r15	; 0x800153 <__data_end+0x3>
     140:	80 92 54 01 	sts	0x0154, r8	; 0x800154 <__data_end+0x4>
     144:	80 92 55 01 	sts	0x0155, r8	; 0x800155 <__data_end+0x5>
     148:	80 92 56 01 	sts	0x0156, r8	; 0x800156 <__data_end+0x6>
     14c:	80 92 57 01 	sts	0x0157, r8	; 0x800157 <__data_end+0x7>
	else 
	{
		vcc=4000;
	}
	
	if (vcc>UMAX)
     150:	3d 2d       	mov	r19, r13
     152:	4e 2d       	mov	r20, r14
     154:	5f 2d       	mov	r21, r15
     156:	68 2d       	mov	r22, r8
     158:	78 2d       	mov	r23, r8
     15a:	88 2d       	mov	r24, r8
     15c:	98 2d       	mov	r25, r8
     15e:	28 36       	cpi	r18, 0x68	; 104
     160:	30 41       	sbci	r19, 0x10	; 16
     162:	41 05       	cpc	r20, r1
     164:	51 05       	cpc	r21, r1
     166:	61 05       	cpc	r22, r1
     168:	71 05       	cpc	r23, r1
     16a:	81 05       	cpc	r24, r1
     16c:	91 05       	cpc	r25, r1
     16e:	09 f0       	breq	.+2      	; 0x172 <initADC+0xcc>
     170:	e0 f4       	brcc	.+56     	; 0x1aa <initADC+0x104>
     172:	1f c0       	rjmp	.+62     	; 0x1b2 <initADC+0x10c>
	{
		vcc= 192000/temp;  //885mv ref mal 255 = 218025 max, aber selbst ausgerechnet mit 4,2V ist 190000 = 255 * 752mV
	}
	else 
	{
		vcc=4000;
     174:	80 ea       	ldi	r24, 0xA0	; 160
     176:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
     17a:	8f e0       	ldi	r24, 0x0F	; 15
     17c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <__data_end+0x1>
     180:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end+0x2>
     184:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <__data_end+0x3>
     188:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__data_end+0x4>
     18c:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <__data_end+0x5>
     190:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end+0x6>
     194:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <__data_end+0x7>
	}
	
	if (vcc>UMAX)
     198:	00 ea       	ldi	r16, 0xA0	; 160
     19a:	1f e0       	ldi	r17, 0x0F	; 15
     19c:	d0 e0       	ldi	r29, 0x00	; 0
     19e:	c0 e0       	ldi	r28, 0x00	; 0
     1a0:	b0 e0       	ldi	r27, 0x00	; 0
     1a2:	a0 e0       	ldi	r26, 0x00	; 0
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	71 2c       	mov	r7, r1
     1a8:	19 c0       	rjmp	.+50     	; 0x1dc <initADC+0x136>
	{
		akkuoffset = 22;
     1aa:	86 e1       	ldi	r24, 0x16	; 22
     1ac:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <akkuoffset>
     1b0:	34 c0       	rjmp	.+104    	; 0x21a <initADC+0x174>
	}
	else if (vcc<UMIN)
     1b2:	2c 2d       	mov	r18, r12
     1b4:	3d 2d       	mov	r19, r13
     1b6:	4e 2d       	mov	r20, r14
     1b8:	5f 2d       	mov	r21, r15
     1ba:	68 2d       	mov	r22, r8
     1bc:	78 2d       	mov	r23, r8
     1be:	88 2d       	mov	r24, r8
     1c0:	98 2d       	mov	r25, r8
     1c2:	23 37       	cpi	r18, 0x73	; 115
     1c4:	3e 40       	sbci	r19, 0x0E	; 14
     1c6:	41 05       	cpc	r20, r1
     1c8:	51 05       	cpc	r21, r1
     1ca:	61 05       	cpc	r22, r1
     1cc:	71 05       	cpc	r23, r1
     1ce:	81 05       	cpc	r24, r1
     1d0:	91 05       	cpc	r25, r1
     1d2:	09 f0       	breq	.+2      	; 0x1d6 <initADC+0x130>
     1d4:	18 f4       	brcc	.+6      	; 0x1dc <initADC+0x136>
	{
		akkuoffset=0;
     1d6:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <akkuoffset>
     1da:	1f c0       	rjmp	.+62     	; 0x21a <initADC+0x174>
	}
	else
	{
	 akkuoffset = (vcc-UMIN)/((UMAX-UMIN)/22);
     1dc:	20 2f       	mov	r18, r16
     1de:	31 2f       	mov	r19, r17
     1e0:	4d 2f       	mov	r20, r29
     1e2:	5c 2f       	mov	r21, r28
     1e4:	6b 2f       	mov	r22, r27
     1e6:	7a 2f       	mov	r23, r26
     1e8:	8f 2f       	mov	r24, r31
     1ea:	97 2d       	mov	r25, r7
     1ec:	24 57       	subi	r18, 0x74	; 116
     1ee:	3e 40       	sbci	r19, 0x0E	; 14
     1f0:	41 09       	sbc	r20, r1
     1f2:	51 09       	sbc	r21, r1
     1f4:	61 09       	sbc	r22, r1
     1f6:	71 09       	sbc	r23, r1
     1f8:	81 09       	sbc	r24, r1
     1fa:	91 09       	sbc	r25, r1
     1fc:	0f 2e       	mov	r0, r31
     1fe:	f6 e1       	ldi	r31, 0x16	; 22
     200:	af 2e       	mov	r10, r31
     202:	f0 2d       	mov	r31, r0
     204:	b1 2c       	mov	r11, r1
     206:	c1 2c       	mov	r12, r1
     208:	d1 2c       	mov	r13, r1
     20a:	e1 2c       	mov	r14, r1
     20c:	f1 2c       	mov	r15, r1
     20e:	00 e0       	ldi	r16, 0x00	; 0
     210:	10 e0       	ldi	r17, 0x00	; 0
     212:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivdi3>
     216:	20 93 58 01 	sts	0x0158, r18	; 0x800158 <akkuoffset>
	}
	
	
	ADCSRA = 0b00000000;
     21a:	ea e7       	ldi	r30, 0x7A	; 122
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	10 82       	st	Z, r1
	ADMUX = 0b01100101;   //PC5
     220:	85 e6       	ldi	r24, 0x65	; 101
     222:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b10100011;
     226:	83 ea       	ldi	r24, 0xA3	; 163
     228:	80 83       	st	Z, r24
	ADCSRB = 0b00000000;
     22a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	PCICR = 0b00000100;
     22e:	84 e0       	ldi	r24, 0x04	; 4
     230:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK2 = 0b00000100;
     234:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	sei();
     238:	78 94       	sei
	ADCSRA |= (1 << ADSC);		// start ADC
     23a:	80 81       	ld	r24, Z
     23c:	80 64       	ori	r24, 0x40	; 64
     23e:	80 83       	st	Z, r24
	
	
}
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	1f 91       	pop	r17
     246:	0f 91       	pop	r16
     248:	ff 90       	pop	r15
     24a:	ef 90       	pop	r14
     24c:	df 90       	pop	r13
     24e:	cf 90       	pop	r12
     250:	bf 90       	pop	r11
     252:	af 90       	pop	r10
     254:	9f 90       	pop	r9
     256:	8f 90       	pop	r8
     258:	7f 90       	pop	r7
     25a:	08 95       	ret

0000025c <initIR>:


//will setup counter, and pin interrupt
void initIR()
{
	dataBuffer = 0;
     25c:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <dataBuffer>
     260:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <dataBuffer+0x1>
     264:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <dataBuffer+0x2>
     268:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <dataBuffer+0x3>
     26c:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <dataBuffer+0x4>
     270:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <dataBuffer+0x5>
     274:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <dataBuffer+0x6>
     278:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <dataBuffer+0x7>
	timePassed = 0;
     27c:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <timePassed>
     280:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <timePassed+0x1>
     284:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <timePassed+0x2>
     288:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <timePassed+0x3>
     28c:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <timePassed+0x4>
     290:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <timePassed+0x5>
     294:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <timePassed+0x6>
     298:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <timePassed+0x7>
    lastSignal=0;
     29c:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <lastSignal>
     2a0:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <lastSignal+0x1>
     2a4:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <lastSignal+0x2>
     2a8:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <lastSignal+0x3>
     2ac:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <lastSignal+0x4>
     2b0:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <lastSignal+0x5>
     2b4:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <lastSignal+0x6>
     2b8:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <lastSignal+0x7>
	
	PCICR |= (1 << PCIE1);
     2bc:	e8 e6       	ldi	r30, 0x68	; 104
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	82 60       	ori	r24, 0x02	; 2
     2c4:	80 83       	st	Z, r24
	PCMSK1 |= (1 << 1);
     2c6:	ec e6       	ldi	r30, 0x6C	; 108
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 81       	ld	r24, Z
     2cc:	82 60       	ori	r24, 0x02	; 2
     2ce:	80 83       	st	Z, r24

	sei();
     2d0:	78 94       	sei
     2d2:	08 95       	ret

000002d4 <getIRCommandRec>:
}

uint32_t getIRCommandRec()  
{
	if (signalready)
     2d4:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <signalready>
     2d8:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <signalready+0x1>
     2dc:	40 91 5c 01 	lds	r20, 0x015C	; 0x80015c <signalready+0x2>
     2e0:	50 91 5d 01 	lds	r21, 0x015D	; 0x80015d <signalready+0x3>
     2e4:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <signalready+0x4>
     2e8:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <signalready+0x5>
     2ec:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <signalready+0x6>
     2f0:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <signalready+0x7>
     2f4:	a0 e0       	ldi	r26, 0x00	; 0
     2f6:	0e 94 36 0a 	call	0x146c	; 0x146c <__cmpdi2_s8>
     2fa:	e9 f0       	breq	.+58     	; 0x336 <getIRCommandRec+0x62>
	{
		uint64_t temp = dataBuffer;
     2fc:	50 91 7c 01 	lds	r21, 0x017C	; 0x80017c <dataBuffer>
     300:	40 91 7d 01 	lds	r20, 0x017D	; 0x80017d <dataBuffer+0x1>
     304:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <dataBuffer+0x2>
     308:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <dataBuffer+0x3>
		dataBuffer=0;
     30c:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <dataBuffer>
     310:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <dataBuffer+0x1>
     314:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <dataBuffer+0x2>
     318:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <dataBuffer+0x3>
     31c:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <dataBuffer+0x4>
     320:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <dataBuffer+0x5>
     324:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <dataBuffer+0x6>
     328:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <dataBuffer+0x7>
		return temp;
     32c:	65 2f       	mov	r22, r21
     32e:	74 2f       	mov	r23, r20
     330:	83 2f       	mov	r24, r19
     332:	92 2f       	mov	r25, r18
     334:	08 95       	ret
	}
	else
	{
		return 0;
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     33e:	08 95       	ret

00000340 <__vector_4>:

//attached to IR 
ISR(PCINT1_vect)
{
     340:	1f 92       	push	r1
     342:	0f 92       	push	r0
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	0f 92       	push	r0
     348:	11 24       	eor	r1, r1
     34a:	af 92       	push	r10
     34c:	bf 92       	push	r11
     34e:	cf 92       	push	r12
     350:	df 92       	push	r13
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	2f 93       	push	r18
     35c:	3f 93       	push	r19
     35e:	4f 93       	push	r20
     360:	5f 93       	push	r21
     362:	6f 93       	push	r22
     364:	7f 93       	push	r23
     366:	8f 93       	push	r24
     368:	9f 93       	push	r25
     36a:	af 93       	push	r26
     36c:	bf 93       	push	r27
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	ef 93       	push	r30
     374:	ff 93       	push	r31
	if(irFlag==0)
     376:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <irFlag>
     37a:	81 11       	cpse	r24, r1
     37c:	24 c0       	rjmp	.+72     	; 0x3c6 <__vector_4+0x86>
	{
	dataBuffer=0;
     37e:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <dataBuffer>
     382:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <dataBuffer+0x1>
     386:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <dataBuffer+0x2>
     38a:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <dataBuffer+0x3>
     38e:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <dataBuffer+0x4>
     392:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <dataBuffer+0x5>
     396:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <dataBuffer+0x6>
     39a:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <dataBuffer+0x7>
	irFlag = 1;
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <irFlag>
	signalready=0;
     3a4:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <signalready>
     3a8:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <signalready+0x1>
     3ac:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <signalready+0x2>
     3b0:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <signalready+0x3>
     3b4:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <signalready+0x4>
     3b8:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <signalready+0x5>
     3bc:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <signalready+0x6>
     3c0:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <signalready+0x7>
     3c4:	f1 c0       	rjmp	.+482    	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
	}
	else
	{
		if (ready)
     3c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     3ca:	88 23       	and	r24, r24
     3cc:	09 f4       	brne	.+2      	; 0x3d0 <__vector_4+0x90>
     3ce:	ec c0       	rjmp	.+472    	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
		{
			    timePassed=milli-lastSignal;
     3d0:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <milli>
     3d4:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <milli+0x1>
     3d8:	a0 90 74 01 	lds	r10, 0x0174	; 0x800174 <lastSignal>
     3dc:	b0 90 75 01 	lds	r11, 0x0175	; 0x800175 <lastSignal+0x1>
     3e0:	c0 90 76 01 	lds	r12, 0x0176	; 0x800176 <lastSignal+0x2>
     3e4:	d0 90 77 01 	lds	r13, 0x0177	; 0x800177 <lastSignal+0x3>
     3e8:	e0 90 78 01 	lds	r14, 0x0178	; 0x800178 <lastSignal+0x4>
     3ec:	f0 90 79 01 	lds	r15, 0x0179	; 0x800179 <lastSignal+0x5>
     3f0:	00 91 7a 01 	lds	r16, 0x017A	; 0x80017a <lastSignal+0x6>
     3f4:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <lastSignal+0x7>
     3f8:	28 2f       	mov	r18, r24
     3fa:	39 2f       	mov	r19, r25
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	50 e0       	ldi	r21, 0x00	; 0
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 2d 0a 	call	0x145a	; 0x145a <__subdi3>
     40c:	20 93 84 01 	sts	0x0184, r18	; 0x800184 <timePassed>
     410:	30 93 85 01 	sts	0x0185, r19	; 0x800185 <timePassed+0x1>
     414:	40 93 86 01 	sts	0x0186, r20	; 0x800186 <timePassed+0x2>
     418:	50 93 87 01 	sts	0x0187, r21	; 0x800187 <timePassed+0x3>
     41c:	60 93 88 01 	sts	0x0188, r22	; 0x800188 <timePassed+0x4>
     420:	70 93 89 01 	sts	0x0189, r23	; 0x800189 <timePassed+0x5>
     424:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <timePassed+0x6>
     428:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <timePassed+0x7>
				uint8_t pinState = (PINC & (1 << 1)) >> 1; //interrupt pin state
     42c:	e6 b1       	in	r30, 0x06	; 6
     42e:	e6 95       	lsr	r30
     430:	e1 70       	andi	r30, 0x01	; 1
				if (timePassed>1000)
     432:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <timePassed>
     436:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <timePassed+0x1>
     43a:	40 91 86 01 	lds	r20, 0x0186	; 0x800186 <timePassed+0x2>
     43e:	50 91 87 01 	lds	r21, 0x0187	; 0x800187 <timePassed+0x3>
     442:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <timePassed+0x4>
     446:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <timePassed+0x5>
     44a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <timePassed+0x6>
     44e:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <timePassed+0x7>
     452:	28 3e       	cpi	r18, 0xE8	; 232
     454:	33 40       	sbci	r19, 0x03	; 3
     456:	41 05       	cpc	r20, r1
     458:	51 05       	cpc	r21, r1
     45a:	61 05       	cpc	r22, r1
     45c:	71 05       	cpc	r23, r1
     45e:	81 05       	cpc	r24, r1
     460:	91 05       	cpc	r25, r1
     462:	99 f0       	breq	.+38     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     464:	90 f0       	brcs	.+36     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
				{
					dataBuffer=0;
     466:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <dataBuffer>
     46a:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <dataBuffer+0x1>
     46e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <dataBuffer+0x2>
     472:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <dataBuffer+0x3>
     476:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <dataBuffer+0x4>
     47a:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <dataBuffer+0x5>
     47e:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <dataBuffer+0x6>
     482:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <dataBuffer+0x7>
					counter=0;
     486:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <counter>
				}
				signalready=0;
     48a:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <signalready>
     48e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <signalready+0x1>
     492:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <signalready+0x2>
     496:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <signalready+0x3>
     49a:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <signalready+0x4>
     49e:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <signalready+0x5>
     4a2:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <signalready+0x6>
     4a6:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <signalready+0x7>
				if (pinState==1)
     4aa:	e1 30       	cpi	r30, 0x01	; 1
     4ac:	09 f0       	breq	.+2      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4ae:	7c c0       	rjmp	.+248    	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
				{
					
				
					if (counter>21 && counter<34) //eigentlich ab 17 aber geht irgendwie nicht
     4b0:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <counter>
     4b4:	8a ee       	ldi	r24, 0xEA	; 234
     4b6:	8e 0f       	add	r24, r30
     4b8:	8c 30       	cpi	r24, 0x0C	; 12
     4ba:	08 f0       	brcs	.+2      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4bc:	49 c0       	rjmp	.+146    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
					{
						if (timePassed>17) //if logic null
     4be:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <timePassed>
     4c2:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <timePassed+0x1>
     4c6:	40 91 86 01 	lds	r20, 0x0186	; 0x800186 <timePassed+0x2>
     4ca:	50 91 87 01 	lds	r21, 0x0187	; 0x800187 <timePassed+0x3>
     4ce:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <timePassed+0x4>
     4d2:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <timePassed+0x5>
     4d6:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <timePassed+0x6>
     4da:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <timePassed+0x7>
     4de:	a1 e1       	ldi	r26, 0x11	; 17
     4e0:	0e 94 36 0a 	call	0x146c	; 0x146c <__cmpdi2_s8>
     4e4:	a9 f1       	breq	.+106    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     4e6:	a0 f1       	brcs	.+104    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
						{
							dataBuffer=dataBuffer | (1<<(counter-22));
     4e8:	21 e0       	ldi	r18, 0x01	; 1
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	8a ee       	ldi	r24, 0xEA	; 234
     4ee:	8e 0f       	add	r24, r30
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4f2:	22 0f       	add	r18, r18
     4f4:	33 1f       	adc	r19, r19
     4f6:	8a 95       	dec	r24
     4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4fa:	83 2f       	mov	r24, r19
     4fc:	88 0f       	add	r24, r24
     4fe:	88 0b       	sbc	r24, r24
     500:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <dataBuffer>
     504:	92 2b       	or	r25, r18
     506:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <dataBuffer>
     50a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <dataBuffer+0x1>
     50e:	93 2b       	or	r25, r19
     510:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <dataBuffer+0x1>
     514:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <dataBuffer+0x2>
     518:	98 2b       	or	r25, r24
     51a:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <dataBuffer+0x2>
     51e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <dataBuffer+0x3>
     522:	98 2b       	or	r25, r24
     524:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <dataBuffer+0x3>
     528:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <dataBuffer+0x4>
     52c:	98 2b       	or	r25, r24
     52e:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <dataBuffer+0x4>
     532:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <dataBuffer+0x5>
     536:	98 2b       	or	r25, r24
     538:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <dataBuffer+0x5>
     53c:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <dataBuffer+0x6>
     540:	98 2b       	or	r25, r24
     542:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <dataBuffer+0x6>
     546:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <dataBuffer+0x7>
     54a:	89 2b       	or	r24, r25
     54c:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <dataBuffer+0x7>
							
						}
						
					}
				counter++;		
     550:	ef 5f       	subi	r30, 0xFF	; 255
     552:	e0 93 59 01 	sts	0x0159, r30	; 0x800159 <counter>
				lastSignal=milli;	
     556:	00 91 a0 01 	lds	r16, 0x01A0	; 0x8001a0 <milli>
     55a:	10 91 a1 01 	lds	r17, 0x01A1	; 0x8001a1 <milli+0x1>
     55e:	00 93 74 01 	sts	0x0174, r16	; 0x800174 <lastSignal>
     562:	10 93 75 01 	sts	0x0175, r17	; 0x800175 <lastSignal+0x1>
     566:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <lastSignal+0x2>
     56a:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <lastSignal+0x3>
     56e:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <lastSignal+0x4>
     572:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <lastSignal+0x5>
     576:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <lastSignal+0x6>
     57a:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <lastSignal+0x7>
				if (counter==34)
     57e:	e2 32       	cpi	r30, 0x22	; 34
     580:	99 f4       	brne	.+38     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
				{
					signalready=1;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <signalready>
     588:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <signalready+0x1>
     58c:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <signalready+0x2>
     590:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <signalready+0x3>
     594:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <signalready+0x4>
     598:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <signalready+0x5>
     59c:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <signalready+0x6>
     5a0:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <signalready+0x7>
					counter=0;
     5a4:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <counter>
				}
								
		}
	}
	
}
     5a8:	ff 91       	pop	r31
     5aa:	ef 91       	pop	r30
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	bf 91       	pop	r27
     5b2:	af 91       	pop	r26
     5b4:	9f 91       	pop	r25
     5b6:	8f 91       	pop	r24
     5b8:	7f 91       	pop	r23
     5ba:	6f 91       	pop	r22
     5bc:	5f 91       	pop	r21
     5be:	4f 91       	pop	r20
     5c0:	3f 91       	pop	r19
     5c2:	2f 91       	pop	r18
     5c4:	1f 91       	pop	r17
     5c6:	0f 91       	pop	r16
     5c8:	ff 90       	pop	r15
     5ca:	ef 90       	pop	r14
     5cc:	df 90       	pop	r13
     5ce:	cf 90       	pop	r12
     5d0:	bf 90       	pop	r11
     5d2:	af 90       	pop	r10
     5d4:	0f 90       	pop	r0
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	0f 90       	pop	r0
     5da:	1f 90       	pop	r1
     5dc:	18 95       	reti

000005de <ws2812_setleds>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
     5de:	9b 01       	movw	r18, r22
     5e0:	22 0f       	add	r18, r18
     5e2:	33 1f       	adc	r19, r19
     5e4:	62 0f       	add	r22, r18
     5e6:	73 1f       	adc	r23, r19
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
     5e8:	21 9a       	sbi	0x04, 1	; 4
  
  masklo	=~maskhi&ws2812_PORTREG;
     5ea:	25 b1       	in	r18, 0x05	; 5
     5ec:	2d 7f       	andi	r18, 0xFD	; 253
  maskhi |=        ws2812_PORTREG;
     5ee:	35 b1       	in	r19, 0x05	; 5
     5f0:	32 60       	ori	r19, 0x02	; 2
  
  sreg_prev=SREG;
     5f2:	4f b7       	in	r20, 0x3f	; 63
  cli();  
     5f4:	f8 94       	cli

  while (datlen--) {
     5f6:	61 15       	cp	r22, r1
     5f8:	71 05       	cpc	r23, r1
     5fa:	09 f4       	brne	.+2      	; 0x5fe <ws2812_setleds+0x20>
     5fc:	21 c0       	rjmp	.+66     	; 0x640 <loop54+0x38>
     5fe:	fc 01       	movw	r30, r24
     600:	68 0f       	add	r22, r24
     602:	79 1f       	adc	r23, r25
    curbyte=*data++;
     604:	91 91       	ld	r25, Z+
    
    asm volatile(
     606:	88 e0       	ldi	r24, 0x08	; 8

00000608 <loop54>:
     608:	35 b9       	out	0x05, r19	; 5
     60a:	97 ff       	sbrs	r25, 7
     60c:	25 b9       	out	0x05, r18	; 5
     60e:	99 0f       	add	r25, r25
     610:	00 00       	nop
     612:	00 c0       	rjmp	.+0      	; 0x614 <loop54+0xc>
     614:	25 b9       	out	0x05, r18	; 5
     616:	00 00       	nop
     618:	00 c0       	rjmp	.+0      	; 0x61a <loop54+0x12>
     61a:	00 c0       	rjmp	.+0      	; 0x61c <loop54+0x14>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <loop54+0x16>
     61e:	00 c0       	rjmp	.+0      	; 0x620 <loop54+0x18>
     620:	00 c0       	rjmp	.+0      	; 0x622 <loop54+0x1a>
     622:	00 c0       	rjmp	.+0      	; 0x624 <loop54+0x1c>
     624:	00 c0       	rjmp	.+0      	; 0x626 <loop54+0x1e>
     626:	00 c0       	rjmp	.+0      	; 0x628 <loop54+0x20>
     628:	00 c0       	rjmp	.+0      	; 0x62a <loop54+0x22>
     62a:	00 c0       	rjmp	.+0      	; 0x62c <loop54+0x24>
     62c:	00 c0       	rjmp	.+0      	; 0x62e <loop54+0x26>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <loop54+0x28>
     630:	00 c0       	rjmp	.+0      	; 0x632 <loop54+0x2a>
     632:	00 c0       	rjmp	.+0      	; 0x634 <loop54+0x2c>
     634:	00 c0       	rjmp	.+0      	; 0x636 <loop54+0x2e>
     636:	8a 95       	dec	r24
     638:	39 f7       	brne	.-50     	; 0x608 <loop54>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
     63a:	e6 17       	cp	r30, r22
     63c:	f7 07       	cpc	r31, r23
     63e:	11 f7       	brne	.-60     	; 0x604 <ws2812_setleds+0x26>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
     640:	4f bf       	out	0x3f, r20	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     642:	85 e8       	ldi	r24, 0x85	; 133
     644:	8a 95       	dec	r24
     646:	f1 f7       	brne	.-4      	; 0x644 <loop54+0x3c>
     648:	00 00       	nop
     64a:	08 95       	ret

0000064c <rotating_spin>:

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
	dest[1]=source[1];
	dest[2]=source[2];
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	c5 e9       	ldi	r28, 0x95	; 149
     65a:	d1 e0       	ldi	r29, 0x01	; 1
     65c:	09 e8       	ldi	r16, 0x89	; 137
     65e:	11 e0       	ldi	r17, 0x01	; 1
     660:	f1 2c       	mov	r15, r1
     662:	0f 2e       	mov	r0, r31
     664:	fa e0       	ldi	r31, 0x0A	; 10
     666:	ef 2e       	mov	r14, r31
     668:	f0 2d       	mov	r31, r0
     66a:	e9 82       	std	Y+1, r14	; 0x01
     66c:	e8 82       	st	Y, r14
     66e:	ea 82       	std	Y+2, r14	; 0x02
     670:	23 e0       	ldi	r18, 0x03	; 3
     672:	2f 15       	cp	r18, r15
     674:	28 f4       	brcc	.+10     	; 0x680 <rotating_spin+0x34>
     676:	f8 01       	movw	r30, r16
     678:	11 82       	std	Z+1, r1	; 0x01
     67a:	10 82       	st	Z, r1
     67c:	12 82       	std	Z+2, r1	; 0x02
     67e:	03 c0       	rjmp	.+6      	; 0x686 <rotating_spin+0x3a>
     680:	1d ae       	std	Y+61, r1	; 0x3d
     682:	1c ae       	std	Y+60, r1	; 0x3c
     684:	1e ae       	std	Y+62, r1	; 0x3e
     686:	68 e1       	ldi	r22, 0x18	; 24
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	85 e9       	ldi	r24, 0x95	; 149
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	0e 94 ef 02 	call	0x5de	; 0x5de <ws2812_setleds>
     692:	ff eb       	ldi	r31, 0xBF	; 191
     694:	2a ed       	ldi	r18, 0xDA	; 218
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	f1 50       	subi	r31, 0x01	; 1
     69a:	20 40       	sbci	r18, 0x00	; 0
     69c:	80 40       	sbci	r24, 0x00	; 0
     69e:	e1 f7       	brne	.-8      	; 0x698 <rotating_spin+0x4c>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <rotating_spin+0x56>
     6a2:	00 00       	nop
     6a4:	f3 94       	inc	r15
     6a6:	23 96       	adiw	r28, 0x03	; 3
     6a8:	0d 5f       	subi	r16, 0xFD	; 253
     6aa:	1f 4f       	sbci	r17, 0xFF	; 255
     6ac:	98 e1       	ldi	r25, 0x18	; 24
     6ae:	f9 12       	cpse	r15, r25
     6b0:	dc cf       	rjmp	.-72     	; 0x66a <rotating_spin+0x1e>
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	08 95       	ret

000006c0 <c_spin>:
     6c0:	ef 92       	push	r14
     6c2:	ff 92       	push	r15
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <defaultcolors>
     6ce:	88 23       	and	r24, r24
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <c_spin+0x14>
     6d2:	41 c0       	rjmp	.+130    	; 0x756 <c_spin+0x96>
     6d4:	ee e0       	ldi	r30, 0x0E	; 14
     6d6:	f1 e0       	ldi	r31, 0x01	; 1
     6d8:	10 82       	st	Z, r1
     6da:	8a e0       	ldi	r24, 0x0A	; 10
     6dc:	81 83       	std	Z+1, r24	; 0x01
     6de:	8e e1       	ldi	r24, 0x1E	; 30
     6e0:	82 83       	std	Z+2, r24	; 0x02
     6e2:	39 c0       	rjmp	.+114    	; 0x756 <c_spin+0x96>
     6e4:	f7 01       	movw	r30, r14
     6e6:	80 81       	ld	r24, Z
     6e8:	8a 87       	std	Y+10, r24	; 0x0a
     6ea:	81 81       	ldd	r24, Z+1	; 0x01
     6ec:	89 87       	std	Y+9, r24	; 0x09
     6ee:	82 81       	ldd	r24, Z+2	; 0x02
     6f0:	8b 87       	std	Y+11, r24	; 0x0b
     6f2:	13 30       	cpi	r17, 0x03	; 3
     6f4:	18 f0       	brcs	.+6      	; 0x6fc <c_spin+0x3c>
     6f6:	19 82       	std	Y+1, r1	; 0x01
     6f8:	18 82       	st	Y, r1
     6fa:	1a 82       	std	Y+2, r1	; 0x02
     6fc:	23 96       	adiw	r28, 0x03	; 3
     6fe:	68 e1       	ldi	r22, 0x18	; 24
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	85 e9       	ldi	r24, 0x95	; 149
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	0e 94 ef 02 	call	0x5de	; 0x5de <ws2812_setleds>
     70a:	8f e5       	ldi	r24, 0x5F	; 95
     70c:	9a ee       	ldi	r25, 0xEA	; 234
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <c_spin+0x4e>
     712:	00 c0       	rjmp	.+0      	; 0x714 <c_spin+0x54>
     714:	00 00       	nop
     716:	1f 5f       	subi	r17, 0xFF	; 255
     718:	16 31       	cpi	r17, 0x16	; 22
     71a:	21 f7       	brne	.-56     	; 0x6e4 <c_spin+0x24>
     71c:	2f c0       	rjmp	.+94     	; 0x77c <c_spin+0xbc>
     71e:	f7 01       	movw	r30, r14
     720:	80 81       	ld	r24, Z
     722:	89 83       	std	Y+1, r24	; 0x01
     724:	81 81       	ldd	r24, Z+1	; 0x01
     726:	88 83       	st	Y, r24
     728:	82 81       	ldd	r24, Z+2	; 0x02
     72a:	8a 83       	std	Y+2, r24	; 0x02
     72c:	13 31       	cpi	r17, 0x13	; 19
     72e:	18 f4       	brcc	.+6      	; 0x736 <c_spin+0x76>
     730:	1a 86       	std	Y+10, r1	; 0x0a
     732:	19 86       	std	Y+9, r1	; 0x09
     734:	1b 86       	std	Y+11, r1	; 0x0b
     736:	23 97       	sbiw	r28, 0x03	; 3
     738:	68 e1       	ldi	r22, 0x18	; 24
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	85 e9       	ldi	r24, 0x95	; 149
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	0e 94 ef 02 	call	0x5de	; 0x5de <ws2812_setleds>
     744:	8f e5       	ldi	r24, 0x5F	; 95
     746:	9a ee       	ldi	r25, 0xEA	; 234
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	f1 f7       	brne	.-4      	; 0x748 <c_spin+0x88>
     74c:	00 c0       	rjmp	.+0      	; 0x74e <c_spin+0x8e>
     74e:	00 00       	nop
     750:	11 50       	subi	r17, 0x01	; 1
     752:	29 f7       	brne	.-54     	; 0x71e <c_spin+0x5e>
     754:	23 c0       	rjmp	.+70     	; 0x79c <c_spin+0xdc>
     756:	e5 e9       	ldi	r30, 0x95	; 149
     758:	f1 e0       	ldi	r31, 0x01	; 1
     75a:	ae e0       	ldi	r26, 0x0E	; 14
     75c:	b1 e0       	ldi	r27, 0x01	; 1
     75e:	8c 91       	ld	r24, X
     760:	81 83       	std	Z+1, r24	; 0x01
     762:	11 96       	adiw	r26, 0x01	; 1
     764:	8c 91       	ld	r24, X
     766:	11 97       	sbiw	r26, 0x01	; 1
     768:	80 83       	st	Z, r24
     76a:	12 96       	adiw	r26, 0x02	; 2
     76c:	8c 91       	ld	r24, X
     76e:	12 97       	sbiw	r26, 0x02	; 2
     770:	82 83       	std	Z+2, r24	; 0x02
     772:	cf e8       	ldi	r28, 0x8F	; 143
     774:	d1 e0       	ldi	r29, 0x01	; 1
     776:	10 e0       	ldi	r17, 0x00	; 0
     778:	7d 01       	movw	r14, r26
     77a:	c1 cf       	rjmp	.-126    	; 0x6fe <c_spin+0x3e>
     77c:	ee e0       	ldi	r30, 0x0E	; 14
     77e:	f1 e0       	ldi	r31, 0x01	; 1
     780:	80 81       	ld	r24, Z
     782:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <__bss_end+0x33>
     786:	81 81       	ldd	r24, Z+1	; 0x01
     788:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__bss_end+0x32>
     78c:	82 81       	ldd	r24, Z+2	; 0x02
     78e:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <__bss_end+0x34>
     792:	c1 ed       	ldi	r28, 0xD1	; 209
     794:	d1 e0       	ldi	r29, 0x01	; 1
     796:	15 e1       	ldi	r17, 0x15	; 21
     798:	7f 01       	movw	r14, r30
     79a:	ce cf       	rjmp	.-100    	; 0x738 <c_spin+0x78>
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
     7a6:	08 95       	ret

000007a8 <clear>:
     7a8:	e5 e9       	ldi	r30, 0x95	; 149
     7aa:	f1 e0       	ldi	r31, 0x01	; 1
     7ac:	8d ed       	ldi	r24, 0xDD	; 221
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	11 82       	std	Z+1, r1	; 0x01
     7b2:	10 82       	st	Z, r1
     7b4:	12 82       	std	Z+2, r1	; 0x02
     7b6:	33 96       	adiw	r30, 0x03	; 3
     7b8:	e8 17       	cp	r30, r24
     7ba:	f9 07       	cpc	r31, r25
     7bc:	c9 f7       	brne	.-14     	; 0x7b0 <clear+0x8>
     7be:	68 e1       	ldi	r22, 0x18	; 24
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	85 e9       	ldi	r24, 0x95	; 149
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	0e 94 ef 02 	call	0x5de	; 0x5de <ws2812_setleds>
     7ca:	08 95       	ret

000007cc <ReadCommand>:
     7cc:	bf 92       	push	r11
     7ce:	cf 92       	push	r12
     7d0:	df 92       	push	r13
     7d2:	ef 92       	push	r14
     7d4:	ff 92       	push	r15
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	6b 01       	movw	r12, r22
     7e0:	7c 01       	movw	r14, r24
     7e2:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <clear>
     7e6:	e5 e9       	ldi	r30, 0x95	; 149
     7e8:	f1 e0       	ldi	r31, 0x01	; 1
     7ea:	11 82       	std	Z+1, r1	; 0x01
     7ec:	8e e1       	ldi	r24, 0x1E	; 30
     7ee:	80 83       	st	Z, r24
     7f0:	12 82       	std	Z+2, r1	; 0x02
     7f2:	68 e1       	ldi	r22, 0x18	; 24
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	cf 01       	movw	r24, r30
     7f8:	0e 94 ef 02 	call	0x5de	; 0x5de <ws2812_setleds>
     7fc:	2f eb       	ldi	r18, 0xBF	; 191
     7fe:	8e ec       	ldi	r24, 0xCE	; 206
     800:	92 e0       	ldi	r25, 0x02	; 2
     802:	21 50       	subi	r18, 0x01	; 1
     804:	80 40       	sbci	r24, 0x00	; 0
     806:	90 40       	sbci	r25, 0x00	; 0
     808:	e1 f7       	brne	.-8      	; 0x802 <ReadCommand+0x36>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <ReadCommand+0x40>
     80c:	00 00       	nop
     80e:	c5 e9       	ldi	r28, 0x95	; 149
     810:	d1 e0       	ldi	r29, 0x01	; 1
     812:	00 ee       	ldi	r16, 0xE0	; 224
     814:	11 e0       	ldi	r17, 0x01	; 1
     816:	0f 2e       	mov	r0, r31
     818:	fe e1       	ldi	r31, 0x1E	; 30
     81a:	bf 2e       	mov	r11, r31
     81c:	f0 2d       	mov	r31, r0
     81e:	c0 fe       	sbrs	r12, 0
     820:	0a c0       	rjmp	.+20     	; 0x836 <ReadCommand+0x6a>
     822:	b9 82       	std	Y+1, r11	; 0x01
     824:	18 82       	st	Y, r1
     826:	ba 82       	std	Y+2, r11	; 0x02
     828:	68 e1       	ldi	r22, 0x18	; 24
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	85 e9       	ldi	r24, 0x95	; 149
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	0e 94 ef 02 	call	0x5de	; 0x5de <ws2812_setleds>
     834:	09 c0       	rjmp	.+18     	; 0x848 <ReadCommand+0x7c>
     836:	19 82       	std	Y+1, r1	; 0x01
     838:	18 82       	st	Y, r1
     83a:	1a 82       	std	Y+2, r1	; 0x02
     83c:	68 e1       	ldi	r22, 0x18	; 24
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	85 e9       	ldi	r24, 0x95	; 149
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	0e 94 ef 02 	call	0x5de	; 0x5de <ws2812_setleds>
     848:	f6 94       	lsr	r15
     84a:	e7 94       	ror	r14
     84c:	d7 94       	ror	r13
     84e:	c7 94       	ror	r12
     850:	2f e7       	ldi	r18, 0x7F	; 127
     852:	88 e3       	ldi	r24, 0x38	; 56
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	21 50       	subi	r18, 0x01	; 1
     858:	80 40       	sbci	r24, 0x00	; 0
     85a:	90 40       	sbci	r25, 0x00	; 0
     85c:	e1 f7       	brne	.-8      	; 0x856 <ReadCommand+0x8a>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <ReadCommand+0x94>
     860:	00 00       	nop
     862:	23 96       	adiw	r28, 0x03	; 3
     864:	c0 17       	cp	r28, r16
     866:	d1 07       	cpc	r29, r17
     868:	d1 f6       	brne	.-76     	; 0x81e <ReadCommand+0x52>
     86a:	2f ef       	ldi	r18, 0xFF	; 255
     86c:	89 e6       	ldi	r24, 0x69	; 105
     86e:	98 e1       	ldi	r25, 0x18	; 24
     870:	21 50       	subi	r18, 0x01	; 1
     872:	80 40       	sbci	r24, 0x00	; 0
     874:	90 40       	sbci	r25, 0x00	; 0
     876:	e1 f7       	brne	.-8      	; 0x870 <ReadCommand+0xa4>
     878:	00 c0       	rjmp	.+0      	; 0x87a <ReadCommand+0xae>
     87a:	00 00       	nop
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	bf 90       	pop	r11
     88e:	08 95       	ret

00000890 <fillRGB>:
     890:	fc 01       	movw	r30, r24
     892:	40 81       	ld	r20, Z
     894:	31 81       	ldd	r19, Z+1	; 0x01
     896:	22 81       	ldd	r18, Z+2	; 0x02
     898:	e5 e9       	ldi	r30, 0x95	; 149
     89a:	f1 e0       	ldi	r31, 0x01	; 1
     89c:	8d ed       	ldi	r24, 0xDD	; 221
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	41 83       	std	Z+1, r20	; 0x01
     8a2:	30 83       	st	Z, r19
     8a4:	22 83       	std	Z+2, r18	; 0x02
     8a6:	33 96       	adiw	r30, 0x03	; 3
     8a8:	e8 17       	cp	r30, r24
     8aa:	f9 07       	cpc	r31, r25
     8ac:	c9 f7       	brne	.-14     	; 0x8a0 <fillRGB+0x10>
     8ae:	68 e1       	ldi	r22, 0x18	; 24
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	85 e9       	ldi	r24, 0x95	; 149
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 ef 02 	call	0x5de	; 0x5de <ws2812_setleds>
     8ba:	08 95       	ret

000008bc <adc_anzeige>:
     8bc:	cf 92       	push	r12
     8be:	df 92       	push	r13
     8c0:	ef 92       	push	r14
     8c2:	ff 92       	push	r15
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	00 d0       	rcall	.+0      	; 0x8ce <adc_anzeige+0x12>
     8ce:	1f 92       	push	r1
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     8d8:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <alcoholmode>
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	f9 01       	movw	r30, r18
     8e0:	ef 5f       	subi	r30, 0xFF	; 255
     8e2:	fe 4f       	sbci	r31, 0xFE	; 254
     8e4:	60 81       	ld	r22, Z
     8e6:	66 23       	and	r22, r22
     8e8:	99 f0       	breq	.+38     	; 0x910 <__stack+0x11>
     8ea:	f9 01       	movw	r30, r18
     8ec:	e9 5f       	subi	r30, 0xF9	; 249
     8ee:	fe 4f       	sbci	r31, 0xFE	; 254
     8f0:	80 81       	ld	r24, Z
     8f2:	e4 2f       	mov	r30, r20
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	e8 1b       	sub	r30, r24
     8f8:	f1 09       	sbc	r31, r1
     8fa:	59 e1       	ldi	r21, 0x19	; 25
     8fc:	5e 9f       	mul	r21, r30
     8fe:	c0 01       	movw	r24, r0
     900:	5f 9f       	mul	r21, r31
     902:	90 0d       	add	r25, r0
     904:	11 24       	eor	r1, r1
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	0e 94 9b 09 	call	0x1336	; 0x1336 <__divmodhi4>
     90c:	60 93 8c 01 	sts	0x018C, r22	; 0x80018c <adc_val>
     910:	f9 01       	movw	r30, r18
     912:	e9 5f       	subi	r30, 0xF9	; 249
     914:	fe 4f       	sbci	r31, 0xFE	; 254
     916:	80 81       	ld	r24, Z
     918:	24 2f       	mov	r18, r20
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	05 97       	sbiw	r24, 0x05	; 5
     920:	28 17       	cp	r18, r24
     922:	39 07       	cpc	r19, r25
     924:	1c f4       	brge	.+6      	; 0x92c <__stack+0x2d>
     926:	0e 94 26 03 	call	0x64c	; 0x64c <rotating_spin>
     92a:	7e c0       	rjmp	.+252    	; 0xa28 <__stack+0x129>
     92c:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <adc_val>
     930:	93 30       	cpi	r25, 0x03	; 3
     932:	4c f4       	brge	.+18     	; 0x946 <__stack+0x47>
     934:	84 e1       	ldi	r24, 0x14	; 20
     936:	89 83       	std	Y+1, r24	; 0x01
     938:	1a 82       	std	Y+2, r1	; 0x02
     93a:	1b 82       	std	Y+3, r1	; 0x03
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 48 04 	call	0x890	; 0x890 <fillRGB>
     944:	71 c0       	rjmp	.+226    	; 0xa28 <__stack+0x129>
     946:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <samplecounter>
     94a:	8f 5f       	subi	r24, 0xFF	; 255
     94c:	85 30       	cpi	r24, 0x05	; 5
     94e:	19 f0       	breq	.+6      	; 0x956 <__stack+0x57>
     950:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <samplecounter>
     954:	02 c0       	rjmp	.+4      	; 0x95a <__stack+0x5b>
     956:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <samplecounter>
     95a:	a4 e6       	ldi	r26, 0x64	; 100
     95c:	b1 e0       	ldi	r27, 0x01	; 1
     95e:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <samplecounter>
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	ec 59       	subi	r30, 0x9C	; 156
     966:	fe 4f       	sbci	r31, 0xFE	; 254
     968:	90 83       	st	Z, r25
     96a:	2c 91       	ld	r18, X
     96c:	11 96       	adiw	r26, 0x01	; 1
     96e:	8c 91       	ld	r24, X
     970:	11 97       	sbiw	r26, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	82 0f       	add	r24, r18
     976:	91 1d       	adc	r25, r1
     978:	12 96       	adiw	r26, 0x02	; 2
     97a:	2c 91       	ld	r18, X
     97c:	12 97       	sbiw	r26, 0x02	; 2
     97e:	82 0f       	add	r24, r18
     980:	91 1d       	adc	r25, r1
     982:	13 96       	adiw	r26, 0x03	; 3
     984:	2c 91       	ld	r18, X
     986:	13 97       	sbiw	r26, 0x03	; 3
     988:	82 0f       	add	r24, r18
     98a:	91 1d       	adc	r25, r1
     98c:	14 96       	adiw	r26, 0x04	; 4
     98e:	2c 91       	ld	r18, X
     990:	82 0f       	add	r24, r18
     992:	91 1d       	adc	r25, r1
     994:	65 e0       	ldi	r22, 0x05	; 5
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	0e 94 9b 09 	call	0x1336	; 0x1336 <__divmodhi4>
     99c:	96 2f       	mov	r25, r22
     99e:	60 93 8c 01 	sts	0x018C, r22	; 0x80018c <adc_val>
     9a2:	62 31       	cpi	r22, 0x12	; 18
     9a4:	24 f4       	brge	.+8      	; 0x9ae <__stack+0xaf>
     9a6:	81 e1       	ldi	r24, 0x11	; 17
     9a8:	c8 2e       	mov	r12, r24
     9aa:	c6 1a       	sub	r12, r22
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <__stack+0xb1>
     9ae:	c1 2c       	mov	r12, r1
     9b0:	cc 0c       	add	r12, r12
     9b2:	8c 2d       	mov	r24, r12
     9b4:	88 0f       	add	r24, r24
     9b6:	88 0f       	add	r24, r24
     9b8:	c8 0e       	add	r12, r24
     9ba:	99 30       	cpi	r25, 0x09	; 9
     9bc:	1c f0       	brlt	.+6      	; 0x9c4 <__stack+0xc5>
     9be:	88 ef       	ldi	r24, 0xF8	; 248
     9c0:	86 0f       	add	r24, r22
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <__stack+0xc7>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	d8 2e       	mov	r13, r24
     9c8:	dd 0c       	add	r13, r13
     9ca:	8d 2d       	mov	r24, r13
     9cc:	88 0f       	add	r24, r24
     9ce:	88 0f       	add	r24, r24
     9d0:	d8 0e       	add	r13, r24
     9d2:	0f 2e       	mov	r0, r31
     9d4:	f5 e9       	ldi	r31, 0x95	; 149
     9d6:	ef 2e       	mov	r14, r31
     9d8:	f1 e0       	ldi	r31, 0x01	; 1
     9da:	ff 2e       	mov	r15, r31
     9dc:	f0 2d       	mov	r31, r0
     9de:	00 e0       	ldi	r16, 0x00	; 0
     9e0:	10 e0       	ldi	r17, 0x00	; 0
     9e2:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <adc_val>
     9e6:	08 2e       	mov	r0, r24
     9e8:	00 0c       	add	r0, r0
     9ea:	99 0b       	sbc	r25, r25
     9ec:	08 17       	cp	r16, r24
     9ee:	19 07       	cpc	r17, r25
     9f0:	54 f4       	brge	.+20     	; 0xa06 <__stack+0x107>
     9f2:	f7 01       	movw	r30, r14
     9f4:	c1 82       	std	Z+1, r12	; 0x01
     9f6:	d0 82       	st	Z, r13
     9f8:	12 82       	std	Z+2, r1	; 0x02
     9fa:	b8 01       	movw	r22, r16
     9fc:	85 e9       	ldi	r24, 0x95	; 149
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	0e 94 ef 02 	call	0x5de	; 0x5de <ws2812_setleds>
     a04:	09 c0       	rjmp	.+18     	; 0xa18 <__stack+0x119>
     a06:	f7 01       	movw	r30, r14
     a08:	11 82       	std	Z+1, r1	; 0x01
     a0a:	10 82       	st	Z, r1
     a0c:	12 82       	std	Z+2, r1	; 0x02
     a0e:	b8 01       	movw	r22, r16
     a10:	85 e9       	ldi	r24, 0x95	; 149
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	0e 94 ef 02 	call	0x5de	; 0x5de <ws2812_setleds>
     a18:	0f 5f       	subi	r16, 0xFF	; 255
     a1a:	1f 4f       	sbci	r17, 0xFF	; 255
     a1c:	f3 e0       	ldi	r31, 0x03	; 3
     a1e:	ef 0e       	add	r14, r31
     a20:	f1 1c       	adc	r15, r1
     a22:	09 31       	cpi	r16, 0x19	; 25
     a24:	11 05       	cpc	r17, r1
     a26:	e9 f6       	brne	.-70     	; 0x9e2 <__stack+0xe3>
     a28:	2f e7       	ldi	r18, 0x7F	; 127
     a2a:	88 e3       	ldi	r24, 0x38	; 56
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	21 50       	subi	r18, 0x01	; 1
     a30:	80 40       	sbci	r24, 0x00	; 0
     a32:	90 40       	sbci	r25, 0x00	; 0
     a34:	e1 f7       	brne	.-8      	; 0xa2e <__stack+0x12f>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <__stack+0x139>
     a38:	00 00       	nop
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	df 90       	pop	r13
     a4e:	cf 90       	pop	r12
     a50:	08 95       	ret

00000a52 <akku_anzeige>:
     a52:	bf 92       	push	r11
     a54:	cf 92       	push	r12
     a56:	df 92       	push	r13
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	00 d0       	rcall	.+0      	; 0xa66 <akku_anzeige+0x14>
     a66:	1f 92       	push	r1
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	d0 90 58 01 	lds	r13, 0x0158	; 0x800158 <akkuoffset>
     a70:	d1 10       	cpse	r13, r1
     a72:	0b c0       	rjmp	.+22     	; 0xa8a <akku_anzeige+0x38>
     a74:	84 e6       	ldi	r24, 0x64	; 100
     a76:	89 83       	std	Y+1, r24	; 0x01
     a78:	1a 82       	std	Y+2, r1	; 0x02
     a7a:	1b 82       	std	Y+3, r1	; 0x03
     a7c:	ce 01       	movw	r24, r28
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	0e 94 48 04 	call	0x890	; 0x890 <fillRGB>
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	05 c0       	rjmp	.+10     	; 0xa94 <akku_anzeige+0x42>
     a8a:	2d 2d       	mov	r18, r13
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	22 31       	cpi	r18, 0x12	; 18
     a90:	31 05       	cpc	r19, r1
     a92:	24 f4       	brge	.+8      	; 0xa9c <akku_anzeige+0x4a>
     a94:	81 e1       	ldi	r24, 0x11	; 17
     a96:	c8 2e       	mov	r12, r24
     a98:	c2 1a       	sub	r12, r18
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <akku_anzeige+0x4c>
     a9c:	c1 2c       	mov	r12, r1
     a9e:	88 e0       	ldi	r24, 0x08	; 8
     aa0:	8d 15       	cp	r24, r13
     aa2:	30 f4       	brcc	.+12     	; 0xab0 <akku_anzeige+0x5e>
     aa4:	0f 2e       	mov	r0, r31
     aa6:	f8 ef       	ldi	r31, 0xF8	; 248
     aa8:	bf 2e       	mov	r11, r31
     aaa:	f0 2d       	mov	r31, r0
     aac:	bd 0c       	add	r11, r13
     aae:	01 c0       	rjmp	.+2      	; 0xab2 <akku_anzeige+0x60>
     ab0:	b1 2c       	mov	r11, r1
     ab2:	0f 2e       	mov	r0, r31
     ab4:	f5 e9       	ldi	r31, 0x95	; 149
     ab6:	ef 2e       	mov	r14, r31
     ab8:	f1 e0       	ldi	r31, 0x01	; 1
     aba:	ff 2e       	mov	r15, r31
     abc:	f0 2d       	mov	r31, r0
     abe:	00 e0       	ldi	r16, 0x00	; 0
     ac0:	10 e0       	ldi	r17, 0x00	; 0
     ac2:	0d 15       	cp	r16, r13
     ac4:	50 f4       	brcc	.+20     	; 0xada <akku_anzeige+0x88>
     ac6:	f7 01       	movw	r30, r14
     ac8:	c1 82       	std	Z+1, r12	; 0x01
     aca:	b0 82       	st	Z, r11
     acc:	12 82       	std	Z+2, r1	; 0x02
     ace:	b8 01       	movw	r22, r16
     ad0:	85 e9       	ldi	r24, 0x95	; 149
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 ef 02 	call	0x5de	; 0x5de <ws2812_setleds>
     ad8:	09 c0       	rjmp	.+18     	; 0xaec <akku_anzeige+0x9a>
     ada:	f7 01       	movw	r30, r14
     adc:	11 82       	std	Z+1, r1	; 0x01
     ade:	10 82       	st	Z, r1
     ae0:	12 82       	std	Z+2, r1	; 0x02
     ae2:	b8 01       	movw	r22, r16
     ae4:	85 e9       	ldi	r24, 0x95	; 149
     ae6:	91 e0       	ldi	r25, 0x01	; 1
     ae8:	0e 94 ef 02 	call	0x5de	; 0x5de <ws2812_setleds>
     aec:	0f 5f       	subi	r16, 0xFF	; 255
     aee:	1f 4f       	sbci	r17, 0xFF	; 255
     af0:	f3 e0       	ldi	r31, 0x03	; 3
     af2:	ef 0e       	add	r14, r31
     af4:	f1 1c       	adc	r15, r1
     af6:	09 31       	cpi	r16, 0x19	; 25
     af8:	11 05       	cpc	r17, r1
     afa:	19 f7       	brne	.-58     	; 0xac2 <akku_anzeige+0x70>
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	ff 90       	pop	r15
     b0c:	ef 90       	pop	r14
     b0e:	df 90       	pop	r13
     b10:	cf 90       	pop	r12
     b12:	bf 90       	pop	r11
     b14:	08 95       	ret

00000b16 <displayPalette>:
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	c1 e1       	ldi	r28, 0x11	; 17
     b1c:	d1 e0       	ldi	r29, 0x01	; 1
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	2a 2f       	mov	r18, r26
     b24:	cd 01       	movw	r24, r26
     b26:	13 96       	adiw	r26, 0x03	; 3
     b28:	ad 01       	movw	r20, r26
     b2a:	8a 17       	cp	r24, r26
     b2c:	9b 07       	cpc	r25, r27
     b2e:	a4 f4       	brge	.+40     	; 0xb58 <displayPalette+0x42>
     b30:	78 81       	ld	r23, Y
     b32:	69 81       	ldd	r22, Y+1	; 0x01
     b34:	3a 81       	ldd	r19, Y+2	; 0x02
     b36:	fc 01       	movw	r30, r24
     b38:	ee 0f       	add	r30, r30
     b3a:	ff 1f       	adc	r31, r31
     b3c:	8e 0f       	add	r24, r30
     b3e:	9f 1f       	adc	r25, r31
     b40:	fc 01       	movw	r30, r24
     b42:	eb 56       	subi	r30, 0x6B	; 107
     b44:	fe 4f       	sbci	r31, 0xFE	; 254
     b46:	71 83       	std	Z+1, r23	; 0x01
     b48:	60 83       	st	Z, r22
     b4a:	32 83       	std	Z+2, r19	; 0x02
     b4c:	2f 5f       	subi	r18, 0xFF	; 255
     b4e:	82 2f       	mov	r24, r18
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	84 17       	cp	r24, r20
     b54:	95 07       	cpc	r25, r21
     b56:	7c f3       	brlt	.-34     	; 0xb36 <displayPalette+0x20>
     b58:	23 96       	adiw	r28, 0x03	; 3
     b5a:	a5 31       	cpi	r26, 0x15	; 21
     b5c:	b1 05       	cpc	r27, r1
     b5e:	09 f7       	brne	.-62     	; 0xb22 <displayPalette+0xc>
     b60:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <__bss_end+0x33>
     b64:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <__bss_end+0x32>
     b68:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <__bss_end+0x34>
     b6c:	68 e1       	ldi	r22, 0x18	; 24
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	85 e9       	ldi	r24, 0x95	; 149
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	0e 94 ef 02 	call	0x5de	; 0x5de <ws2812_setleds>
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <displayMenu>:
     b7e:	e5 e9       	ldi	r30, 0x95	; 149
     b80:	f1 e0       	ldi	r31, 0x01	; 1
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	90 fd       	sbrc	r25, 0
     b86:	04 c0       	rjmp	.+8      	; 0xb90 <displayMenu+0x12>
     b88:	81 83       	std	Z+1, r24	; 0x01
     b8a:	60 83       	st	Z, r22
     b8c:	42 83       	std	Z+2, r20	; 0x02
     b8e:	03 c0       	rjmp	.+6      	; 0xb96 <displayMenu+0x18>
     b90:	11 82       	std	Z+1, r1	; 0x01
     b92:	10 82       	st	Z, r1
     b94:	12 82       	std	Z+2, r1	; 0x02
     b96:	9f 5f       	subi	r25, 0xFF	; 255
     b98:	33 96       	adiw	r30, 0x03	; 3
     b9a:	98 31       	cpi	r25, 0x18	; 24
     b9c:	99 f7       	brne	.-26     	; 0xb84 <displayMenu+0x6>
     b9e:	68 e1       	ldi	r22, 0x18	; 24
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	85 e9       	ldi	r24, 0x95	; 149
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	0e 94 ef 02 	call	0x5de	; 0x5de <ws2812_setleds>
     baa:	08 95       	ret

00000bac <colorselection>:
}
void colorselection (int ir)
{

	switch (ir)
     bac:	84 3f       	cpi	r24, 0xF4	; 244
     bae:	2b e0       	ldi	r18, 0x0B	; 11
     bb0:	92 07       	cpc	r25, r18
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <colorselection+0xa>
     bb4:	a5 c0       	rjmp	.+330    	; 0xd00 <colorselection+0x154>
     bb6:	7c f4       	brge	.+30     	; 0xbd6 <colorselection+0x2a>
     bb8:	85 35       	cpi	r24, 0x55	; 85
     bba:	2a e0       	ldi	r18, 0x0A	; 10
     bbc:	92 07       	cpc	r25, r18
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <colorselection+0x16>
     bc0:	79 c0       	rjmp	.+242    	; 0xcb4 <colorselection+0x108>
     bc2:	84 3d       	cpi	r24, 0xD4	; 212
     bc4:	2b e0       	ldi	r18, 0x0B	; 11
     bc6:	92 07       	cpc	r25, r18
     bc8:	09 f4       	brne	.+2      	; 0xbcc <colorselection+0x20>
     bca:	87 c0       	rjmp	.+270    	; 0xcda <colorselection+0x12e>
     bcc:	85 31       	cpi	r24, 0x15	; 21
     bce:	9a 40       	sbci	r25, 0x0A	; 10
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <colorselection+0x28>
     bd2:	a2 c0       	rjmp	.+324    	; 0xd18 <colorselection+0x16c>
     bd4:	36 c0       	rjmp	.+108    	; 0xc42 <colorselection+0x96>
     bd6:	81 37       	cpi	r24, 0x71	; 113
     bd8:	2e e0       	ldi	r18, 0x0E	; 14
     bda:	92 07       	cpc	r25, r18
     bdc:	f9 f0       	breq	.+62     	; 0xc1c <colorselection+0x70>
     bde:	2c f4       	brge	.+10     	; 0xbea <colorselection+0x3e>
     be0:	81 33       	cpi	r24, 0x31	; 49
     be2:	9e 40       	sbci	r25, 0x0E	; 14
     be4:	09 f4       	brne	.+2      	; 0xbe8 <colorselection+0x3c>
     be6:	53 c0       	rjmp	.+166    	; 0xc8e <colorselection+0xe2>
     be8:	08 95       	ret
     bea:	80 33       	cpi	r24, 0x30	; 48
     bec:	2f e0       	ldi	r18, 0x0F	; 15
     bee:	92 07       	cpc	r25, r18
     bf0:	21 f0       	breq	.+8      	; 0xbfa <colorselection+0x4e>
     bf2:	80 37       	cpi	r24, 0x70	; 112
     bf4:	9f 40       	sbci	r25, 0x0F	; 15
     bf6:	c1 f1       	breq	.+112    	; 0xc68 <colorselection+0xbc>
     bf8:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     bfa:	ee e0       	ldi	r30, 0x0E	; 14
     bfc:	f1 e0       	ldi	r31, 0x01	; 1
     bfe:	a1 e1       	ldi	r26, 0x11	; 17
     c00:	b1 e0       	ldi	r27, 0x01	; 1
     c02:	8c 91       	ld	r24, X
     c04:	80 83       	st	Z, r24
	dest[1]=source[1];
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	8c 91       	ld	r24, X
     c0a:	11 97       	sbiw	r26, 0x01	; 1
     c0c:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     c0e:	12 96       	adiw	r26, 0x02	; 2
     c10:	8c 91       	ld	r24, X
     c12:	82 83       	std	Z+2, r24	; 0x02

	switch (ir)
	{
		case ONE: //Taste 1
        assignColor(c_spin_color,colors[0]);
		fillRGB(c_spin_color);
     c14:	cf 01       	movw	r24, r30
     c16:	0e 94 48 04 	call	0x890	; 0x890 <fillRGB>
		break;
     c1a:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     c1c:	ee e0       	ldi	r30, 0x0E	; 14
     c1e:	f1 e0       	ldi	r31, 0x01	; 1
     c20:	a1 e1       	ldi	r26, 0x11	; 17
     c22:	b1 e0       	ldi	r27, 0x01	; 1
     c24:	13 96       	adiw	r26, 0x03	; 3
     c26:	8c 91       	ld	r24, X
     c28:	13 97       	sbiw	r26, 0x03	; 3
     c2a:	80 83       	st	Z, r24
	dest[1]=source[1];
     c2c:	14 96       	adiw	r26, 0x04	; 4
     c2e:	8c 91       	ld	r24, X
     c30:	14 97       	sbiw	r26, 0x04	; 4
     c32:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     c34:	15 96       	adiw	r26, 0x05	; 5
     c36:	8c 91       	ld	r24, X
     c38:	82 83       	std	Z+2, r24	; 0x02
		fillRGB(c_spin_color);
		break;
		
		case TWO: //Taste 2
        assignColor(c_spin_color,colors[1]);
		fillRGB(c_spin_color);
     c3a:	cf 01       	movw	r24, r30
     c3c:	0e 94 48 04 	call	0x890	; 0x890 <fillRGB>
		break;
     c40:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     c42:	ee e0       	ldi	r30, 0x0E	; 14
     c44:	f1 e0       	ldi	r31, 0x01	; 1
     c46:	a1 e1       	ldi	r26, 0x11	; 17
     c48:	b1 e0       	ldi	r27, 0x01	; 1
     c4a:	16 96       	adiw	r26, 0x06	; 6
     c4c:	8c 91       	ld	r24, X
     c4e:	16 97       	sbiw	r26, 0x06	; 6
     c50:	80 83       	st	Z, r24
	dest[1]=source[1];
     c52:	17 96       	adiw	r26, 0x07	; 7
     c54:	8c 91       	ld	r24, X
     c56:	17 97       	sbiw	r26, 0x07	; 7
     c58:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     c5a:	18 96       	adiw	r26, 0x08	; 8
     c5c:	8c 91       	ld	r24, X
     c5e:	82 83       	std	Z+2, r24	; 0x02
		fillRGB(c_spin_color);
		break;

		case THREE: //Taste 3
        assignColor(c_spin_color,colors[2]);
		fillRGB(c_spin_color);
     c60:	cf 01       	movw	r24, r30
     c62:	0e 94 48 04 	call	0x890	; 0x890 <fillRGB>
		break;
     c66:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     c68:	ee e0       	ldi	r30, 0x0E	; 14
     c6a:	f1 e0       	ldi	r31, 0x01	; 1
     c6c:	a1 e1       	ldi	r26, 0x11	; 17
     c6e:	b1 e0       	ldi	r27, 0x01	; 1
     c70:	19 96       	adiw	r26, 0x09	; 9
     c72:	8c 91       	ld	r24, X
     c74:	19 97       	sbiw	r26, 0x09	; 9
     c76:	80 83       	st	Z, r24
	dest[1]=source[1];
     c78:	1a 96       	adiw	r26, 0x0a	; 10
     c7a:	8c 91       	ld	r24, X
     c7c:	1a 97       	sbiw	r26, 0x0a	; 10
     c7e:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     c80:	1b 96       	adiw	r26, 0x0b	; 11
     c82:	8c 91       	ld	r24, X
     c84:	82 83       	std	Z+2, r24	; 0x02
		fillRGB(c_spin_color);
		break;
		
		case FOUR: //Taste 4
		assignColor(c_spin_color,colors[3]);
		fillRGB(c_spin_color);
     c86:	cf 01       	movw	r24, r30
     c88:	0e 94 48 04 	call	0x890	; 0x890 <fillRGB>
		break;
     c8c:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     c8e:	ee e0       	ldi	r30, 0x0E	; 14
     c90:	f1 e0       	ldi	r31, 0x01	; 1
     c92:	a1 e1       	ldi	r26, 0x11	; 17
     c94:	b1 e0       	ldi	r27, 0x01	; 1
     c96:	1c 96       	adiw	r26, 0x0c	; 12
     c98:	8c 91       	ld	r24, X
     c9a:	1c 97       	sbiw	r26, 0x0c	; 12
     c9c:	80 83       	st	Z, r24
	dest[1]=source[1];
     c9e:	1d 96       	adiw	r26, 0x0d	; 13
     ca0:	8c 91       	ld	r24, X
     ca2:	1d 97       	sbiw	r26, 0x0d	; 13
     ca4:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     ca6:	1e 96       	adiw	r26, 0x0e	; 14
     ca8:	8c 91       	ld	r24, X
     caa:	82 83       	std	Z+2, r24	; 0x02
		fillRGB(c_spin_color);
		break;
		
		case FIVE: //Taste 5
		assignColor(c_spin_color,colors[4]);
		fillRGB(c_spin_color);
     cac:	cf 01       	movw	r24, r30
     cae:	0e 94 48 04 	call	0x890	; 0x890 <fillRGB>
		break;
     cb2:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     cb4:	ee e0       	ldi	r30, 0x0E	; 14
     cb6:	f1 e0       	ldi	r31, 0x01	; 1
     cb8:	a1 e1       	ldi	r26, 0x11	; 17
     cba:	b1 e0       	ldi	r27, 0x01	; 1
     cbc:	1f 96       	adiw	r26, 0x0f	; 15
     cbe:	8c 91       	ld	r24, X
     cc0:	1f 97       	sbiw	r26, 0x0f	; 15
     cc2:	80 83       	st	Z, r24
	dest[1]=source[1];
     cc4:	50 96       	adiw	r26, 0x10	; 16
     cc6:	8c 91       	ld	r24, X
     cc8:	50 97       	sbiw	r26, 0x10	; 16
     cca:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     ccc:	51 96       	adiw	r26, 0x11	; 17
     cce:	8c 91       	ld	r24, X
     cd0:	82 83       	std	Z+2, r24	; 0x02
		fillRGB(c_spin_color);
		break;

		case SIX: //Taste 6
		assignColor(c_spin_color,colors[5]);
		fillRGB(c_spin_color);
     cd2:	cf 01       	movw	r24, r30
     cd4:	0e 94 48 04 	call	0x890	; 0x890 <fillRGB>
		break;
     cd8:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     cda:	ee e0       	ldi	r30, 0x0E	; 14
     cdc:	f1 e0       	ldi	r31, 0x01	; 1
     cde:	a1 e1       	ldi	r26, 0x11	; 17
     ce0:	b1 e0       	ldi	r27, 0x01	; 1
     ce2:	52 96       	adiw	r26, 0x12	; 18
     ce4:	8c 91       	ld	r24, X
     ce6:	52 97       	sbiw	r26, 0x12	; 18
     ce8:	80 83       	st	Z, r24
	dest[1]=source[1];
     cea:	53 96       	adiw	r26, 0x13	; 19
     cec:	8c 91       	ld	r24, X
     cee:	53 97       	sbiw	r26, 0x13	; 19
     cf0:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     cf2:	54 96       	adiw	r26, 0x14	; 20
     cf4:	8c 91       	ld	r24, X
     cf6:	82 83       	std	Z+2, r24	; 0x02
		fillRGB(c_spin_color);
		break;
		
		case SEVEN: //Taste 7
		assignColor(c_spin_color,colors[6]);
		fillRGB(c_spin_color);
     cf8:	cf 01       	movw	r24, r30
     cfa:	0e 94 48 04 	call	0x890	; 0x890 <fillRGB>
		break;		
     cfe:	08 95       	ret

		case PLAY: //Taste play
		colormode=0;
     d00:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <colormode>
		defaultcolors=0;
     d04:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <defaultcolors>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     d08:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

		case PLAY: //Taste play
		colormode=0;
		defaultcolors=0;
		turnofftimer();
		irFlag=0;
     d0c:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <irFlag>
		state=0;
     d10:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <state>
		clear();
     d14:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <clear>
     d18:	08 95       	ret

00000d1a <setState>:

}

void setState (int ir)
{
	switch (ir)
     d1a:	84 3d       	cpi	r24, 0xD4	; 212
     d1c:	2b e0       	ldi	r18, 0x0B	; 11
     d1e:	92 07       	cpc	r25, r18
     d20:	09 f4       	brne	.+2      	; 0xd24 <setState+0xa>
     d22:	52 c0       	rjmp	.+164    	; 0xdc8 <setState+0xae>
     d24:	a4 f4       	brge	.+40     	; 0xd4e <setState+0x34>
     d26:	85 35       	cpi	r24, 0x55	; 85
     d28:	2a e0       	ldi	r18, 0x0A	; 10
     d2a:	92 07       	cpc	r25, r18
     d2c:	09 f4       	brne	.+2      	; 0xd30 <setState+0x16>
     d2e:	45 c0       	rjmp	.+138    	; 0xdba <setState+0xa0>
     d30:	24 f4       	brge	.+8      	; 0xd3a <setState+0x20>
     d32:	85 31       	cpi	r24, 0x15	; 21
     d34:	9a 40       	sbci	r25, 0x0A	; 10
     d36:	61 f1       	breq	.+88     	; 0xd90 <setState+0x76>
     d38:	52 c0       	rjmp	.+164    	; 0xdde <setState+0xc4>
     d3a:	85 3d       	cpi	r24, 0xD5	; 213
     d3c:	2a e0       	ldi	r18, 0x0A	; 10
     d3e:	92 07       	cpc	r25, r18
     d40:	09 f4       	brne	.+2      	; 0xd44 <setState+0x2a>
     d42:	46 c0       	rjmp	.+140    	; 0xdd0 <setState+0xb6>
     d44:	84 36       	cpi	r24, 0x64	; 100
     d46:	9b 40       	sbci	r25, 0x0B	; 11
     d48:	09 f4       	brne	.+2      	; 0xd4c <setState+0x32>
     d4a:	46 c0       	rjmp	.+140    	; 0xdd8 <setState+0xbe>
     d4c:	48 c0       	rjmp	.+144    	; 0xdde <setState+0xc4>
     d4e:	81 37       	cpi	r24, 0x71	; 113
     d50:	2e e0       	ldi	r18, 0x0E	; 14
     d52:	92 07       	cpc	r25, r18
     d54:	b9 f0       	breq	.+46     	; 0xd84 <setState+0x6a>
     d56:	44 f4       	brge	.+16     	; 0xd68 <setState+0x4e>
     d58:	81 33       	cpi	r24, 0x31	; 49
     d5a:	2e e0       	ldi	r18, 0x0E	; 14
     d5c:	92 07       	cpc	r25, r18
     d5e:	31 f1       	breq	.+76     	; 0xdac <setState+0x92>
     d60:	81 36       	cpi	r24, 0x61	; 97
     d62:	9e 40       	sbci	r25, 0x0E	; 14
     d64:	f1 f1       	breq	.+124    	; 0xde2 <setState+0xc8>
     d66:	3b c0       	rjmp	.+118    	; 0xdde <setState+0xc4>
     d68:	80 33       	cpi	r24, 0x30	; 48
     d6a:	2f e0       	ldi	r18, 0x0F	; 15
     d6c:	92 07       	cpc	r25, r18
     d6e:	21 f0       	breq	.+8      	; 0xd78 <setState+0x5e>
     d70:	80 37       	cpi	r24, 0x70	; 112
     d72:	9f 40       	sbci	r25, 0x0F	; 15
     d74:	a1 f0       	breq	.+40     	; 0xd9e <setState+0x84>
     d76:	33 c0       	rjmp	.+102    	; 0xdde <setState+0xc4>
	{
		case ONE: //Taste 1 //0,1
	    alcoholmode=0;
     d78:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <alcoholmode>
		state=1;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
		break;
     d82:	08 95       	ret
		
		case TWO: //Taste 2  //0,2
	    alcoholmode=1;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <alcoholmode>
	    state=1;
     d8a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
		break;
     d8e:	08 95       	ret

		case THREE: //Taste 3  //0,3
	    alcoholmode=2;
     d90:	82 e0       	ldi	r24, 0x02	; 2
     d92:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <alcoholmode>
        state=1;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
		break;
     d9c:	08 95       	ret
		
		case FOUR: //Taste 4  //0,4
		alcoholmode=3;
     d9e:	83 e0       	ldi	r24, 0x03	; 3
     da0:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <alcoholmode>
	    state=1;        
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
		break;
     daa:	08 95       	ret
		
		case FIVE: //Taste 5   //0,5
	    alcoholmode=4;
     dac:	84 e0       	ldi	r24, 0x04	; 4
     dae:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <alcoholmode>
	    state=1;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
		break;
     db8:	08 95       	ret

		case SIX: //Taste 6    //0,6
	    alcoholmode=5;
     dba:	85 e0       	ldi	r24, 0x05	; 5
     dbc:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <alcoholmode>
	    state=1;       
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
		break;
     dc6:	08 95       	ret
		
		case SEVEN: //Taste 7
        state=3;  //akkuanzeige
     dc8:	83 e0       	ldi	r24, 0x03	; 3
     dca:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
		break;
     dce:	08 95       	ret
        
		case EIGHT: //Taste 8
        state=2;  //debug
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
        break;
     dd6:	08 95       	ret
		
		case NINE: //Taste 9
		state=0;  //cspin
     dd8:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <state>
		break;
     ddc:	08 95       	ret
		case EQ: //Taste EQ
		//belegt durch tara
		break;
		
		default:
		state=0;   //cspin
     dde:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <state>
     de2:	08 95       	ret

00000de4 <taraselection>:
}

void taraselection(int ir,uint8_t adc_val)
{
	
	switch (ir)
     de4:	81 33       	cpi	r24, 0x31	; 49
     de6:	2e e0       	ldi	r18, 0x0E	; 14
     de8:	92 07       	cpc	r25, r18
     dea:	09 f4       	brne	.+2      	; 0xdee <taraselection+0xa>
     dec:	59 c0       	rjmp	.+178    	; 0xea0 <taraselection+0xbc>
     dee:	4c f4       	brge	.+18     	; 0xe02 <taraselection+0x1e>
     df0:	85 31       	cpi	r24, 0x15	; 21
     df2:	2a e0       	ldi	r18, 0x0A	; 10
     df4:	92 07       	cpc	r25, r18
     df6:	91 f1       	breq	.+100    	; 0xe5c <taraselection+0x78>
     df8:	85 35       	cpi	r24, 0x55	; 85
     dfa:	9a 40       	sbci	r25, 0x0A	; 10
     dfc:	09 f4       	brne	.+2      	; 0xe00 <taraselection+0x1c>
     dfe:	61 c0       	rjmp	.+194    	; 0xec2 <taraselection+0xde>
     e00:	71 c0       	rjmp	.+226    	; 0xee4 <taraselection+0x100>
     e02:	80 33       	cpi	r24, 0x30	; 48
     e04:	2f e0       	ldi	r18, 0x0F	; 15
     e06:	92 07       	cpc	r25, r18
     e08:	49 f0       	breq	.+18     	; 0xe1c <taraselection+0x38>
     e0a:	80 37       	cpi	r24, 0x70	; 112
     e0c:	2f e0       	ldi	r18, 0x0F	; 15
     e0e:	92 07       	cpc	r25, r18
     e10:	b1 f1       	breq	.+108    	; 0xe7e <taraselection+0x9a>
     e12:	81 37       	cpi	r24, 0x71	; 113
     e14:	9e 40       	sbci	r25, 0x0E	; 14
     e16:	09 f0       	breq	.+2      	; 0xe1a <taraselection+0x36>
     e18:	65 c0       	rjmp	.+202    	; 0xee4 <taraselection+0x100>
     e1a:	10 c0       	rjmp	.+32     	; 0xe3c <taraselection+0x58>
	{
		case ONE: //Taste 1 //0,1
		adc_offsets[0]=adc_val;
     e1c:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <adc_offsets>
	    alcoholmode=0;
     e20:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <alcoholmode>
		state=1;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
		taramode=0;
     e2a:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <taramode>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     e2e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		adc_offsets[0]=adc_val;
	    alcoholmode=0;
		state=1;
		taramode=0;
		turnofftimer();
		irFlag=0;
     e32:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <irFlag>
		clear();
     e36:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <clear>
		break;
     e3a:	08 95       	ret
		
		case TWO: //Taste 2  //0,2
		adc_offsets[1]=adc_val;
     e3c:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <adc_offsets+0x1>
		alcoholmode=1;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <alcoholmode>
		state=1;
     e46:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
		taramode=0;
     e4a:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <taramode>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     e4e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		adc_offsets[1]=adc_val;
		alcoholmode=1;
		state=1;
		taramode=0;
		turnofftimer();
		irFlag=0;
     e52:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <irFlag>
		clear();		
     e56:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <clear>
		break;
     e5a:	08 95       	ret

		case THREE: //Taste 3  //0,3
		adc_offsets[2]=adc_val;
     e5c:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <adc_offsets+0x2>
		alcoholmode=2;
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <alcoholmode>
		state=1;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
		taramode=0;
     e6c:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <taramode>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     e70:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		adc_offsets[2]=adc_val;
		alcoholmode=2;
		state=1;
		taramode=0;
		turnofftimer();
		irFlag=0;
     e74:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <irFlag>
		clear();
     e78:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <clear>
		break;
     e7c:	08 95       	ret
		
		case FOUR: //Taste 4 //0,4
		adc_offsets[3]=adc_val;
     e7e:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <adc_offsets+0x3>
		alcoholmode=3;
     e82:	83 e0       	ldi	r24, 0x03	; 3
     e84:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <alcoholmode>
		state=1;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
		taramode=0;
     e8e:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <taramode>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     e92:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		adc_offsets[3]=adc_val;
		alcoholmode=3;
		state=1;
		taramode=0;
		turnofftimer();
		irFlag=0;
     e96:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <irFlag>
		clear();
     e9a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <clear>
		break;
     e9e:	08 95       	ret
		
		case FIVE: //Taste 5  //0,5
		adc_offsets[4]=adc_val;
     ea0:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <adc_offsets+0x4>
		alcoholmode=4;
     ea4:	84 e0       	ldi	r24, 0x04	; 4
     ea6:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <alcoholmode>
		state=1;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
		taramode=0;
     eb0:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <taramode>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     eb4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		adc_offsets[4]=adc_val;
		alcoholmode=4;
		state=1;
		taramode=0;
		turnofftimer();
		irFlag=0;
     eb8:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <irFlag>
		clear();
     ebc:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <clear>
		break;
     ec0:	08 95       	ret

		case SIX: //Taste 6  //0,6
		adc_offsets[5]=adc_val;
     ec2:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <adc_offsets+0x5>
		alcoholmode=5;
     ec6:	85 e0       	ldi	r24, 0x05	; 5
     ec8:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <alcoholmode>
		state=1;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
		taramode=0;
     ed2:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <taramode>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     ed6:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		adc_offsets[5]=adc_val;
		alcoholmode=5;
		state=1;
		taramode=0;
		turnofftimer();
		irFlag=0;
     eda:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <irFlag>
		clear();
     ede:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <clear>
		break;
     ee2:	08 95       	ret
		
		default:
		displayMenu(20,20,20); //weiss fuer tara
     ee4:	44 e1       	ldi	r20, 0x14	; 20
     ee6:	64 e1       	ldi	r22, 0x14	; 20
     ee8:	84 e1       	ldi	r24, 0x14	; 20
     eea:	0e 94 bf 05 	call	0xb7e	; 0xb7e <displayMenu>
     eee:	08 95       	ret

00000ef0 <init_ml>:
		break;
	}
}

void init_ml()
{
     ef0:	2f 92       	push	r2
     ef2:	3f 92       	push	r3
     ef4:	4f 92       	push	r4
     ef6:	5f 92       	push	r5
     ef8:	6f 92       	push	r6
     efa:	7f 92       	push	r7
     efc:	8f 92       	push	r8
     efe:	9f 92       	push	r9
     f00:	af 92       	push	r10
     f02:	bf 92       	push	r11
     f04:	cf 92       	push	r12
     f06:	df 92       	push	r13
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
	//uint64_t ml1=(112200)/vcc;    //255* 438mV     438mV entsprechen 500ml      //vcc zwischen 3700 und 4200
	//uint64_t ml2=(112200)/vcc;    //255* 438mV
	//uint64_t ml3=(112200)/vcc;    //255* 438mV 
	ml[0]=149600/vcc;    
     f14:	20 90 50 01 	lds	r2, 0x0150	; 0x800150 <__data_end>
     f18:	30 90 51 01 	lds	r3, 0x0151	; 0x800151 <__data_end+0x1>
     f1c:	40 90 52 01 	lds	r4, 0x0152	; 0x800152 <__data_end+0x2>
     f20:	50 90 53 01 	lds	r5, 0x0153	; 0x800153 <__data_end+0x3>
     f24:	60 90 54 01 	lds	r6, 0x0154	; 0x800154 <__data_end+0x4>
     f28:	70 90 55 01 	lds	r7, 0x0155	; 0x800155 <__data_end+0x5>
     f2c:	80 90 56 01 	lds	r8, 0x0156	; 0x800156 <__data_end+0x6>
     f30:	90 90 57 01 	lds	r9, 0x0157	; 0x800157 <__data_end+0x7>
     f34:	c1 e0       	ldi	r28, 0x01	; 1
     f36:	d1 e0       	ldi	r29, 0x01	; 1
     f38:	a2 2c       	mov	r10, r2
     f3a:	b3 2c       	mov	r11, r3
     f3c:	c4 2c       	mov	r12, r4
     f3e:	d5 2c       	mov	r13, r5
     f40:	e6 2c       	mov	r14, r6
     f42:	f7 2c       	mov	r15, r7
     f44:	08 2d       	mov	r16, r8
     f46:	19 2d       	mov	r17, r9
     f48:	20 e6       	ldi	r18, 0x60	; 96
     f4a:	38 e4       	ldi	r19, 0x48	; 72
     f4c:	42 e0       	ldi	r20, 0x02	; 2
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivdi3>
     f5c:	28 83       	st	Y, r18
	ml[1]=29920/vcc;   
     f5e:	20 ee       	ldi	r18, 0xE0	; 224
     f60:	34 e7       	ldi	r19, 0x74	; 116
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivdi3>
     f72:	29 83       	std	Y+1, r18	; 0x01
	ml[2]=44880/vcc;
     f74:	20 e5       	ldi	r18, 0x50	; 80
     f76:	3f ea       	ldi	r19, 0xAF	; 175
     f78:	40 e0       	ldi	r20, 0x00	; 0
     f7a:	50 e0       	ldi	r21, 0x00	; 0
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivdi3>
     f88:	2a 83       	std	Y+2, r18	; 0x02
	ml[3]=59840/vcc;
     f8a:	20 ec       	ldi	r18, 0xC0	; 192
     f8c:	39 ee       	ldi	r19, 0xE9	; 233
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivdi3>
     f9e:	2b 83       	std	Y+3, r18	; 0x03
	ml[4]=72800/vcc;
     fa0:	20 e6       	ldi	r18, 0x60	; 96
     fa2:	3c e1       	ldi	r19, 0x1C	; 28
     fa4:	41 e0       	ldi	r20, 0x01	; 1
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivdi3>
     fb4:	2c 83       	std	Y+4, r18	; 0x04
	ml[5]=88760/vcc;
     fb6:	28 eb       	ldi	r18, 0xB8	; 184
     fb8:	3a e5       	ldi	r19, 0x5A	; 90
     fba:	41 e0       	ldi	r20, 0x01	; 1
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivdi3>
     fca:	2d 83       	std	Y+5, r18	; 0x05
	
	



}
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	1f 91       	pop	r17
     fd2:	0f 91       	pop	r16
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	df 90       	pop	r13
     fda:	cf 90       	pop	r12
     fdc:	bf 90       	pop	r11
     fde:	af 90       	pop	r10
     fe0:	9f 90       	pop	r9
     fe2:	8f 90       	pop	r8
     fe4:	7f 90       	pop	r7
     fe6:	6f 90       	pop	r6
     fe8:	5f 90       	pop	r5
     fea:	4f 90       	pop	r4
     fec:	3f 90       	pop	r3
     fee:	2f 90       	pop	r2
     ff0:	08 95       	ret

00000ff2 <main>:
void akku_anzeige();
void init_ml();
///////////////////////////////////////////////////////////////////////////////////////////////////
int main(void) {
	//initTimer();
	initADC();
     ff2:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	init_ml();
     ff6:	0e 94 78 07 	call	0xef0	; 0xef0 <init_ml>

	initIR();
     ffa:	0e 94 2e 01 	call	0x25c	; 0x25c <initIR>
	//DDRB |= (1 << 5) | (1 << 4);		   // set PB5 (pin 28) and PC4 (pin 27) for output
    DDRB |= (1 << 1);				        //set PB1 (D9) output for LED ring
     ffe:	21 9a       	sbi	0x04, 1	; 4
	DDRC &= ~(1 << 5); 				        // set PC5 input for ADC 
    1000:	3d 98       	cbi	0x07, 5	; 7
	DDRC &= ~(1 << 4); 				        // set PC4 input for ADC vergleichswert
    1002:	3c 98       	cbi	0x07, 4	; 7

	DDRC &= ~(1 << 1);                       //set PC1 input for IR
    1004:	39 98       	cbi	0x07, 1	; 7
		}
		else
		{
			if (milli-IRmodeStart>500)
			{
				ready=1;
    1006:	77 24       	eor	r7, r7
    1008:	73 94       	inc	r7
    100a:	c0 e5       	ldi	r28, 0x50	; 80
    100c:	d1 e0       	ldi	r29, 0x01	; 1
				{
					colorselection(ir);
				}
				else if (taramode)
				{
					adc_tara=ADCH;
    100e:	0f 2e       	mov	r0, r31
    1010:	f9 e7       	ldi	r31, 0x79	; 121
    1012:	8f 2e       	mov	r8, r31
    1014:	91 2c       	mov	r9, r1
    1016:	f0 2d       	mov	r31, r0

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
    1018:	0f 2e       	mov	r0, r31
    101a:	ff e6       	ldi	r31, 0x6F	; 111
    101c:	2f 2e       	mov	r2, r31
    101e:	31 2c       	mov	r3, r1
    1020:	f0 2d       	mov	r31, r0
				else if (ir!=0 && !colormode && !taramode)
				{
					turnofftimer();
					irFlag=0;
					clear();
					setState (ir);
    1022:	0f 2e       	mov	r0, r31
    1024:	fe e6       	ldi	r31, 0x6E	; 110
    1026:	4f 2e       	mov	r4, r31
    1028:	f1 e0       	ldi	r31, 0x01	; 1
    102a:	5f 2e       	mov	r5, r31
    102c:	f0 2d       	mov	r31, r0
	DDRC &= ~(1 << 1);                       //set PC1 input for IR

	while (1) 
	{
     
	if (irFlag==0) 
    102e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <irFlag>
    1032:	81 11       	cpse	r24, r1
    1034:	1e c0       	rjmp	.+60     	; 0x1072 <main+0x80>
	{
	fillFlag=0;
    1036:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <fillFlag>
	ready=0;
    103a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	switch(state)
    103e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <state>
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	49 f0       	breq	.+18     	; 0x1058 <main+0x66>
    1046:	28 f0       	brcs	.+10     	; 0x1052 <main+0x60>
    1048:	82 30       	cpi	r24, 0x02	; 2
    104a:	49 f0       	breq	.+18     	; 0x105e <main+0x6c>
    104c:	83 30       	cpi	r24, 0x03	; 3
    104e:	71 f0       	breq	.+28     	; 0x106c <main+0x7a>
    1050:	ee cf       	rjmp	.-36     	; 0x102e <main+0x3c>
	{
	
	case 0  :
	c_spin(); 
    1052:	0e 94 60 03 	call	0x6c0	; 0x6c0 <c_spin>
	break;
    1056:	eb cf       	rjmp	.-42     	; 0x102e <main+0x3c>
	
	case 1  :
	adc_anzeige();
    1058:	0e 94 5e 04 	call	0x8bc	; 0x8bc <adc_anzeige>
	break;
    105c:	e8 cf       	rjmp	.-48     	; 0x102e <main+0x3c>
	
	case 2  :
	ReadCommand(0b0110111010101111);
    105e:	6f ea       	ldi	r22, 0xAF	; 175
    1060:	7e e6       	ldi	r23, 0x6E	; 110
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 e6 03 	call	0x7cc	; 0x7cc <ReadCommand>
	break;
    106a:	e1 cf       	rjmp	.-62     	; 0x102e <main+0x3c>
	
	case 3 :
	//ReadCommand(akkuoffset);
	akku_anzeige();
    106c:	0e 94 29 05 	call	0xa52	; 0xa52 <akku_anzeige>
    1070:	de cf       	rjmp	.-68     	; 0x102e <main+0x3c>
	}
	}
	else
	{
		
		if (fillFlag==0)
    1072:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <fillFlag>
    1076:	81 11       	cpse	r24, r1
    1078:	1d c0       	rjmp	.+58     	; 0x10b4 <main+0xc2>
		{
			
		    displayMenu(0,10,15); //tuerkis fuer tara
    107a:	4f e0       	ldi	r20, 0x0F	; 15
    107c:	6a e0       	ldi	r22, 0x0A	; 10
    107e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <displayMenu>
			fillFlag=1;
    1082:	70 92 72 01 	sts	0x0172, r7	; 0x800172 <fillFlag>
			initTimer();
    1086:	0e 94 03 09 	call	0x1206	; 0x1206 <initTimer>
			IRmodeStart=milli;
    108a:	00 91 a0 01 	lds	r16, 0x01A0	; 0x8001a0 <milli>
    108e:	10 91 a1 01 	lds	r17, 0x01A1	; 0x8001a1 <milli+0x1>
    1092:	00 93 8d 01 	sts	0x018D, r16	; 0x80018d <IRmodeStart>
    1096:	10 93 8e 01 	sts	0x018E, r17	; 0x80018e <IRmodeStart+0x1>
    109a:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <IRmodeStart+0x2>
    109e:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <IRmodeStart+0x3>
    10a2:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <IRmodeStart+0x4>
    10a6:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <IRmodeStart+0x5>
    10aa:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <IRmodeStart+0x6>
    10ae:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <IRmodeStart+0x7>
    10b2:	bd cf       	rjmp	.-134    	; 0x102e <main+0x3c>
		}
		else
		{
			if (milli-IRmodeStart>500)
    10b4:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <milli>
    10b8:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <milli+0x1>
    10bc:	a0 90 8d 01 	lds	r10, 0x018D	; 0x80018d <IRmodeStart>
    10c0:	b0 90 8e 01 	lds	r11, 0x018E	; 0x80018e <IRmodeStart+0x1>
    10c4:	c0 90 8f 01 	lds	r12, 0x018F	; 0x80018f <IRmodeStart+0x2>
    10c8:	d0 90 90 01 	lds	r13, 0x0190	; 0x800190 <IRmodeStart+0x3>
    10cc:	e0 90 91 01 	lds	r14, 0x0191	; 0x800191 <IRmodeStart+0x4>
    10d0:	f0 90 92 01 	lds	r15, 0x0192	; 0x800192 <IRmodeStart+0x5>
    10d4:	00 91 93 01 	lds	r16, 0x0193	; 0x800193 <IRmodeStart+0x6>
    10d8:	10 91 94 01 	lds	r17, 0x0194	; 0x800194 <IRmodeStart+0x7>
    10dc:	a9 01       	movw	r20, r18
    10de:	35 2f       	mov	r19, r21
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 2d 0a 	call	0x145a	; 0x145a <__subdi3>
    10f0:	24 3f       	cpi	r18, 0xF4	; 244
    10f2:	31 40       	sbci	r19, 0x01	; 1
    10f4:	41 05       	cpc	r20, r1
    10f6:	51 05       	cpc	r21, r1
    10f8:	61 05       	cpc	r22, r1
    10fa:	71 05       	cpc	r23, r1
    10fc:	81 05       	cpc	r24, r1
    10fe:	91 05       	cpc	r25, r1
    1100:	09 f0       	breq	.+2      	; 0x1104 <main+0x112>
    1102:	08 f4       	brcc	.+2      	; 0x1106 <main+0x114>
    1104:	94 cf       	rjmp	.-216    	; 0x102e <main+0x3c>
			{
				ready=1;
    1106:	70 92 00 01 	sts	0x0100, r7	; 0x800100 <__data_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    110a:	ff e7       	ldi	r31, 0x7F	; 127
    110c:	28 e3       	ldi	r18, 0x38	; 56
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	f1 50       	subi	r31, 0x01	; 1
    1112:	20 40       	sbci	r18, 0x00	; 0
    1114:	80 40       	sbci	r24, 0x00	; 0
    1116:	e1 f7       	brne	.-8      	; 0x1110 <main+0x11e>
    1118:	00 c0       	rjmp	.+0      	; 0x111a <main+0x128>
    111a:	00 00       	nop
				_delay_ms(50);
				ir = getIRCommandRec();
    111c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <getIRCommandRec>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <ir>
    1128:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <ir+0x1>
    112c:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <ir+0x2>
    1130:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <ir+0x3>
    1134:	e6 e2       	ldi	r30, 0x26	; 38
    1136:	f1 e0       	ldi	r31, 0x01	; 1
    1138:	20 e0       	ldi	r18, 0x00	; 0
				int d;
				validinput=0;
				for (d=0;d<21;d++)
				{
					if (ir==validcodes[d])
    113a:	41 91       	ld	r20, Z+
    113c:	51 91       	ld	r21, Z+
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	84 17       	cp	r24, r20
    1144:	95 07       	cpc	r25, r21
    1146:	a6 07       	cpc	r26, r22
    1148:	b7 07       	cpc	r27, r23
    114a:	09 f4       	brne	.+2      	; 0x114e <main+0x15c>
					{
						validinput=1;
    114c:	27 2d       	mov	r18, r7
				ready=1;
				_delay_ms(50);
				ir = getIRCommandRec();
				int d;
				validinput=0;
				for (d=0;d<21;d++)
    114e:	ec 17       	cp	r30, r28
    1150:	fd 07       	cpc	r31, r29
    1152:	99 f7       	brne	.-26     	; 0x113a <main+0x148>
    1154:	20 93 6c 01 	sts	0x016C, r18	; 0x80016c <validinput>
						validinput=1;
					}
				}
				
								
				if (validinput)
    1158:	22 23       	and	r18, r18
    115a:	09 f4       	brne	.+2      	; 0x115e <main+0x16c>
    115c:	68 cf       	rjmp	.-304    	; 0x102e <main+0x3c>
				{
							
				if (ir==VOLPLUS && !colormode && !taramode)  //if taste6 color mode  
    115e:	84 39       	cpi	r24, 0x94	; 148
    1160:	eb e0       	ldi	r30, 0x0B	; 11
    1162:	9e 07       	cpc	r25, r30
    1164:	a1 05       	cpc	r26, r1
    1166:	b1 05       	cpc	r27, r1
    1168:	69 f4       	brne	.+26     	; 0x1184 <main+0x192>
    116a:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <colormode>
    116e:	21 11       	cpse	r18, r1
    1170:	3b c0       	rjmp	.+118    	; 0x11e8 <main+0x1f6>
    1172:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <taramode>
    1176:	21 11       	cpse	r18, r1
    1178:	23 c0       	rjmp	.+70     	; 0x11c0 <main+0x1ce>
				{
				colormode=1;
    117a:	70 92 6d 01 	sts	0x016D, r7	; 0x80016d <colormode>
				displayPalette();	
    117e:	0e 94 8b 05 	call	0xb16	; 0xb16 <displayPalette>
    1182:	55 cf       	rjmp	.-342    	; 0x102e <main+0x3c>
								
				}
				else if (ir==EQ && !taramode && !colormode)  //TODO: put taramode on different pin
    1184:	81 36       	cpi	r24, 0x61	; 97
    1186:	fe e0       	ldi	r31, 0x0E	; 14
    1188:	9f 07       	cpc	r25, r31
    118a:	a1 05       	cpc	r26, r1
    118c:	b1 05       	cpc	r27, r1
    118e:	81 f4       	brne	.+32     	; 0x11b0 <main+0x1be>
    1190:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <taramode>
    1194:	21 11       	cpse	r18, r1
    1196:	10 c0       	rjmp	.+32     	; 0x11b8 <main+0x1c6>
    1198:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <colormode>
    119c:	21 11       	cpse	r18, r1
    119e:	24 c0       	rjmp	.+72     	; 0x11e8 <main+0x1f6>
				{
				taramode=1;
    11a0:	70 92 6b 01 	sts	0x016B, r7	; 0x80016b <taramode>
				displayMenu(20,20,20); //weiss fuer tara
    11a4:	44 e1       	ldi	r20, 0x14	; 20
    11a6:	64 e1       	ldi	r22, 0x14	; 20
    11a8:	84 e1       	ldi	r24, 0x14	; 20
    11aa:	0e 94 bf 05 	call	0xb7e	; 0xb7e <displayMenu>
    11ae:	3f cf       	rjmp	.-386    	; 0x102e <main+0x3c>
					
				}
				else if (ir!=0 && !colormode && !taramode)
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	a1 05       	cpc	r26, r1
    11b4:	b1 05       	cpc	r27, r1
    11b6:	a1 f0       	breq	.+40     	; 0x11e0 <main+0x1ee>
    11b8:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <colormode>
    11bc:	21 11       	cpse	r18, r1
    11be:	14 c0       	rjmp	.+40     	; 0x11e8 <main+0x1f6>
    11c0:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <taramode>
    11c4:	21 11       	cpse	r18, r1
    11c6:	18 c0       	rjmp	.+48     	; 0x11f8 <main+0x206>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
    11c8:	f1 01       	movw	r30, r2
    11ca:	10 82       	st	Z, r1
					
				}
				else if (ir!=0 && !colormode && !taramode)
				{
					turnofftimer();
					irFlag=0;
    11cc:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <irFlag>
					clear();
    11d0:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <clear>
					setState (ir);
    11d4:	f2 01       	movw	r30, r4
    11d6:	80 81       	ld	r24, Z
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    11da:	0e 94 8d 06 	call	0xd1a	; 0xd1a <setState>
    11de:	27 cf       	rjmp	.-434    	; 0x102e <main+0x3c>

				}
				else if (colormode)
    11e0:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <colormode>
    11e4:	22 23       	and	r18, r18
    11e6:	19 f0       	breq	.+6      	; 0x11ee <main+0x1fc>
				{
					colorselection(ir);
    11e8:	0e 94 d6 05 	call	0xbac	; 0xbac <colorselection>
    11ec:	20 cf       	rjmp	.-448    	; 0x102e <main+0x3c>
				}
				else if (taramode)
    11ee:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <taramode>
    11f2:	22 23       	and	r18, r18
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <main+0x206>
    11f6:	1b cf       	rjmp	.-458    	; 0x102e <main+0x3c>
				{
					adc_tara=ADCH;
    11f8:	f4 01       	movw	r30, r8
    11fa:	60 81       	ld	r22, Z
    11fc:	60 93 69 01 	sts	0x0169, r22	; 0x800169 <adc_tara>
					taraselection(ir,adc_tara);
    1200:	0e 94 f2 06 	call	0xde4	; 0xde4 <taraselection>
    1204:	14 cf       	rjmp	.-472    	; 0x102e <main+0x3c>

00001206 <initTimer>:
}

void TimerIR()
{
	TIMSK1 = 0b00000010;
	sei();
    1206:	82 e0       	ldi	r24, 0x02	; 2
    1208:	84 bd       	out	0x24, r24	; 36
    120a:	95 e0       	ldi	r25, 0x05	; 5
    120c:	95 bd       	out	0x25, r25	; 37
    120e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1212:	9a e0       	ldi	r25, 0x0A	; 10
    1214:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1218:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    121c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1220:	80 e8       	ldi	r24, 0x80	; 128
    1222:	87 bd       	out	0x27, r24	; 39
    1224:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1228:	84 e6       	ldi	r24, 0x64	; 100
    122a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    122e:	78 94       	sei
    1230:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <millisekunden+0x1>
    1234:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <millisekunden>
    1238:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <sekunde+0x1>
    123c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <sekunde>
    1240:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <minute+0x1>
    1244:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <minute>
    1248:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <stunde+0x1>
    124c:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <stunde>
    1250:	08 95       	ret

00001252 <__vector_14>:
}
///////////////////////////////////////////////////////////////////////////////////////////////////
ISR(TIMER0_COMPA_vect) { //muss irgendwie definiert werden sonst klappt nicht
    1252:	1f 92       	push	r1
    1254:	0f 92       	push	r0
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	0f 92       	push	r0
    125a:	11 24       	eor	r1, r1

}
    125c:	0f 90       	pop	r0
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	0f 90       	pop	r0
    1262:	1f 90       	pop	r1
    1264:	18 95       	reti

00001266 <__vector_11>:

///////////////////////////////////////////////////////////////////////////////////////////////////
ISR(TIMER1_COMPA_vect) {
    1266:	1f 92       	push	r1
    1268:	0f 92       	push	r0
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	0f 92       	push	r0
    126e:	11 24       	eor	r1, r1
    1270:	2f 93       	push	r18
    1272:	8f 93       	push	r24
    1274:	9f 93       	push	r25
	cli();
    1276:	f8 94       	cli
	
    milli++;
    1278:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <milli>
    127c:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <milli+0x1>
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <milli+0x1>
    1286:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <milli>
	millisekunden++;
    128a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <millisekunden>
    128e:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <millisekunden+0x1>
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <millisekunden+0x1>
    1298:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <millisekunden>
	if(millisekunden == 1000)
    129c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <millisekunden>
    12a0:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <millisekunden+0x1>
    12a4:	88 3e       	cpi	r24, 0xE8	; 232
    12a6:	93 40       	sbci	r25, 0x03	; 3
    12a8:	e9 f5       	brne	.+122    	; 0x1324 <__vector_11+0xbe>
	{
		
		
		sekunde++;
    12aa:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <sekunde>
    12ae:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <sekunde+0x1>
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <sekunde+0x1>
    12b8:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <sekunde>
		millisekunden = 0;
    12bc:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <millisekunden+0x1>
    12c0:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <millisekunden>
		if(sekunde == 60)
    12c4:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <sekunde>
    12c8:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <sekunde+0x1>
    12cc:	cc 97       	sbiw	r24, 0x3c	; 60
    12ce:	69 f4       	brne	.+26     	; 0x12ea <__vector_11+0x84>
		{
			minute++;
    12d0:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <minute>
    12d4:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <minute+0x1>
    12d8:	01 96       	adiw	r24, 0x01	; 1
    12da:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <minute+0x1>
    12de:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <minute>
			sekunde = 0;
    12e2:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <sekunde+0x1>
    12e6:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <sekunde>
		}
		if(minute == 60)
    12ea:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <minute>
    12ee:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <minute+0x1>
    12f2:	cc 97       	sbiw	r24, 0x3c	; 60
    12f4:	69 f4       	brne	.+26     	; 0x1310 <__vector_11+0xaa>
		{
			stunde++;
    12f6:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <stunde>
    12fa:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <stunde+0x1>
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <stunde+0x1>
    1304:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <stunde>
			minute = 0;
    1308:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <minute+0x1>
    130c:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <minute>
		}
		if(stunde == 24)
    1310:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <stunde>
    1314:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <stunde+0x1>
    1318:	48 97       	sbiw	r24, 0x18	; 24
    131a:	21 f4       	brne	.+8      	; 0x1324 <__vector_11+0xbe>
		{
			stunde = 0;
    131c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <stunde+0x1>
    1320:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <stunde>
		}
	}
	sei();
    1324:	78 94       	sei
}
    1326:	9f 91       	pop	r25
    1328:	8f 91       	pop	r24
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <__divmodhi4>:
    1336:	97 fb       	bst	r25, 7
    1338:	07 2e       	mov	r0, r23
    133a:	16 f4       	brtc	.+4      	; 0x1340 <__divmodhi4+0xa>
    133c:	00 94       	com	r0
    133e:	07 d0       	rcall	.+14     	; 0x134e <__divmodhi4_neg1>
    1340:	77 fd       	sbrc	r23, 7
    1342:	09 d0       	rcall	.+18     	; 0x1356 <__divmodhi4_neg2>
    1344:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmodhi4>
    1348:	07 fc       	sbrc	r0, 7
    134a:	05 d0       	rcall	.+10     	; 0x1356 <__divmodhi4_neg2>
    134c:	3e f4       	brtc	.+14     	; 0x135c <__divmodhi4_exit>

0000134e <__divmodhi4_neg1>:
    134e:	90 95       	com	r25
    1350:	81 95       	neg	r24
    1352:	9f 4f       	sbci	r25, 0xFF	; 255
    1354:	08 95       	ret

00001356 <__divmodhi4_neg2>:
    1356:	70 95       	com	r23
    1358:	61 95       	neg	r22
    135a:	7f 4f       	sbci	r23, 0xFF	; 255

0000135c <__divmodhi4_exit>:
    135c:	08 95       	ret

0000135e <__divmodsi4>:
    135e:	05 2e       	mov	r0, r21
    1360:	97 fb       	bst	r25, 7
    1362:	1e f4       	brtc	.+6      	; 0x136a <__divmodsi4+0xc>
    1364:	00 94       	com	r0
    1366:	0e 94 c6 09 	call	0x138c	; 0x138c <__negsi2>
    136a:	57 fd       	sbrc	r21, 7
    136c:	07 d0       	rcall	.+14     	; 0x137c <__divmodsi4_neg2>
    136e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__udivmodsi4>
    1372:	07 fc       	sbrc	r0, 7
    1374:	03 d0       	rcall	.+6      	; 0x137c <__divmodsi4_neg2>
    1376:	4e f4       	brtc	.+18     	; 0x138a <__divmodsi4_exit>
    1378:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__negsi2>

0000137c <__divmodsi4_neg2>:
    137c:	50 95       	com	r21
    137e:	40 95       	com	r20
    1380:	30 95       	com	r19
    1382:	21 95       	neg	r18
    1384:	3f 4f       	sbci	r19, 0xFF	; 255
    1386:	4f 4f       	sbci	r20, 0xFF	; 255
    1388:	5f 4f       	sbci	r21, 0xFF	; 255

0000138a <__divmodsi4_exit>:
    138a:	08 95       	ret

0000138c <__negsi2>:
    138c:	90 95       	com	r25
    138e:	80 95       	com	r24
    1390:	70 95       	com	r23
    1392:	61 95       	neg	r22
    1394:	7f 4f       	sbci	r23, 0xFF	; 255
    1396:	8f 4f       	sbci	r24, 0xFF	; 255
    1398:	9f 4f       	sbci	r25, 0xFF	; 255
    139a:	08 95       	ret

0000139c <__umoddi3>:
    139c:	68 94       	set
    139e:	01 c0       	rjmp	.+2      	; 0x13a2 <__udivdi3_umoddi3>

000013a0 <__udivdi3>:
    13a0:	e8 94       	clt

000013a2 <__udivdi3_umoddi3>:
    13a2:	8f 92       	push	r8
    13a4:	9f 92       	push	r9
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__udivmod64>
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	9f 90       	pop	r9
    13b4:	8f 90       	pop	r8
    13b6:	08 95       	ret

000013b8 <__udivmod64>:
    13b8:	88 24       	eor	r8, r8
    13ba:	99 24       	eor	r9, r9
    13bc:	f4 01       	movw	r30, r8
    13be:	e4 01       	movw	r28, r8
    13c0:	b0 e4       	ldi	r27, 0x40	; 64
    13c2:	9f 93       	push	r25
    13c4:	aa 27       	eor	r26, r26
    13c6:	9a 15       	cp	r25, r10
    13c8:	8b 04       	cpc	r8, r11
    13ca:	9c 04       	cpc	r9, r12
    13cc:	ed 05       	cpc	r30, r13
    13ce:	fe 05       	cpc	r31, r14
    13d0:	cf 05       	cpc	r28, r15
    13d2:	d0 07       	cpc	r29, r16
    13d4:	a1 07       	cpc	r26, r17
    13d6:	98 f4       	brcc	.+38     	; 0x13fe <__udivmod64+0x46>
    13d8:	ad 2f       	mov	r26, r29
    13da:	dc 2f       	mov	r29, r28
    13dc:	cf 2f       	mov	r28, r31
    13de:	fe 2f       	mov	r31, r30
    13e0:	e9 2d       	mov	r30, r9
    13e2:	98 2c       	mov	r9, r8
    13e4:	89 2e       	mov	r8, r25
    13e6:	98 2f       	mov	r25, r24
    13e8:	87 2f       	mov	r24, r23
    13ea:	76 2f       	mov	r23, r22
    13ec:	65 2f       	mov	r22, r21
    13ee:	54 2f       	mov	r21, r20
    13f0:	43 2f       	mov	r20, r19
    13f2:	32 2f       	mov	r19, r18
    13f4:	22 27       	eor	r18, r18
    13f6:	b8 50       	subi	r27, 0x08	; 8
    13f8:	31 f7       	brne	.-52     	; 0x13c6 <__udivmod64+0xe>
    13fa:	bf 91       	pop	r27
    13fc:	27 c0       	rjmp	.+78     	; 0x144c <__udivmod64+0x94>
    13fe:	1b 2e       	mov	r1, r27
    1400:	bf 91       	pop	r27
    1402:	bb 27       	eor	r27, r27
    1404:	22 0f       	add	r18, r18
    1406:	33 1f       	adc	r19, r19
    1408:	44 1f       	adc	r20, r20
    140a:	55 1f       	adc	r21, r21
    140c:	66 1f       	adc	r22, r22
    140e:	77 1f       	adc	r23, r23
    1410:	88 1f       	adc	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	88 1c       	adc	r8, r8
    1416:	99 1c       	adc	r9, r9
    1418:	ee 1f       	adc	r30, r30
    141a:	ff 1f       	adc	r31, r31
    141c:	cc 1f       	adc	r28, r28
    141e:	dd 1f       	adc	r29, r29
    1420:	aa 1f       	adc	r26, r26
    1422:	bb 1f       	adc	r27, r27
    1424:	8a 14       	cp	r8, r10
    1426:	9b 04       	cpc	r9, r11
    1428:	ec 05       	cpc	r30, r12
    142a:	fd 05       	cpc	r31, r13
    142c:	ce 05       	cpc	r28, r14
    142e:	df 05       	cpc	r29, r15
    1430:	a0 07       	cpc	r26, r16
    1432:	b1 07       	cpc	r27, r17
    1434:	48 f0       	brcs	.+18     	; 0x1448 <__udivmod64+0x90>
    1436:	8a 18       	sub	r8, r10
    1438:	9b 08       	sbc	r9, r11
    143a:	ec 09       	sbc	r30, r12
    143c:	fd 09       	sbc	r31, r13
    143e:	ce 09       	sbc	r28, r14
    1440:	df 09       	sbc	r29, r15
    1442:	a0 0b       	sbc	r26, r16
    1444:	b1 0b       	sbc	r27, r17
    1446:	21 60       	ori	r18, 0x01	; 1
    1448:	1a 94       	dec	r1
    144a:	e1 f6       	brne	.-72     	; 0x1404 <__udivmod64+0x4c>
    144c:	2e f4       	brtc	.+10     	; 0x1458 <__udivmod64+0xa0>
    144e:	94 01       	movw	r18, r8
    1450:	af 01       	movw	r20, r30
    1452:	be 01       	movw	r22, r28
    1454:	cd 01       	movw	r24, r26
    1456:	00 0c       	add	r0, r0
    1458:	08 95       	ret

0000145a <__subdi3>:
    145a:	2a 19       	sub	r18, r10
    145c:	3b 09       	sbc	r19, r11
    145e:	4c 09       	sbc	r20, r12
    1460:	5d 09       	sbc	r21, r13
    1462:	6e 09       	sbc	r22, r14
    1464:	7f 09       	sbc	r23, r15
    1466:	80 0b       	sbc	r24, r16
    1468:	91 0b       	sbc	r25, r17
    146a:	08 95       	ret

0000146c <__cmpdi2_s8>:
    146c:	00 24       	eor	r0, r0
    146e:	a7 fd       	sbrc	r26, 7
    1470:	00 94       	com	r0
    1472:	2a 17       	cp	r18, r26
    1474:	30 05       	cpc	r19, r0
    1476:	40 05       	cpc	r20, r0
    1478:	50 05       	cpc	r21, r0
    147a:	60 05       	cpc	r22, r0
    147c:	70 05       	cpc	r23, r0
    147e:	80 05       	cpc	r24, r0
    1480:	90 05       	cpc	r25, r0
    1482:	08 95       	ret

00001484 <__udivmodhi4>:
    1484:	aa 1b       	sub	r26, r26
    1486:	bb 1b       	sub	r27, r27
    1488:	51 e1       	ldi	r21, 0x11	; 17
    148a:	07 c0       	rjmp	.+14     	; 0x149a <__udivmodhi4_ep>

0000148c <__udivmodhi4_loop>:
    148c:	aa 1f       	adc	r26, r26
    148e:	bb 1f       	adc	r27, r27
    1490:	a6 17       	cp	r26, r22
    1492:	b7 07       	cpc	r27, r23
    1494:	10 f0       	brcs	.+4      	; 0x149a <__udivmodhi4_ep>
    1496:	a6 1b       	sub	r26, r22
    1498:	b7 0b       	sbc	r27, r23

0000149a <__udivmodhi4_ep>:
    149a:	88 1f       	adc	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	5a 95       	dec	r21
    14a0:	a9 f7       	brne	.-22     	; 0x148c <__udivmodhi4_loop>
    14a2:	80 95       	com	r24
    14a4:	90 95       	com	r25
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	08 95       	ret

000014ac <__udivmodsi4>:
    14ac:	a1 e2       	ldi	r26, 0x21	; 33
    14ae:	1a 2e       	mov	r1, r26
    14b0:	aa 1b       	sub	r26, r26
    14b2:	bb 1b       	sub	r27, r27
    14b4:	fd 01       	movw	r30, r26
    14b6:	0d c0       	rjmp	.+26     	; 0x14d2 <__udivmodsi4_ep>

000014b8 <__udivmodsi4_loop>:
    14b8:	aa 1f       	adc	r26, r26
    14ba:	bb 1f       	adc	r27, r27
    14bc:	ee 1f       	adc	r30, r30
    14be:	ff 1f       	adc	r31, r31
    14c0:	a2 17       	cp	r26, r18
    14c2:	b3 07       	cpc	r27, r19
    14c4:	e4 07       	cpc	r30, r20
    14c6:	f5 07       	cpc	r31, r21
    14c8:	20 f0       	brcs	.+8      	; 0x14d2 <__udivmodsi4_ep>
    14ca:	a2 1b       	sub	r26, r18
    14cc:	b3 0b       	sbc	r27, r19
    14ce:	e4 0b       	sbc	r30, r20
    14d0:	f5 0b       	sbc	r31, r21

000014d2 <__udivmodsi4_ep>:
    14d2:	66 1f       	adc	r22, r22
    14d4:	77 1f       	adc	r23, r23
    14d6:	88 1f       	adc	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	1a 94       	dec	r1
    14dc:	69 f7       	brne	.-38     	; 0x14b8 <__udivmodsi4_loop>
    14de:	60 95       	com	r22
    14e0:	70 95       	com	r23
    14e2:	80 95       	com	r24
    14e4:	90 95       	com	r25
    14e6:	9b 01       	movw	r18, r22
    14e8:	ac 01       	movw	r20, r24
    14ea:	bd 01       	movw	r22, r26
    14ec:	cf 01       	movw	r24, r30
    14ee:	08 95       	ret

000014f0 <_exit>:
    14f0:	f8 94       	cli

000014f2 <__stop_program>:
    14f2:	ff cf       	rjmp	.-2      	; 0x14f2 <__stop_program>

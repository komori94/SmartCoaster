
SmartCoaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  0000192c  000019c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000192c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  00800158  00800158  00001a18  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f66  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd0  00000000  00000000  00003b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000141b  00000000  00000000  00004866  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  00005c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b6  00000000  00000000  00006110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000187e  00000000  00000000  000068c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00008144  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 ae 09 	jmp	0x135c	; 0x135c <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e2       	ldi	r30, 0x2C	; 44
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 35       	cpi	r26, 0x58	; 88
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a8 e5       	ldi	r26, 0x58	; 88
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 3b       	cpi	r26, 0xB3	; 179
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 79 08 	call	0x10f2	; 0x10f2 <main>
      9e:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
uint8_t state=20;
uint8_t akkuoffset=0;
uint64_t vcc = 0;

void initADC()
{
      a6:	7f 92       	push	r7
      a8:	8f 92       	push	r8
      aa:	9f 92       	push	r9
      ac:	af 92       	push	r10
      ae:	bf 92       	push	r11
      b0:	cf 92       	push	r12
      b2:	df 92       	push	r13
      b4:	ef 92       	push	r14
      b6:	ff 92       	push	r15
      b8:	0f 93       	push	r16
      ba:	1f 93       	push	r17
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
	ADMUX = 0b01100100; //PC4
      c0:	84 e6       	ldi	r24, 0x64	; 100
      c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = 0b10100011;
      c6:	ea e7       	ldi	r30, 0x7A	; 122
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	83 ea       	ldi	r24, 0xA3	; 163
      cc:	80 83       	st	Z, r24
	ADCSRB = 0b00000000;
      ce:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
	PCICR = 0b00000100;
      d2:	84 e0       	ldi	r24, 0x04	; 4
      d4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
	PCMSK2 = 0b00000100;
      d8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
	sei();
      dc:	78 94       	sei
	ADCSRA |= (1 << ADSC);		// start ADC
      de:	80 81       	ld	r24, Z
      e0:	80 64       	ori	r24, 0x40	; 64
      e2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e4:	2f ef       	ldi	r18, 0xFF	; 255
      e6:	84 e3       	ldi	r24, 0x34	; 52
      e8:	9c e0       	ldi	r25, 0x0C	; 12
      ea:	21 50       	subi	r18, 0x01	; 1
      ec:	80 40       	sbci	r24, 0x00	; 0
      ee:	90 40       	sbci	r25, 0x00	; 0
      f0:	e1 f7       	brne	.-8      	; 0xea <initADC+0x44>
      f2:	00 c0       	rjmp	.+0      	; 0xf4 <initADC+0x4e>
      f4:	00 00       	nop
	
	
	_delay_ms(500);
	uint8_t temp=ADCH;
      f6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	
	if (temp>0)
      fa:	22 23       	and	r18, r18
      fc:	d9 f1       	breq	.+118    	; 0x174 <initADC+0xce>
	{
		vcc= 192000/temp;  //885mv ref mal 255 = 218025 max, aber selbst ausgerechnet mit 4,2V ist 190000 = 255 * 752mV
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	40 e0       	ldi	r20, 0x00	; 0
     102:	50 e0       	ldi	r21, 0x00	; 0
     104:	60 e0       	ldi	r22, 0x00	; 0
     106:	7e ee       	ldi	r23, 0xEE	; 238
     108:	82 e0       	ldi	r24, 0x02	; 2
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__divmodsi4>
     110:	69 01       	movw	r12, r18
     112:	7a 01       	movw	r14, r20
     114:	02 2f       	mov	r16, r18
     116:	1d 2d       	mov	r17, r13
     118:	de 2d       	mov	r29, r14
     11a:	cf 2d       	mov	r28, r15
     11c:	49 01       	movw	r8, r18
     11e:	5a 01       	movw	r10, r20
     120:	bb 0c       	add	r11, r11
     122:	88 08       	sbc	r8, r8
     124:	98 2c       	mov	r9, r8
     126:	54 01       	movw	r10, r8
     128:	b8 2d       	mov	r27, r8
     12a:	a8 2d       	mov	r26, r8
     12c:	f8 2d       	mov	r31, r8
     12e:	78 2c       	mov	r7, r8
     130:	20 93 58 01 	sts	0x0158, r18	; 0x800158 <__data_end>
     134:	d0 92 59 01 	sts	0x0159, r13	; 0x800159 <__data_end+0x1>
     138:	e0 92 5a 01 	sts	0x015A, r14	; 0x80015a <__data_end+0x2>
     13c:	f0 92 5b 01 	sts	0x015B, r15	; 0x80015b <__data_end+0x3>
     140:	80 92 5c 01 	sts	0x015C, r8	; 0x80015c <__data_end+0x4>
     144:	80 92 5d 01 	sts	0x015D, r8	; 0x80015d <__data_end+0x5>
     148:	80 92 5e 01 	sts	0x015E, r8	; 0x80015e <__data_end+0x6>
     14c:	80 92 5f 01 	sts	0x015F, r8	; 0x80015f <__data_end+0x7>
	else 
	{
		vcc=4000;
	}
	
	if (vcc>UMAX)
     150:	3d 2d       	mov	r19, r13
     152:	4e 2d       	mov	r20, r14
     154:	5f 2d       	mov	r21, r15
     156:	68 2d       	mov	r22, r8
     158:	78 2d       	mov	r23, r8
     15a:	88 2d       	mov	r24, r8
     15c:	98 2d       	mov	r25, r8
     15e:	28 36       	cpi	r18, 0x68	; 104
     160:	30 41       	sbci	r19, 0x10	; 16
     162:	41 05       	cpc	r20, r1
     164:	51 05       	cpc	r21, r1
     166:	61 05       	cpc	r22, r1
     168:	71 05       	cpc	r23, r1
     16a:	81 05       	cpc	r24, r1
     16c:	91 05       	cpc	r25, r1
     16e:	09 f0       	breq	.+2      	; 0x172 <initADC+0xcc>
     170:	e0 f4       	brcc	.+56     	; 0x1aa <initADC+0x104>
     172:	1f c0       	rjmp	.+62     	; 0x1b2 <initADC+0x10c>
	{
		vcc= 192000/temp;  //885mv ref mal 255 = 218025 max, aber selbst ausgerechnet mit 4,2V ist 190000 = 255 * 752mV
	}
	else 
	{
		vcc=4000;
     174:	80 ea       	ldi	r24, 0xA0	; 160
     176:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <__data_end>
     17a:	8f e0       	ldi	r24, 0x0F	; 15
     17c:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <__data_end+0x1>
     180:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__data_end+0x2>
     184:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <__data_end+0x3>
     188:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end+0x4>
     18c:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <__data_end+0x5>
     190:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <__data_end+0x6>
     194:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <__data_end+0x7>
	}
	
	if (vcc>UMAX)
     198:	00 ea       	ldi	r16, 0xA0	; 160
     19a:	1f e0       	ldi	r17, 0x0F	; 15
     19c:	d0 e0       	ldi	r29, 0x00	; 0
     19e:	c0 e0       	ldi	r28, 0x00	; 0
     1a0:	b0 e0       	ldi	r27, 0x00	; 0
     1a2:	a0 e0       	ldi	r26, 0x00	; 0
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	71 2c       	mov	r7, r1
     1a8:	19 c0       	rjmp	.+50     	; 0x1dc <initADC+0x136>
	{
		akkuoffset = 22;
     1aa:	86 e1       	ldi	r24, 0x16	; 22
     1ac:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <akkuoffset>
     1b0:	34 c0       	rjmp	.+104    	; 0x21a <initADC+0x174>
	}
	else if (vcc<UMIN)
     1b2:	2c 2d       	mov	r18, r12
     1b4:	3d 2d       	mov	r19, r13
     1b6:	4e 2d       	mov	r20, r14
     1b8:	5f 2d       	mov	r21, r15
     1ba:	68 2d       	mov	r22, r8
     1bc:	78 2d       	mov	r23, r8
     1be:	88 2d       	mov	r24, r8
     1c0:	98 2d       	mov	r25, r8
     1c2:	23 37       	cpi	r18, 0x73	; 115
     1c4:	3e 40       	sbci	r19, 0x0E	; 14
     1c6:	41 05       	cpc	r20, r1
     1c8:	51 05       	cpc	r21, r1
     1ca:	61 05       	cpc	r22, r1
     1cc:	71 05       	cpc	r23, r1
     1ce:	81 05       	cpc	r24, r1
     1d0:	91 05       	cpc	r25, r1
     1d2:	09 f0       	breq	.+2      	; 0x1d6 <initADC+0x130>
     1d4:	18 f4       	brcc	.+6      	; 0x1dc <initADC+0x136>
	{
		akkuoffset=0;
     1d6:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <akkuoffset>
     1da:	1f c0       	rjmp	.+62     	; 0x21a <initADC+0x174>
	}
	else
	{
	 akkuoffset = (vcc-UMIN)/((UMAX-UMIN)/22);
     1dc:	20 2f       	mov	r18, r16
     1de:	31 2f       	mov	r19, r17
     1e0:	4d 2f       	mov	r20, r29
     1e2:	5c 2f       	mov	r21, r28
     1e4:	6b 2f       	mov	r22, r27
     1e6:	7a 2f       	mov	r23, r26
     1e8:	8f 2f       	mov	r24, r31
     1ea:	97 2d       	mov	r25, r7
     1ec:	24 57       	subi	r18, 0x74	; 116
     1ee:	3e 40       	sbci	r19, 0x0E	; 14
     1f0:	41 09       	sbc	r20, r1
     1f2:	51 09       	sbc	r21, r1
     1f4:	61 09       	sbc	r22, r1
     1f6:	71 09       	sbc	r23, r1
     1f8:	81 09       	sbc	r24, r1
     1fa:	91 09       	sbc	r25, r1
     1fc:	0f 2e       	mov	r0, r31
     1fe:	f6 e1       	ldi	r31, 0x16	; 22
     200:	af 2e       	mov	r10, r31
     202:	f0 2d       	mov	r31, r0
     204:	b1 2c       	mov	r11, r1
     206:	c1 2c       	mov	r12, r1
     208:	d1 2c       	mov	r13, r1
     20a:	e1 2c       	mov	r14, r1
     20c:	f1 2c       	mov	r15, r1
     20e:	00 e0       	ldi	r16, 0x00	; 0
     210:	10 e0       	ldi	r17, 0x00	; 0
     212:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__udivdi3>
     216:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <akkuoffset>
	}
	
	
	ADCSRA = 0b00000000;
     21a:	ea e7       	ldi	r30, 0x7A	; 122
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	10 82       	st	Z, r1
	ADMUX = 0b01100101;   //PC5
     220:	85 e6       	ldi	r24, 0x65	; 101
     222:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = 0b10101011;   //bit 3 Interupt enabele
     226:	8b ea       	ldi	r24, 0xAB	; 171
     228:	80 83       	st	Z, r24
	ADCSRB = 0b00000000;
     22a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
	PCICR = 0b00000100;
     22e:	84 e0       	ldi	r24, 0x04	; 4
     230:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
	PCMSK2 = 0b00000100;
     234:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
	sei();
     238:	78 94       	sei
	ADCSRA |= (1 << ADSC);		// start ADC
     23a:	80 81       	ld	r24, Z
     23c:	80 64       	ori	r24, 0x40	; 64
     23e:	80 83       	st	Z, r24
	
	
}
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	1f 91       	pop	r17
     246:	0f 91       	pop	r16
     248:	ff 90       	pop	r15
     24a:	ef 90       	pop	r14
     24c:	df 90       	pop	r13
     24e:	cf 90       	pop	r12
     250:	bf 90       	pop	r11
     252:	af 90       	pop	r10
     254:	9f 90       	pop	r9
     256:	8f 90       	pop	r8
     258:	7f 90       	pop	r7
     25a:	08 95       	ret

0000025c <__vector_21>:

ISR(ADC_vect) {
     25c:	1f 92       	push	r1
     25e:	0f 92       	push	r0
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	0f 92       	push	r0
     264:	11 24       	eor	r1, r1
     266:	8f 93       	push	r24
	cli();
     268:	f8 94       	cli
	
	if (ADCH>120)
     26a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     26e:	89 37       	cpi	r24, 0x79	; 121
     270:	18 f0       	brcs	.+6      	; 0x278 <__vector_21+0x1c>
	{
		state=20;
     272:	84 e1       	ldi	r24, 0x14	; 20
     274:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	
	sei();
     278:	78 94       	sei
     27a:	8f 91       	pop	r24
     27c:	0f 90       	pop	r0
     27e:	0f be       	out	0x3f, r0	; 63
     280:	0f 90       	pop	r0
     282:	1f 90       	pop	r1
     284:	18 95       	reti

00000286 <getIRCommandRec>:
	sei();
}

uint32_t getIRCommandRec()  
{
	if (signalready)
     286:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <signalready>
     28a:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <signalready+0x1>
     28e:	40 91 64 01 	lds	r20, 0x0164	; 0x800164 <signalready+0x2>
     292:	50 91 65 01 	lds	r21, 0x0165	; 0x800165 <signalready+0x3>
     296:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <signalready+0x4>
     29a:	70 91 67 01 	lds	r23, 0x0167	; 0x800167 <signalready+0x5>
     29e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <signalready+0x6>
     2a2:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <signalready+0x7>
     2a6:	a0 e0       	ldi	r26, 0x00	; 0
     2a8:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__cmpdi2_s8>
     2ac:	e9 f0       	breq	.+58     	; 0x2e8 <getIRCommandRec+0x62>
	{
		uint64_t temp = dataBuffer;
     2ae:	50 91 8d 01 	lds	r21, 0x018D	; 0x80018d <dataBuffer>
     2b2:	40 91 8e 01 	lds	r20, 0x018E	; 0x80018e <dataBuffer+0x1>
     2b6:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <dataBuffer+0x2>
     2ba:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <dataBuffer+0x3>
		dataBuffer=0;
     2be:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <dataBuffer>
     2c2:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <dataBuffer+0x1>
     2c6:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <dataBuffer+0x2>
     2ca:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <dataBuffer+0x3>
     2ce:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <dataBuffer+0x4>
     2d2:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <dataBuffer+0x5>
     2d6:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <dataBuffer+0x6>
     2da:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <dataBuffer+0x7>
		return temp;
     2de:	65 2f       	mov	r22, r21
     2e0:	74 2f       	mov	r23, r20
     2e2:	83 2f       	mov	r24, r19
     2e4:	92 2f       	mov	r25, r18
     2e6:	08 95       	ret
	}
	else
	{
		return 0;
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     2f0:	08 95       	ret

000002f2 <__vector_4>:

//attached to IR 
ISR(PCINT1_vect)
{
     2f2:	1f 92       	push	r1
     2f4:	0f 92       	push	r0
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	0f 92       	push	r0
     2fa:	11 24       	eor	r1, r1
     2fc:	af 92       	push	r10
     2fe:	bf 92       	push	r11
     300:	cf 92       	push	r12
     302:	df 92       	push	r13
     304:	ef 92       	push	r14
     306:	ff 92       	push	r15
     308:	0f 93       	push	r16
     30a:	1f 93       	push	r17
     30c:	2f 93       	push	r18
     30e:	3f 93       	push	r19
     310:	4f 93       	push	r20
     312:	5f 93       	push	r21
     314:	6f 93       	push	r22
     316:	7f 93       	push	r23
     318:	8f 93       	push	r24
     31a:	9f 93       	push	r25
     31c:	af 93       	push	r26
     31e:	bf 93       	push	r27
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	ef 93       	push	r30
     326:	ff 93       	push	r31
	if(irFlag==0)
     328:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <irFlag>
     32c:	81 11       	cpse	r24, r1
     32e:	24 c0       	rjmp	.+72     	; 0x378 <__vector_4+0x86>
	{
	dataBuffer=0;
     330:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <dataBuffer>
     334:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <dataBuffer+0x1>
     338:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <dataBuffer+0x2>
     33c:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <dataBuffer+0x3>
     340:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <dataBuffer+0x4>
     344:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <dataBuffer+0x5>
     348:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <dataBuffer+0x6>
     34c:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <dataBuffer+0x7>
	irFlag = 1;
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <irFlag>
	signalready=0;
     356:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <signalready>
     35a:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <signalready+0x1>
     35e:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <signalready+0x2>
     362:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <signalready+0x3>
     366:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <signalready+0x4>
     36a:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <signalready+0x5>
     36e:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <signalready+0x6>
     372:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <signalready+0x7>
     376:	f1 c0       	rjmp	.+482    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
	}
	else
	{
		if (ready)
     378:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ready>
     37c:	88 23       	and	r24, r24
     37e:	09 f4       	brne	.+2      	; 0x382 <__vector_4+0x90>
     380:	ec c0       	rjmp	.+472    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
		{
			    timePassed=milli-lastSignal;
     382:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <milli>
     386:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <milli+0x1>
     38a:	a0 90 85 01 	lds	r10, 0x0185	; 0x800185 <lastSignal>
     38e:	b0 90 86 01 	lds	r11, 0x0186	; 0x800186 <lastSignal+0x1>
     392:	c0 90 87 01 	lds	r12, 0x0187	; 0x800187 <lastSignal+0x2>
     396:	d0 90 88 01 	lds	r13, 0x0188	; 0x800188 <lastSignal+0x3>
     39a:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <lastSignal+0x4>
     39e:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <lastSignal+0x5>
     3a2:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <lastSignal+0x6>
     3a6:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <lastSignal+0x7>
     3aa:	28 2f       	mov	r18, r24
     3ac:	39 2f       	mov	r19, r25
     3ae:	40 e0       	ldi	r20, 0x00	; 0
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	70 e0       	ldi	r23, 0x00	; 0
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 49 0c 	call	0x1892	; 0x1892 <__subdi3>
     3be:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <timePassed>
     3c2:	30 93 96 01 	sts	0x0196, r19	; 0x800196 <timePassed+0x1>
     3c6:	40 93 97 01 	sts	0x0197, r20	; 0x800197 <timePassed+0x2>
     3ca:	50 93 98 01 	sts	0x0198, r21	; 0x800198 <timePassed+0x3>
     3ce:	60 93 99 01 	sts	0x0199, r22	; 0x800199 <timePassed+0x4>
     3d2:	70 93 9a 01 	sts	0x019A, r23	; 0x80019a <timePassed+0x5>
     3d6:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <timePassed+0x6>
     3da:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <timePassed+0x7>
				uint8_t pinState = (PINC & (1 << 1)) >> 1; //interrupt pin state
     3de:	e6 b1       	in	r30, 0x06	; 6
     3e0:	e6 95       	lsr	r30
     3e2:	e1 70       	andi	r30, 0x01	; 1
				if (timePassed>1000)
     3e4:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <timePassed>
     3e8:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <timePassed+0x1>
     3ec:	40 91 97 01 	lds	r20, 0x0197	; 0x800197 <timePassed+0x2>
     3f0:	50 91 98 01 	lds	r21, 0x0198	; 0x800198 <timePassed+0x3>
     3f4:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <timePassed+0x4>
     3f8:	70 91 9a 01 	lds	r23, 0x019A	; 0x80019a <timePassed+0x5>
     3fc:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <timePassed+0x6>
     400:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <timePassed+0x7>
     404:	28 3e       	cpi	r18, 0xE8	; 232
     406:	33 40       	sbci	r19, 0x03	; 3
     408:	41 05       	cpc	r20, r1
     40a:	51 05       	cpc	r21, r1
     40c:	61 05       	cpc	r22, r1
     40e:	71 05       	cpc	r23, r1
     410:	81 05       	cpc	r24, r1
     412:	91 05       	cpc	r25, r1
     414:	99 f0       	breq	.+38     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     416:	90 f0       	brcs	.+36     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
				{
					dataBuffer=0;
     418:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <dataBuffer>
     41c:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <dataBuffer+0x1>
     420:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <dataBuffer+0x2>
     424:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <dataBuffer+0x3>
     428:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <dataBuffer+0x4>
     42c:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <dataBuffer+0x5>
     430:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <dataBuffer+0x6>
     434:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <dataBuffer+0x7>
					counter=0;
     438:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <counter>
				}
				signalready=0;
     43c:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <signalready>
     440:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <signalready+0x1>
     444:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <signalready+0x2>
     448:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <signalready+0x3>
     44c:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <signalready+0x4>
     450:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <signalready+0x5>
     454:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <signalready+0x6>
     458:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <signalready+0x7>
				if (pinState==1)
     45c:	e1 30       	cpi	r30, 0x01	; 1
     45e:	09 f0       	breq	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     460:	7c c0       	rjmp	.+248    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
				{
					
				
					if (counter>21 && counter<34) //eigentlich ab 17 aber geht irgendwie nicht
     462:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <counter>
     466:	8a ee       	ldi	r24, 0xEA	; 234
     468:	8e 0f       	add	r24, r30
     46a:	8c 30       	cpi	r24, 0x0C	; 12
     46c:	08 f0       	brcs	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     46e:	49 c0       	rjmp	.+146    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
					{
						if (timePassed>17) //if logic null
     470:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <timePassed>
     474:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <timePassed+0x1>
     478:	40 91 97 01 	lds	r20, 0x0197	; 0x800197 <timePassed+0x2>
     47c:	50 91 98 01 	lds	r21, 0x0198	; 0x800198 <timePassed+0x3>
     480:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <timePassed+0x4>
     484:	70 91 9a 01 	lds	r23, 0x019A	; 0x80019a <timePassed+0x5>
     488:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <timePassed+0x6>
     48c:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <timePassed+0x7>
     490:	a1 e1       	ldi	r26, 0x11	; 17
     492:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__cmpdi2_s8>
     496:	a9 f1       	breq	.+106    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     498:	a0 f1       	brcs	.+104    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
						{
							dataBuffer=dataBuffer | (1<<(counter-22));
     49a:	21 e0       	ldi	r18, 0x01	; 1
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	8a ee       	ldi	r24, 0xEA	; 234
     4a0:	8e 0f       	add	r24, r30
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a4:	22 0f       	add	r18, r18
     4a6:	33 1f       	adc	r19, r19
     4a8:	8a 95       	dec	r24
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     4ac:	83 2f       	mov	r24, r19
     4ae:	88 0f       	add	r24, r24
     4b0:	88 0b       	sbc	r24, r24
     4b2:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <dataBuffer>
     4b6:	92 2b       	or	r25, r18
     4b8:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <dataBuffer>
     4bc:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <dataBuffer+0x1>
     4c0:	93 2b       	or	r25, r19
     4c2:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <dataBuffer+0x1>
     4c6:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <dataBuffer+0x2>
     4ca:	98 2b       	or	r25, r24
     4cc:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <dataBuffer+0x2>
     4d0:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <dataBuffer+0x3>
     4d4:	98 2b       	or	r25, r24
     4d6:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <dataBuffer+0x3>
     4da:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <dataBuffer+0x4>
     4de:	98 2b       	or	r25, r24
     4e0:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <dataBuffer+0x4>
     4e4:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <dataBuffer+0x5>
     4e8:	98 2b       	or	r25, r24
     4ea:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <dataBuffer+0x5>
     4ee:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <dataBuffer+0x6>
     4f2:	98 2b       	or	r25, r24
     4f4:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <dataBuffer+0x6>
     4f8:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <dataBuffer+0x7>
     4fc:	89 2b       	or	r24, r25
     4fe:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <dataBuffer+0x7>
							
						}
						
					}
				counter++;		
     502:	ef 5f       	subi	r30, 0xFF	; 255
     504:	e0 93 61 01 	sts	0x0161, r30	; 0x800161 <counter>
				lastSignal=milli;	
     508:	00 91 b1 01 	lds	r16, 0x01B1	; 0x8001b1 <milli>
     50c:	10 91 b2 01 	lds	r17, 0x01B2	; 0x8001b2 <milli+0x1>
     510:	00 93 85 01 	sts	0x0185, r16	; 0x800185 <lastSignal>
     514:	10 93 86 01 	sts	0x0186, r17	; 0x800186 <lastSignal+0x1>
     518:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <lastSignal+0x2>
     51c:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <lastSignal+0x3>
     520:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <lastSignal+0x4>
     524:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <lastSignal+0x5>
     528:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <lastSignal+0x6>
     52c:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <lastSignal+0x7>
				if (counter==34)
     530:	e2 32       	cpi	r30, 0x22	; 34
     532:	99 f4       	brne	.+38     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
				{
					signalready=1;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <signalready>
     53a:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <signalready+0x1>
     53e:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <signalready+0x2>
     542:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <signalready+0x3>
     546:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <signalready+0x4>
     54a:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <signalready+0x5>
     54e:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <signalready+0x6>
     552:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <signalready+0x7>
					counter=0;
     556:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <counter>
				}
								
		}
	}
	
}
     55a:	ff 91       	pop	r31
     55c:	ef 91       	pop	r30
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	bf 91       	pop	r27
     564:	af 91       	pop	r26
     566:	9f 91       	pop	r25
     568:	8f 91       	pop	r24
     56a:	7f 91       	pop	r23
     56c:	6f 91       	pop	r22
     56e:	5f 91       	pop	r21
     570:	4f 91       	pop	r20
     572:	3f 91       	pop	r19
     574:	2f 91       	pop	r18
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	bf 90       	pop	r11
     584:	af 90       	pop	r10
     586:	0f 90       	pop	r0
     588:	0f be       	out	0x3f, r0	; 63
     58a:	0f 90       	pop	r0
     58c:	1f 90       	pop	r1
     58e:	18 95       	reti

00000590 <ws2812_setleds>:
     590:	9b 01       	movw	r18, r22
     592:	22 0f       	add	r18, r18
     594:	33 1f       	adc	r19, r19
     596:	62 0f       	add	r22, r18
     598:	73 1f       	adc	r23, r19
     59a:	21 9a       	sbi	0x04, 1	; 4
     59c:	25 b1       	in	r18, 0x05	; 5
     59e:	2d 7f       	andi	r18, 0xFD	; 253
     5a0:	35 b1       	in	r19, 0x05	; 5
     5a2:	32 60       	ori	r19, 0x02	; 2
     5a4:	4f b7       	in	r20, 0x3f	; 63
     5a6:	f8 94       	cli
     5a8:	61 15       	cp	r22, r1
     5aa:	71 05       	cpc	r23, r1
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <ws2812_setleds+0x20>
     5ae:	21 c0       	rjmp	.+66     	; 0x5f2 <loop54+0x38>
     5b0:	fc 01       	movw	r30, r24
     5b2:	68 0f       	add	r22, r24
     5b4:	79 1f       	adc	r23, r25
     5b6:	91 91       	ld	r25, Z+
     5b8:	88 e0       	ldi	r24, 0x08	; 8

000005ba <loop54>:
     5ba:	35 b9       	out	0x05, r19	; 5
     5bc:	97 ff       	sbrs	r25, 7
     5be:	25 b9       	out	0x05, r18	; 5
     5c0:	99 0f       	add	r25, r25
     5c2:	00 00       	nop
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <loop54+0xc>
     5c6:	25 b9       	out	0x05, r18	; 5
     5c8:	00 00       	nop
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <loop54+0x12>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <loop54+0x14>
     5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <loop54+0x16>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <loop54+0x18>
     5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <loop54+0x1a>
     5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <loop54+0x1c>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <loop54+0x1e>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <loop54+0x20>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <loop54+0x22>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <loop54+0x24>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <loop54+0x26>
     5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <loop54+0x28>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <loop54+0x2a>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <loop54+0x2c>
     5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <loop54+0x2e>
     5e8:	8a 95       	dec	r24
     5ea:	39 f7       	brne	.-50     	; 0x5ba <loop54>
     5ec:	e6 17       	cp	r30, r22
     5ee:	f7 07       	cpc	r31, r23
     5f0:	11 f7       	brne	.-60     	; 0x5b6 <ws2812_setleds+0x26>
     5f2:	4f bf       	out	0x3f, r20	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f4:	85 e8       	ldi	r24, 0x85	; 133
     5f6:	8a 95       	dec	r24
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <loop54+0x3c>
     5fa:	00 00       	nop
     5fc:	08 95       	ret

000005fe <rotating_spin>:

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
	dest[1]=source[1];
	dest[2]=source[2];
     5fe:	ef 92       	push	r14
     600:	ff 92       	push	r15
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	0f 2e       	mov	r0, r31
     60c:	f8 ea       	ldi	r31, 0xA8	; 168
     60e:	ef 2e       	mov	r14, r31
     610:	f1 e0       	ldi	r31, 0x01	; 1
     612:	ff 2e       	mov	r15, r31
     614:	f0 2d       	mov	r31, r0
     616:	cd e9       	ldi	r28, 0x9D	; 157
     618:	d1 e0       	ldi	r29, 0x01	; 1
     61a:	10 e0       	ldi	r17, 0x00	; 0
     61c:	0a e0       	ldi	r16, 0x0A	; 10
     61e:	0a 87       	std	Y+10, r16	; 0x0a
     620:	09 87       	std	Y+9, r16	; 0x09
     622:	f7 01       	movw	r30, r14
     624:	00 83       	st	Z, r16
     626:	13 30       	cpi	r17, 0x03	; 3
     628:	20 f0       	brcs	.+8      	; 0x632 <rotating_spin+0x34>
     62a:	19 82       	std	Y+1, r1	; 0x01
     62c:	18 82       	st	Y, r1
     62e:	1a 82       	std	Y+2, r1	; 0x02
     630:	04 c0       	rjmp	.+8      	; 0x63a <rotating_spin+0x3c>
     632:	f7 01       	movw	r30, r14
     634:	16 ae       	std	Z+62, r1	; 0x3e
     636:	15 ae       	std	Z+61, r1	; 0x3d
     638:	17 ae       	std	Z+63, r1	; 0x3f
     63a:	68 e1       	ldi	r22, 0x18	; 24
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	86 ea       	ldi	r24, 0xA6	; 166
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	0e 94 c8 02 	call	0x590	; 0x590 <ws2812_setleds>
     646:	ff eb       	ldi	r31, 0xBF	; 191
     648:	2a ed       	ldi	r18, 0xDA	; 218
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	f1 50       	subi	r31, 0x01	; 1
     64e:	20 40       	sbci	r18, 0x00	; 0
     650:	80 40       	sbci	r24, 0x00	; 0
     652:	e1 f7       	brne	.-8      	; 0x64c <rotating_spin+0x4e>
     654:	00 c0       	rjmp	.+0      	; 0x656 <rotating_spin+0x58>
     656:	00 00       	nop
     658:	1f 5f       	subi	r17, 0xFF	; 255
     65a:	93 e0       	ldi	r25, 0x03	; 3
     65c:	e9 0e       	add	r14, r25
     65e:	f1 1c       	adc	r15, r1
     660:	23 96       	adiw	r28, 0x03	; 3
     662:	18 31       	cpi	r17, 0x18	; 24
     664:	e1 f6       	brne	.-72     	; 0x61e <rotating_spin+0x20>
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	08 95       	ret

00000674 <c_spin>:
     674:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <defaultcolors>
     678:	88 23       	and	r24, r24
     67a:	39 f0       	breq	.+14     	; 0x68a <c_spin+0x16>
     67c:	e5 e1       	ldi	r30, 0x15	; 21
     67e:	f1 e0       	ldi	r31, 0x01	; 1
     680:	10 82       	st	Z, r1
     682:	8a e0       	ldi	r24, 0x0A	; 10
     684:	81 83       	std	Z+1, r24	; 0x01
     686:	8e e1       	ldi	r24, 0x1E	; 30
     688:	82 83       	std	Z+2, r24	; 0x02
     68a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     68e:	84 31       	cpi	r24, 0x14	; 20
     690:	09 f4       	brne	.+2      	; 0x694 <c_spin+0x20>
     692:	45 c0       	rjmp	.+138    	; 0x71e <c_spin+0xaa>
     694:	e6 ea       	ldi	r30, 0xA6	; 166
     696:	f1 e0       	ldi	r31, 0x01	; 1
     698:	a5 e1       	ldi	r26, 0x15	; 21
     69a:	b1 e0       	ldi	r27, 0x01	; 1
     69c:	8c 91       	ld	r24, X
     69e:	81 83       	std	Z+1, r24	; 0x01
     6a0:	11 96       	adiw	r26, 0x01	; 1
     6a2:	8c 91       	ld	r24, X
     6a4:	11 97       	sbiw	r26, 0x01	; 1
     6a6:	80 83       	st	Z, r24
     6a8:	12 96       	adiw	r26, 0x02	; 2
     6aa:	8c 91       	ld	r24, X
     6ac:	82 83       	std	Z+2, r24	; 0x02
     6ae:	68 e1       	ldi	r22, 0x18	; 24
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	cf 01       	movw	r24, r30
     6b4:	0e 94 c8 02 	call	0x590	; 0x590 <ws2812_setleds>
     6b8:	8f e5       	ldi	r24, 0x5F	; 95
     6ba:	9a ee       	ldi	r25, 0xEA	; 234
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <c_spin+0x48>
     6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <c_spin+0x4e>
     6c2:	00 00       	nop
     6c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6c8:	84 31       	cpi	r24, 0x14	; 20
     6ca:	49 f1       	breq	.+82     	; 0x71e <c_spin+0xaa>
     6cc:	e6 ea       	ldi	r30, 0xA6	; 166
     6ce:	f1 e0       	ldi	r31, 0x01	; 1
     6d0:	a5 e1       	ldi	r26, 0x15	; 21
     6d2:	b1 e0       	ldi	r27, 0x01	; 1
     6d4:	8c 91       	ld	r24, X
     6d6:	84 83       	std	Z+4, r24	; 0x04
     6d8:	11 96       	adiw	r26, 0x01	; 1
     6da:	8c 91       	ld	r24, X
     6dc:	11 97       	sbiw	r26, 0x01	; 1
     6de:	83 83       	std	Z+3, r24	; 0x03
     6e0:	12 96       	adiw	r26, 0x02	; 2
     6e2:	8c 91       	ld	r24, X
     6e4:	85 83       	std	Z+5, r24	; 0x05
     6e6:	68 e1       	ldi	r22, 0x18	; 24
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	cf 01       	movw	r24, r30
     6ec:	0e 94 c8 02 	call	0x590	; 0x590 <ws2812_setleds>
     6f0:	8f e5       	ldi	r24, 0x5F	; 95
     6f2:	9a ee       	ldi	r25, 0xEA	; 234
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	f1 f7       	brne	.-4      	; 0x6f4 <c_spin+0x80>
     6f8:	00 c0       	rjmp	.+0      	; 0x6fa <c_spin+0x86>
     6fa:	00 00       	nop
     6fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     700:	84 31       	cpi	r24, 0x14	; 20
     702:	69 f0       	breq	.+26     	; 0x71e <c_spin+0xaa>
     704:	e6 ea       	ldi	r30, 0xA6	; 166
     706:	f1 e0       	ldi	r31, 0x01	; 1
     708:	a5 e1       	ldi	r26, 0x15	; 21
     70a:	b1 e0       	ldi	r27, 0x01	; 1
     70c:	8c 91       	ld	r24, X
     70e:	87 83       	std	Z+7, r24	; 0x07
     710:	11 96       	adiw	r26, 0x01	; 1
     712:	8c 91       	ld	r24, X
     714:	11 97       	sbiw	r26, 0x01	; 1
     716:	86 83       	std	Z+6, r24	; 0x06
     718:	12 96       	adiw	r26, 0x02	; 2
     71a:	8c 91       	ld	r24, X
     71c:	80 87       	std	Z+8, r24	; 0x08
     71e:	08 95       	ret

00000720 <clear>:
     720:	e6 ea       	ldi	r30, 0xA6	; 166
     722:	f1 e0       	ldi	r31, 0x01	; 1
     724:	8e ee       	ldi	r24, 0xEE	; 238
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	11 82       	std	Z+1, r1	; 0x01
     72a:	10 82       	st	Z, r1
     72c:	12 82       	std	Z+2, r1	; 0x02
     72e:	33 96       	adiw	r30, 0x03	; 3
     730:	e8 17       	cp	r30, r24
     732:	f9 07       	cpc	r31, r25
     734:	c9 f7       	brne	.-14     	; 0x728 <clear+0x8>
     736:	68 e1       	ldi	r22, 0x18	; 24
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	86 ea       	ldi	r24, 0xA6	; 166
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	0e 94 c8 02 	call	0x590	; 0x590 <ws2812_setleds>
     742:	08 95       	ret

00000744 <auswahl>:
     744:	cf 93       	push	r28
     746:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     74a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <samplecounter>
     74e:	8f 5f       	subi	r24, 0xFF	; 255
     750:	8a 30       	cpi	r24, 0x0A	; 10
     752:	19 f0       	breq	.+6      	; 0x75a <auswahl+0x16>
     754:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <samplecounter>
     758:	02 c0       	rjmp	.+4      	; 0x75e <auswahl+0x1a>
     75a:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <samplecounter>
     75e:	ec e6       	ldi	r30, 0x6C	; 108
     760:	f1 e0       	ldi	r31, 0x01	; 1
     762:	a0 91 6b 01 	lds	r26, 0x016B	; 0x80016b <samplecounter>
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	a4 59       	subi	r26, 0x94	; 148
     76a:	be 4f       	sbci	r27, 0xFE	; 254
     76c:	9c 93       	st	X, r25
     76e:	20 81       	ld	r18, Z
     770:	81 81       	ldd	r24, Z+1	; 0x01
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	82 0f       	add	r24, r18
     776:	91 1d       	adc	r25, r1
     778:	22 81       	ldd	r18, Z+2	; 0x02
     77a:	82 0f       	add	r24, r18
     77c:	91 1d       	adc	r25, r1
     77e:	23 81       	ldd	r18, Z+3	; 0x03
     780:	82 0f       	add	r24, r18
     782:	91 1d       	adc	r25, r1
     784:	24 81       	ldd	r18, Z+4	; 0x04
     786:	82 0f       	add	r24, r18
     788:	91 1d       	adc	r25, r1
     78a:	25 81       	ldd	r18, Z+5	; 0x05
     78c:	82 0f       	add	r24, r18
     78e:	91 1d       	adc	r25, r1
     790:	26 81       	ldd	r18, Z+6	; 0x06
     792:	82 0f       	add	r24, r18
     794:	91 1d       	adc	r25, r1
     796:	27 81       	ldd	r18, Z+7	; 0x07
     798:	82 0f       	add	r24, r18
     79a:	91 1d       	adc	r25, r1
     79c:	20 85       	ldd	r18, Z+8	; 0x08
     79e:	82 0f       	add	r24, r18
     7a0:	91 1d       	adc	r25, r1
     7a2:	21 85       	ldd	r18, Z+9	; 0x09
     7a4:	82 0f       	add	r24, r18
     7a6:	91 1d       	adc	r25, r1
     7a8:	6a e0       	ldi	r22, 0x0A	; 10
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	0e 94 b7 0b 	call	0x176e	; 0x176e <__divmodhi4>
     7b0:	77 27       	eor	r23, r23
     7b2:	07 2e       	mov	r0, r23
     7b4:	00 0c       	add	r0, r0
     7b6:	88 0b       	sbc	r24, r24
     7b8:	99 0b       	sbc	r25, r25
     7ba:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatsisf>
     7be:	2a e9       	ldi	r18, 0x9A	; 154
     7c0:	39 e9       	ldi	r19, 0x99	; 153
     7c2:	49 e1       	ldi	r20, 0x19	; 25
     7c4:	5f e3       	ldi	r21, 0x3F	; 63
     7c6:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__mulsf3>
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	40 e7       	ldi	r20, 0x70	; 112
     7d0:	51 e4       	ldi	r21, 0x41	; 65
     7d2:	0e 94 20 0a 	call	0x1440	; 0x1440 <__subsf3>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	5f e3       	ldi	r21, 0x3F	; 63
     7de:	0e 94 21 0a 	call	0x1442	; 0x1442 <__addsf3>
     7e2:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     7e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <zeiger_values>
     7ea:	68 17       	cp	r22, r24
     7ec:	81 f0       	breq	.+32     	; 0x80e <auswahl+0xca>
     7ee:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <zeiger_values+0x1>
     7f2:	68 17       	cp	r22, r24
     7f4:	61 f0       	breq	.+24     	; 0x80e <auswahl+0xca>
     7f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <zeiger_values+0x2>
     7fa:	68 17       	cp	r22, r24
     7fc:	41 f0       	breq	.+16     	; 0x80e <auswahl+0xca>
     7fe:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <zeiger_values+0x3>
     802:	68 17       	cp	r22, r24
     804:	21 f0       	breq	.+8      	; 0x80e <auswahl+0xca>
     806:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <zeiger_values+0x4>
     80a:	68 13       	cpse	r22, r24
     80c:	0b c0       	rjmp	.+22     	; 0x824 <auswahl+0xe0>
     80e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <vergleich>
     812:	8f 5f       	subi	r24, 0xFF	; 255
     814:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <vergleich>
     818:	8e 31       	cpi	r24, 0x1E	; 30
     81a:	41 f4       	brne	.+16     	; 0x82c <auswahl+0xe8>
     81c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	05 c0       	rjmp	.+10     	; 0x82e <auswahl+0xea>
     824:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <vergleich>
     828:	7a e0       	ldi	r23, 0x0A	; 10
     82a:	01 c0       	rjmp	.+2      	; 0x82e <auswahl+0xea>
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	8f e5       	ldi	r24, 0x5F	; 95
     830:	9a ee       	ldi	r25, 0xEA	; 234
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <auswahl+0xee>
     836:	00 c0       	rjmp	.+0      	; 0x838 <auswahl+0xf4>
     838:	00 00       	nop
     83a:	e6 ea       	ldi	r30, 0xA6	; 166
     83c:	f1 e0       	ldi	r31, 0x01	; 1
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	ca e0       	ldi	r28, 0x0A	; 10
     844:	a6 2f       	mov	r26, r22
     846:	b0 e0       	ldi	r27, 0x00	; 0
     848:	ad 01       	movw	r20, r26
     84a:	4f 5f       	subi	r20, 0xFF	; 255
     84c:	5f 4f       	sbci	r21, 0xFF	; 255
     84e:	11 97       	sbiw	r26, 0x01	; 1
     850:	68 17       	cp	r22, r24
     852:	31 f0       	breq	.+12     	; 0x860 <auswahl+0x11c>
     854:	48 17       	cp	r20, r24
     856:	59 07       	cpc	r21, r25
     858:	19 f0       	breq	.+6      	; 0x860 <auswahl+0x11c>
     85a:	a8 17       	cp	r26, r24
     85c:	b9 07       	cpc	r27, r25
     85e:	21 f4       	brne	.+8      	; 0x868 <auswahl+0x124>
     860:	71 83       	std	Z+1, r23	; 0x01
     862:	c0 83       	st	Z, r28
     864:	72 83       	std	Z+2, r23	; 0x02
     866:	03 c0       	rjmp	.+6      	; 0x86e <auswahl+0x12a>
     868:	11 82       	std	Z+1, r1	; 0x01
     86a:	10 82       	st	Z, r1
     86c:	12 82       	std	Z+2, r1	; 0x02
     86e:	01 96       	adiw	r24, 0x01	; 1
     870:	33 96       	adiw	r30, 0x03	; 3
     872:	89 31       	cpi	r24, 0x19	; 25
     874:	91 05       	cpc	r25, r1
     876:	61 f7       	brne	.-40     	; 0x850 <auswahl+0x10c>
     878:	68 e1       	ldi	r22, 0x18	; 24
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	86 ea       	ldi	r24, 0xA6	; 166
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	0e 94 c8 02 	call	0x590	; 0x590 <ws2812_setleds>
     884:	cf 91       	pop	r28
     886:	08 95       	ret

00000888 <ReadCommand>:
     888:	bf 92       	push	r11
     88a:	cf 92       	push	r12
     88c:	df 92       	push	r13
     88e:	ef 92       	push	r14
     890:	ff 92       	push	r15
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	6b 01       	movw	r12, r22
     89c:	7c 01       	movw	r14, r24
     89e:	0e 94 90 03 	call	0x720	; 0x720 <clear>
     8a2:	e6 ea       	ldi	r30, 0xA6	; 166
     8a4:	f1 e0       	ldi	r31, 0x01	; 1
     8a6:	11 82       	std	Z+1, r1	; 0x01
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	80 83       	st	Z, r24
     8ac:	12 82       	std	Z+2, r1	; 0x02
     8ae:	68 e1       	ldi	r22, 0x18	; 24
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	cf 01       	movw	r24, r30
     8b4:	0e 94 c8 02 	call	0x590	; 0x590 <ws2812_setleds>
     8b8:	2f eb       	ldi	r18, 0xBF	; 191
     8ba:	8e ec       	ldi	r24, 0xCE	; 206
     8bc:	92 e0       	ldi	r25, 0x02	; 2
     8be:	21 50       	subi	r18, 0x01	; 1
     8c0:	80 40       	sbci	r24, 0x00	; 0
     8c2:	90 40       	sbci	r25, 0x00	; 0
     8c4:	e1 f7       	brne	.-8      	; 0x8be <ReadCommand+0x36>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <ReadCommand+0x40>
     8c8:	00 00       	nop
     8ca:	c6 ea       	ldi	r28, 0xA6	; 166
     8cc:	d1 e0       	ldi	r29, 0x01	; 1
     8ce:	01 ef       	ldi	r16, 0xF1	; 241
     8d0:	11 e0       	ldi	r17, 0x01	; 1
     8d2:	0f 2e       	mov	r0, r31
     8d4:	fe e1       	ldi	r31, 0x1E	; 30
     8d6:	bf 2e       	mov	r11, r31
     8d8:	f0 2d       	mov	r31, r0
     8da:	c0 fe       	sbrs	r12, 0
     8dc:	0a c0       	rjmp	.+20     	; 0x8f2 <ReadCommand+0x6a>
     8de:	b9 82       	std	Y+1, r11	; 0x01
     8e0:	18 82       	st	Y, r1
     8e2:	ba 82       	std	Y+2, r11	; 0x02
     8e4:	68 e1       	ldi	r22, 0x18	; 24
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	86 ea       	ldi	r24, 0xA6	; 166
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	0e 94 c8 02 	call	0x590	; 0x590 <ws2812_setleds>
     8f0:	09 c0       	rjmp	.+18     	; 0x904 <__stack+0x5>
     8f2:	19 82       	std	Y+1, r1	; 0x01
     8f4:	18 82       	st	Y, r1
     8f6:	1a 82       	std	Y+2, r1	; 0x02
     8f8:	68 e1       	ldi	r22, 0x18	; 24
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	86 ea       	ldi	r24, 0xA6	; 166
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	0e 94 c8 02 	call	0x590	; 0x590 <ws2812_setleds>
     904:	f6 94       	lsr	r15
     906:	e7 94       	ror	r14
     908:	d7 94       	ror	r13
     90a:	c7 94       	ror	r12
     90c:	2f e7       	ldi	r18, 0x7F	; 127
     90e:	88 e3       	ldi	r24, 0x38	; 56
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	21 50       	subi	r18, 0x01	; 1
     914:	80 40       	sbci	r24, 0x00	; 0
     916:	90 40       	sbci	r25, 0x00	; 0
     918:	e1 f7       	brne	.-8      	; 0x912 <__stack+0x13>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <__stack+0x1d>
     91c:	00 00       	nop
     91e:	23 96       	adiw	r28, 0x03	; 3
     920:	c0 17       	cp	r28, r16
     922:	d1 07       	cpc	r29, r17
     924:	d1 f6       	brne	.-76     	; 0x8da <ReadCommand+0x52>
     926:	2f ef       	ldi	r18, 0xFF	; 255
     928:	89 e6       	ldi	r24, 0x69	; 105
     92a:	98 e1       	ldi	r25, 0x18	; 24
     92c:	21 50       	subi	r18, 0x01	; 1
     92e:	80 40       	sbci	r24, 0x00	; 0
     930:	90 40       	sbci	r25, 0x00	; 0
     932:	e1 f7       	brne	.-8      	; 0x92c <__stack+0x2d>
     934:	00 c0       	rjmp	.+0      	; 0x936 <__stack+0x37>
     936:	00 00       	nop
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	df 90       	pop	r13
     946:	cf 90       	pop	r12
     948:	bf 90       	pop	r11
     94a:	08 95       	ret

0000094c <fillRGB>:
     94c:	fc 01       	movw	r30, r24
     94e:	40 81       	ld	r20, Z
     950:	31 81       	ldd	r19, Z+1	; 0x01
     952:	22 81       	ldd	r18, Z+2	; 0x02
     954:	e6 ea       	ldi	r30, 0xA6	; 166
     956:	f1 e0       	ldi	r31, 0x01	; 1
     958:	8e ee       	ldi	r24, 0xEE	; 238
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	41 83       	std	Z+1, r20	; 0x01
     95e:	30 83       	st	Z, r19
     960:	22 83       	std	Z+2, r18	; 0x02
     962:	33 96       	adiw	r30, 0x03	; 3
     964:	e8 17       	cp	r30, r24
     966:	f9 07       	cpc	r31, r25
     968:	c9 f7       	brne	.-14     	; 0x95c <fillRGB+0x10>
     96a:	68 e1       	ldi	r22, 0x18	; 24
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	86 ea       	ldi	r24, 0xA6	; 166
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 c8 02 	call	0x590	; 0x590 <ws2812_setleds>
     976:	08 95       	ret

00000978 <adc_anzeige>:
     978:	9f 92       	push	r9
     97a:	af 92       	push	r10
     97c:	bf 92       	push	r11
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	00 d0       	rcall	.+0      	; 0x990 <adc_anzeige+0x18>
     990:	1f 92       	push	r1
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
     996:	90 90 79 00 	lds	r9, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     99a:	a0 90 58 01 	lds	r10, 0x0158	; 0x800158 <__data_end>
     99e:	b0 90 59 01 	lds	r11, 0x0159	; 0x800159 <__data_end+0x1>
     9a2:	c0 90 5a 01 	lds	r12, 0x015A	; 0x80015a <__data_end+0x2>
     9a6:	d0 90 5b 01 	lds	r13, 0x015B	; 0x80015b <__data_end+0x3>
     9aa:	e0 90 5c 01 	lds	r14, 0x015C	; 0x80015c <__data_end+0x4>
     9ae:	f0 90 5d 01 	lds	r15, 0x015D	; 0x80015d <__data_end+0x5>
     9b2:	00 91 5e 01 	lds	r16, 0x015E	; 0x80015e <__data_end+0x6>
     9b6:	10 91 5f 01 	lds	r17, 0x015F	; 0x80015f <__data_end+0x7>
     9ba:	20 e2       	ldi	r18, 0x20	; 32
     9bc:	30 e8       	ldi	r19, 0x80	; 128
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	50 e0       	ldi	r21, 0x00	; 0
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	70 e0       	ldi	r23, 0x00	; 0
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__udivdi3>
     9ce:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <ml+0x4>
     9d2:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <alcoholmode>
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	f9 01       	movw	r30, r18
     9da:	e8 5f       	subi	r30, 0xF8	; 248
     9dc:	fe 4f       	sbci	r31, 0xFE	; 254
     9de:	60 81       	ld	r22, Z
     9e0:	66 23       	and	r22, r22
     9e2:	99 f0       	breq	.+38     	; 0xa0a <adc_anzeige+0x92>
     9e4:	f9 01       	movw	r30, r18
     9e6:	e2 5f       	subi	r30, 0xF2	; 242
     9e8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ea:	80 81       	ld	r24, Z
     9ec:	49 2d       	mov	r20, r9
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	48 1b       	sub	r20, r24
     9f2:	51 09       	sbc	r21, r1
     9f4:	79 e1       	ldi	r23, 0x19	; 25
     9f6:	74 9f       	mul	r23, r20
     9f8:	c0 01       	movw	r24, r0
     9fa:	75 9f       	mul	r23, r21
     9fc:	90 0d       	add	r25, r0
     9fe:	11 24       	eor	r1, r1
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	0e 94 b7 0b 	call	0x176e	; 0x176e <__divmodhi4>
     a06:	60 93 9d 01 	sts	0x019D, r22	; 0x80019d <adc_val>
     a0a:	f9 01       	movw	r30, r18
     a0c:	e2 5f       	subi	r30, 0xF2	; 242
     a0e:	fe 4f       	sbci	r31, 0xFE	; 254
     a10:	80 81       	ld	r24, Z
     a12:	29 2d       	mov	r18, r9
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	05 97       	sbiw	r24, 0x05	; 5
     a1a:	28 17       	cp	r18, r24
     a1c:	39 07       	cpc	r19, r25
     a1e:	1c f4       	brge	.+6      	; 0xa26 <adc_anzeige+0xae>
     a20:	0e 94 ff 02 	call	0x5fe	; 0x5fe <rotating_spin>
     a24:	7e c0       	rjmp	.+252    	; 0xb22 <adc_anzeige+0x1aa>
     a26:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <adc_val>
     a2a:	93 30       	cpi	r25, 0x03	; 3
     a2c:	4c f4       	brge	.+18     	; 0xa40 <adc_anzeige+0xc8>
     a2e:	84 e1       	ldi	r24, 0x14	; 20
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	1b 82       	std	Y+3, r1	; 0x03
     a36:	ce 01       	movw	r24, r28
     a38:	01 96       	adiw	r24, 0x01	; 1
     a3a:	0e 94 a6 04 	call	0x94c	; 0x94c <fillRGB>
     a3e:	71 c0       	rjmp	.+226    	; 0xb22 <adc_anzeige+0x1aa>
     a40:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <samplecounter>
     a44:	8f 5f       	subi	r24, 0xFF	; 255
     a46:	85 30       	cpi	r24, 0x05	; 5
     a48:	19 f0       	breq	.+6      	; 0xa50 <adc_anzeige+0xd8>
     a4a:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <samplecounter>
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <adc_anzeige+0xdc>
     a50:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <samplecounter>
     a54:	a6 e7       	ldi	r26, 0x76	; 118
     a56:	b1 e0       	ldi	r27, 0x01	; 1
     a58:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <samplecounter>
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	ea 58       	subi	r30, 0x8A	; 138
     a60:	fe 4f       	sbci	r31, 0xFE	; 254
     a62:	90 83       	st	Z, r25
     a64:	2c 91       	ld	r18, X
     a66:	11 96       	adiw	r26, 0x01	; 1
     a68:	8c 91       	ld	r24, X
     a6a:	11 97       	sbiw	r26, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	82 0f       	add	r24, r18
     a70:	91 1d       	adc	r25, r1
     a72:	12 96       	adiw	r26, 0x02	; 2
     a74:	2c 91       	ld	r18, X
     a76:	12 97       	sbiw	r26, 0x02	; 2
     a78:	82 0f       	add	r24, r18
     a7a:	91 1d       	adc	r25, r1
     a7c:	13 96       	adiw	r26, 0x03	; 3
     a7e:	2c 91       	ld	r18, X
     a80:	13 97       	sbiw	r26, 0x03	; 3
     a82:	82 0f       	add	r24, r18
     a84:	91 1d       	adc	r25, r1
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	2c 91       	ld	r18, X
     a8a:	82 0f       	add	r24, r18
     a8c:	91 1d       	adc	r25, r1
     a8e:	65 e0       	ldi	r22, 0x05	; 5
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	0e 94 b7 0b 	call	0x176e	; 0x176e <__divmodhi4>
     a96:	96 2f       	mov	r25, r22
     a98:	60 93 9d 01 	sts	0x019D, r22	; 0x80019d <adc_val>
     a9c:	62 31       	cpi	r22, 0x12	; 18
     a9e:	24 f4       	brge	.+8      	; 0xaa8 <adc_anzeige+0x130>
     aa0:	81 e1       	ldi	r24, 0x11	; 17
     aa2:	c8 2e       	mov	r12, r24
     aa4:	c6 1a       	sub	r12, r22
     aa6:	01 c0       	rjmp	.+2      	; 0xaaa <adc_anzeige+0x132>
     aa8:	c1 2c       	mov	r12, r1
     aaa:	cc 0c       	add	r12, r12
     aac:	8c 2d       	mov	r24, r12
     aae:	88 0f       	add	r24, r24
     ab0:	88 0f       	add	r24, r24
     ab2:	c8 0e       	add	r12, r24
     ab4:	99 30       	cpi	r25, 0x09	; 9
     ab6:	1c f0       	brlt	.+6      	; 0xabe <adc_anzeige+0x146>
     ab8:	88 ef       	ldi	r24, 0xF8	; 248
     aba:	86 0f       	add	r24, r22
     abc:	01 c0       	rjmp	.+2      	; 0xac0 <adc_anzeige+0x148>
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	d8 2e       	mov	r13, r24
     ac2:	dd 0c       	add	r13, r13
     ac4:	8d 2d       	mov	r24, r13
     ac6:	88 0f       	add	r24, r24
     ac8:	88 0f       	add	r24, r24
     aca:	d8 0e       	add	r13, r24
     acc:	0f 2e       	mov	r0, r31
     ace:	f6 ea       	ldi	r31, 0xA6	; 166
     ad0:	ef 2e       	mov	r14, r31
     ad2:	f1 e0       	ldi	r31, 0x01	; 1
     ad4:	ff 2e       	mov	r15, r31
     ad6:	f0 2d       	mov	r31, r0
     ad8:	00 e0       	ldi	r16, 0x00	; 0
     ada:	10 e0       	ldi	r17, 0x00	; 0
     adc:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <adc_val>
     ae0:	08 2e       	mov	r0, r24
     ae2:	00 0c       	add	r0, r0
     ae4:	99 0b       	sbc	r25, r25
     ae6:	08 17       	cp	r16, r24
     ae8:	19 07       	cpc	r17, r25
     aea:	54 f4       	brge	.+20     	; 0xb00 <adc_anzeige+0x188>
     aec:	f7 01       	movw	r30, r14
     aee:	c1 82       	std	Z+1, r12	; 0x01
     af0:	d0 82       	st	Z, r13
     af2:	12 82       	std	Z+2, r1	; 0x02
     af4:	b8 01       	movw	r22, r16
     af6:	86 ea       	ldi	r24, 0xA6	; 166
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	0e 94 c8 02 	call	0x590	; 0x590 <ws2812_setleds>
     afe:	09 c0       	rjmp	.+18     	; 0xb12 <adc_anzeige+0x19a>
     b00:	f7 01       	movw	r30, r14
     b02:	11 82       	std	Z+1, r1	; 0x01
     b04:	10 82       	st	Z, r1
     b06:	12 82       	std	Z+2, r1	; 0x02
     b08:	b8 01       	movw	r22, r16
     b0a:	86 ea       	ldi	r24, 0xA6	; 166
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	0e 94 c8 02 	call	0x590	; 0x590 <ws2812_setleds>
     b12:	0f 5f       	subi	r16, 0xFF	; 255
     b14:	1f 4f       	sbci	r17, 0xFF	; 255
     b16:	f3 e0       	ldi	r31, 0x03	; 3
     b18:	ef 0e       	add	r14, r31
     b1a:	f1 1c       	adc	r15, r1
     b1c:	09 31       	cpi	r16, 0x19	; 25
     b1e:	11 05       	cpc	r17, r1
     b20:	e9 f6       	brne	.-70     	; 0xadc <adc_anzeige+0x164>
     b22:	2f e7       	ldi	r18, 0x7F	; 127
     b24:	88 e3       	ldi	r24, 0x38	; 56
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	21 50       	subi	r18, 0x01	; 1
     b2a:	80 40       	sbci	r24, 0x00	; 0
     b2c:	90 40       	sbci	r25, 0x00	; 0
     b2e:	e1 f7       	brne	.-8      	; 0xb28 <adc_anzeige+0x1b0>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <adc_anzeige+0x1ba>
     b32:	00 00       	nop
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	df 90       	pop	r13
     b48:	cf 90       	pop	r12
     b4a:	bf 90       	pop	r11
     b4c:	af 90       	pop	r10
     b4e:	9f 90       	pop	r9
     b50:	08 95       	ret

00000b52 <akku_anzeige>:
     b52:	bf 92       	push	r11
     b54:	cf 92       	push	r12
     b56:	df 92       	push	r13
     b58:	ef 92       	push	r14
     b5a:	ff 92       	push	r15
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	00 d0       	rcall	.+0      	; 0xb66 <akku_anzeige+0x14>
     b66:	1f 92       	push	r1
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	d0 90 60 01 	lds	r13, 0x0160	; 0x800160 <akkuoffset>
     b70:	d1 10       	cpse	r13, r1
     b72:	0b c0       	rjmp	.+22     	; 0xb8a <akku_anzeige+0x38>
     b74:	84 e6       	ldi	r24, 0x64	; 100
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	1a 82       	std	Y+2, r1	; 0x02
     b7a:	1b 82       	std	Y+3, r1	; 0x03
     b7c:	ce 01       	movw	r24, r28
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	0e 94 a6 04 	call	0x94c	; 0x94c <fillRGB>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	05 c0       	rjmp	.+10     	; 0xb94 <akku_anzeige+0x42>
     b8a:	2d 2d       	mov	r18, r13
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	22 31       	cpi	r18, 0x12	; 18
     b90:	31 05       	cpc	r19, r1
     b92:	24 f4       	brge	.+8      	; 0xb9c <akku_anzeige+0x4a>
     b94:	81 e1       	ldi	r24, 0x11	; 17
     b96:	c8 2e       	mov	r12, r24
     b98:	c2 1a       	sub	r12, r18
     b9a:	01 c0       	rjmp	.+2      	; 0xb9e <akku_anzeige+0x4c>
     b9c:	c1 2c       	mov	r12, r1
     b9e:	88 e0       	ldi	r24, 0x08	; 8
     ba0:	8d 15       	cp	r24, r13
     ba2:	30 f4       	brcc	.+12     	; 0xbb0 <akku_anzeige+0x5e>
     ba4:	0f 2e       	mov	r0, r31
     ba6:	f8 ef       	ldi	r31, 0xF8	; 248
     ba8:	bf 2e       	mov	r11, r31
     baa:	f0 2d       	mov	r31, r0
     bac:	bd 0c       	add	r11, r13
     bae:	01 c0       	rjmp	.+2      	; 0xbb2 <akku_anzeige+0x60>
     bb0:	b1 2c       	mov	r11, r1
     bb2:	0f 2e       	mov	r0, r31
     bb4:	f6 ea       	ldi	r31, 0xA6	; 166
     bb6:	ef 2e       	mov	r14, r31
     bb8:	f1 e0       	ldi	r31, 0x01	; 1
     bba:	ff 2e       	mov	r15, r31
     bbc:	f0 2d       	mov	r31, r0
     bbe:	00 e0       	ldi	r16, 0x00	; 0
     bc0:	10 e0       	ldi	r17, 0x00	; 0
     bc2:	0d 15       	cp	r16, r13
     bc4:	50 f4       	brcc	.+20     	; 0xbda <akku_anzeige+0x88>
     bc6:	f7 01       	movw	r30, r14
     bc8:	c1 82       	std	Z+1, r12	; 0x01
     bca:	b0 82       	st	Z, r11
     bcc:	12 82       	std	Z+2, r1	; 0x02
     bce:	b8 01       	movw	r22, r16
     bd0:	86 ea       	ldi	r24, 0xA6	; 166
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	0e 94 c8 02 	call	0x590	; 0x590 <ws2812_setleds>
     bd8:	09 c0       	rjmp	.+18     	; 0xbec <akku_anzeige+0x9a>
     bda:	f7 01       	movw	r30, r14
     bdc:	11 82       	std	Z+1, r1	; 0x01
     bde:	10 82       	st	Z, r1
     be0:	12 82       	std	Z+2, r1	; 0x02
     be2:	b8 01       	movw	r22, r16
     be4:	86 ea       	ldi	r24, 0xA6	; 166
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	0e 94 c8 02 	call	0x590	; 0x590 <ws2812_setleds>
     bec:	0f 5f       	subi	r16, 0xFF	; 255
     bee:	1f 4f       	sbci	r17, 0xFF	; 255
     bf0:	f3 e0       	ldi	r31, 0x03	; 3
     bf2:	ef 0e       	add	r14, r31
     bf4:	f1 1c       	adc	r15, r1
     bf6:	09 31       	cpi	r16, 0x19	; 25
     bf8:	11 05       	cpc	r17, r1
     bfa:	19 f7       	brne	.-58     	; 0xbc2 <akku_anzeige+0x70>
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	df 90       	pop	r13
     c10:	cf 90       	pop	r12
     c12:	bf 90       	pop	r11
     c14:	08 95       	ret

00000c16 <displayPalette>:
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	c8 e1       	ldi	r28, 0x18	; 24
     c1c:	d1 e0       	ldi	r29, 0x01	; 1
     c1e:	a0 e0       	ldi	r26, 0x00	; 0
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	2a 2f       	mov	r18, r26
     c24:	cd 01       	movw	r24, r26
     c26:	13 96       	adiw	r26, 0x03	; 3
     c28:	ad 01       	movw	r20, r26
     c2a:	8a 17       	cp	r24, r26
     c2c:	9b 07       	cpc	r25, r27
     c2e:	a4 f4       	brge	.+40     	; 0xc58 <displayPalette+0x42>
     c30:	78 81       	ld	r23, Y
     c32:	69 81       	ldd	r22, Y+1	; 0x01
     c34:	3a 81       	ldd	r19, Y+2	; 0x02
     c36:	fc 01       	movw	r30, r24
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	8e 0f       	add	r24, r30
     c3e:	9f 1f       	adc	r25, r31
     c40:	fc 01       	movw	r30, r24
     c42:	ea 55       	subi	r30, 0x5A	; 90
     c44:	fe 4f       	sbci	r31, 0xFE	; 254
     c46:	71 83       	std	Z+1, r23	; 0x01
     c48:	60 83       	st	Z, r22
     c4a:	32 83       	std	Z+2, r19	; 0x02
     c4c:	2f 5f       	subi	r18, 0xFF	; 255
     c4e:	82 2f       	mov	r24, r18
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	84 17       	cp	r24, r20
     c54:	95 07       	cpc	r25, r21
     c56:	7c f3       	brlt	.-34     	; 0xc36 <displayPalette+0x20>
     c58:	23 96       	adiw	r28, 0x03	; 3
     c5a:	a5 31       	cpi	r26, 0x15	; 21
     c5c:	b1 05       	cpc	r27, r1
     c5e:	09 f7       	brne	.-62     	; 0xc22 <displayPalette+0xc>
     c60:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <__bss_end+0x33>
     c64:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <__bss_end+0x32>
     c68:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <__bss_end+0x34>
     c6c:	68 e1       	ldi	r22, 0x18	; 24
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	86 ea       	ldi	r24, 0xA6	; 166
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	0e 94 c8 02 	call	0x590	; 0x590 <ws2812_setleds>
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	08 95       	ret

00000c7e <displayMenu>:
     c7e:	e6 ea       	ldi	r30, 0xA6	; 166
     c80:	f1 e0       	ldi	r31, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	90 fd       	sbrc	r25, 0
     c86:	04 c0       	rjmp	.+8      	; 0xc90 <displayMenu+0x12>
     c88:	81 83       	std	Z+1, r24	; 0x01
     c8a:	60 83       	st	Z, r22
     c8c:	42 83       	std	Z+2, r20	; 0x02
     c8e:	03 c0       	rjmp	.+6      	; 0xc96 <displayMenu+0x18>
     c90:	11 82       	std	Z+1, r1	; 0x01
     c92:	10 82       	st	Z, r1
     c94:	12 82       	std	Z+2, r1	; 0x02
     c96:	9f 5f       	subi	r25, 0xFF	; 255
     c98:	33 96       	adiw	r30, 0x03	; 3
     c9a:	98 31       	cpi	r25, 0x18	; 24
     c9c:	99 f7       	brne	.-26     	; 0xc84 <displayMenu+0x6>
     c9e:	68 e1       	ldi	r22, 0x18	; 24
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	86 ea       	ldi	r24, 0xA6	; 166
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	0e 94 c8 02 	call	0x590	; 0x590 <ws2812_setleds>
     caa:	08 95       	ret

00000cac <colorselection>:
}
void colorselection (int ir)
{

	switch (ir)
     cac:	84 3f       	cpi	r24, 0xF4	; 244
     cae:	2b e0       	ldi	r18, 0x0B	; 11
     cb0:	92 07       	cpc	r25, r18
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <colorselection+0xa>
     cb4:	a5 c0       	rjmp	.+330    	; 0xe00 <colorselection+0x154>
     cb6:	7c f4       	brge	.+30     	; 0xcd6 <colorselection+0x2a>
     cb8:	85 35       	cpi	r24, 0x55	; 85
     cba:	2a e0       	ldi	r18, 0x0A	; 10
     cbc:	92 07       	cpc	r25, r18
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <colorselection+0x16>
     cc0:	79 c0       	rjmp	.+242    	; 0xdb4 <colorselection+0x108>
     cc2:	84 3d       	cpi	r24, 0xD4	; 212
     cc4:	2b e0       	ldi	r18, 0x0B	; 11
     cc6:	92 07       	cpc	r25, r18
     cc8:	09 f4       	brne	.+2      	; 0xccc <colorselection+0x20>
     cca:	87 c0       	rjmp	.+270    	; 0xdda <colorselection+0x12e>
     ccc:	85 31       	cpi	r24, 0x15	; 21
     cce:	9a 40       	sbci	r25, 0x0A	; 10
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <colorselection+0x28>
     cd2:	a2 c0       	rjmp	.+324    	; 0xe18 <colorselection+0x16c>
     cd4:	36 c0       	rjmp	.+108    	; 0xd42 <colorselection+0x96>
     cd6:	81 37       	cpi	r24, 0x71	; 113
     cd8:	2e e0       	ldi	r18, 0x0E	; 14
     cda:	92 07       	cpc	r25, r18
     cdc:	f9 f0       	breq	.+62     	; 0xd1c <colorselection+0x70>
     cde:	2c f4       	brge	.+10     	; 0xcea <colorselection+0x3e>
     ce0:	81 33       	cpi	r24, 0x31	; 49
     ce2:	9e 40       	sbci	r25, 0x0E	; 14
     ce4:	09 f4       	brne	.+2      	; 0xce8 <colorselection+0x3c>
     ce6:	53 c0       	rjmp	.+166    	; 0xd8e <colorselection+0xe2>
     ce8:	08 95       	ret
     cea:	80 33       	cpi	r24, 0x30	; 48
     cec:	2f e0       	ldi	r18, 0x0F	; 15
     cee:	92 07       	cpc	r25, r18
     cf0:	21 f0       	breq	.+8      	; 0xcfa <colorselection+0x4e>
     cf2:	80 37       	cpi	r24, 0x70	; 112
     cf4:	9f 40       	sbci	r25, 0x0F	; 15
     cf6:	c1 f1       	breq	.+112    	; 0xd68 <colorselection+0xbc>
     cf8:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     cfa:	e5 e1       	ldi	r30, 0x15	; 21
     cfc:	f1 e0       	ldi	r31, 0x01	; 1
     cfe:	a8 e1       	ldi	r26, 0x18	; 24
     d00:	b1 e0       	ldi	r27, 0x01	; 1
     d02:	8c 91       	ld	r24, X
     d04:	80 83       	st	Z, r24
	dest[1]=source[1];
     d06:	11 96       	adiw	r26, 0x01	; 1
     d08:	8c 91       	ld	r24, X
     d0a:	11 97       	sbiw	r26, 0x01	; 1
     d0c:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	8c 91       	ld	r24, X
     d12:	82 83       	std	Z+2, r24	; 0x02

	switch (ir)
	{
		case ONE: //Taste 1
        assignColor(c_spin_color,colors[0]);
		fillRGB(c_spin_color);
     d14:	cf 01       	movw	r24, r30
     d16:	0e 94 a6 04 	call	0x94c	; 0x94c <fillRGB>
		break;
     d1a:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     d1c:	e5 e1       	ldi	r30, 0x15	; 21
     d1e:	f1 e0       	ldi	r31, 0x01	; 1
     d20:	a8 e1       	ldi	r26, 0x18	; 24
     d22:	b1 e0       	ldi	r27, 0x01	; 1
     d24:	13 96       	adiw	r26, 0x03	; 3
     d26:	8c 91       	ld	r24, X
     d28:	13 97       	sbiw	r26, 0x03	; 3
     d2a:	80 83       	st	Z, r24
	dest[1]=source[1];
     d2c:	14 96       	adiw	r26, 0x04	; 4
     d2e:	8c 91       	ld	r24, X
     d30:	14 97       	sbiw	r26, 0x04	; 4
     d32:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     d34:	15 96       	adiw	r26, 0x05	; 5
     d36:	8c 91       	ld	r24, X
     d38:	82 83       	std	Z+2, r24	; 0x02
		fillRGB(c_spin_color);
		break;
		
		case TWO: //Taste 2
        assignColor(c_spin_color,colors[1]);
		fillRGB(c_spin_color);
     d3a:	cf 01       	movw	r24, r30
     d3c:	0e 94 a6 04 	call	0x94c	; 0x94c <fillRGB>
		break;
     d40:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     d42:	e5 e1       	ldi	r30, 0x15	; 21
     d44:	f1 e0       	ldi	r31, 0x01	; 1
     d46:	a8 e1       	ldi	r26, 0x18	; 24
     d48:	b1 e0       	ldi	r27, 0x01	; 1
     d4a:	16 96       	adiw	r26, 0x06	; 6
     d4c:	8c 91       	ld	r24, X
     d4e:	16 97       	sbiw	r26, 0x06	; 6
     d50:	80 83       	st	Z, r24
	dest[1]=source[1];
     d52:	17 96       	adiw	r26, 0x07	; 7
     d54:	8c 91       	ld	r24, X
     d56:	17 97       	sbiw	r26, 0x07	; 7
     d58:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     d5a:	18 96       	adiw	r26, 0x08	; 8
     d5c:	8c 91       	ld	r24, X
     d5e:	82 83       	std	Z+2, r24	; 0x02
		fillRGB(c_spin_color);
		break;

		case THREE: //Taste 3
        assignColor(c_spin_color,colors[2]);
		fillRGB(c_spin_color);
     d60:	cf 01       	movw	r24, r30
     d62:	0e 94 a6 04 	call	0x94c	; 0x94c <fillRGB>
		break;
     d66:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     d68:	e5 e1       	ldi	r30, 0x15	; 21
     d6a:	f1 e0       	ldi	r31, 0x01	; 1
     d6c:	a8 e1       	ldi	r26, 0x18	; 24
     d6e:	b1 e0       	ldi	r27, 0x01	; 1
     d70:	19 96       	adiw	r26, 0x09	; 9
     d72:	8c 91       	ld	r24, X
     d74:	19 97       	sbiw	r26, 0x09	; 9
     d76:	80 83       	st	Z, r24
	dest[1]=source[1];
     d78:	1a 96       	adiw	r26, 0x0a	; 10
     d7a:	8c 91       	ld	r24, X
     d7c:	1a 97       	sbiw	r26, 0x0a	; 10
     d7e:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     d80:	1b 96       	adiw	r26, 0x0b	; 11
     d82:	8c 91       	ld	r24, X
     d84:	82 83       	std	Z+2, r24	; 0x02
		fillRGB(c_spin_color);
		break;
		
		case FOUR: //Taste 4
		assignColor(c_spin_color,colors[3]);
		fillRGB(c_spin_color);
     d86:	cf 01       	movw	r24, r30
     d88:	0e 94 a6 04 	call	0x94c	; 0x94c <fillRGB>
		break;
     d8c:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     d8e:	e5 e1       	ldi	r30, 0x15	; 21
     d90:	f1 e0       	ldi	r31, 0x01	; 1
     d92:	a8 e1       	ldi	r26, 0x18	; 24
     d94:	b1 e0       	ldi	r27, 0x01	; 1
     d96:	1c 96       	adiw	r26, 0x0c	; 12
     d98:	8c 91       	ld	r24, X
     d9a:	1c 97       	sbiw	r26, 0x0c	; 12
     d9c:	80 83       	st	Z, r24
	dest[1]=source[1];
     d9e:	1d 96       	adiw	r26, 0x0d	; 13
     da0:	8c 91       	ld	r24, X
     da2:	1d 97       	sbiw	r26, 0x0d	; 13
     da4:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     da6:	1e 96       	adiw	r26, 0x0e	; 14
     da8:	8c 91       	ld	r24, X
     daa:	82 83       	std	Z+2, r24	; 0x02
		fillRGB(c_spin_color);
		break;
		
		case FIVE: //Taste 5
		assignColor(c_spin_color,colors[4]);
		fillRGB(c_spin_color);
     dac:	cf 01       	movw	r24, r30
     dae:	0e 94 a6 04 	call	0x94c	; 0x94c <fillRGB>
		break;
     db2:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     db4:	e5 e1       	ldi	r30, 0x15	; 21
     db6:	f1 e0       	ldi	r31, 0x01	; 1
     db8:	a8 e1       	ldi	r26, 0x18	; 24
     dba:	b1 e0       	ldi	r27, 0x01	; 1
     dbc:	1f 96       	adiw	r26, 0x0f	; 15
     dbe:	8c 91       	ld	r24, X
     dc0:	1f 97       	sbiw	r26, 0x0f	; 15
     dc2:	80 83       	st	Z, r24
	dest[1]=source[1];
     dc4:	50 96       	adiw	r26, 0x10	; 16
     dc6:	8c 91       	ld	r24, X
     dc8:	50 97       	sbiw	r26, 0x10	; 16
     dca:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     dcc:	51 96       	adiw	r26, 0x11	; 17
     dce:	8c 91       	ld	r24, X
     dd0:	82 83       	std	Z+2, r24	; 0x02
		fillRGB(c_spin_color);
		break;

		case SIX: //Taste 6
		assignColor(c_spin_color,colors[5]);
		fillRGB(c_spin_color);
     dd2:	cf 01       	movw	r24, r30
     dd4:	0e 94 a6 04 	call	0x94c	; 0x94c <fillRGB>
		break;
     dd8:	08 95       	ret
		TIMSK1 = 0b00000000; //aus
}

void assignColor(uint8_t * dest,uint8_t * source)
{
	dest[0]=source[0];
     dda:	e5 e1       	ldi	r30, 0x15	; 21
     ddc:	f1 e0       	ldi	r31, 0x01	; 1
     dde:	a8 e1       	ldi	r26, 0x18	; 24
     de0:	b1 e0       	ldi	r27, 0x01	; 1
     de2:	52 96       	adiw	r26, 0x12	; 18
     de4:	8c 91       	ld	r24, X
     de6:	52 97       	sbiw	r26, 0x12	; 18
     de8:	80 83       	st	Z, r24
	dest[1]=source[1];
     dea:	53 96       	adiw	r26, 0x13	; 19
     dec:	8c 91       	ld	r24, X
     dee:	53 97       	sbiw	r26, 0x13	; 19
     df0:	81 83       	std	Z+1, r24	; 0x01
	dest[2]=source[2];
     df2:	54 96       	adiw	r26, 0x14	; 20
     df4:	8c 91       	ld	r24, X
     df6:	82 83       	std	Z+2, r24	; 0x02
		fillRGB(c_spin_color);
		break;
		
		case SEVEN: //Taste 7
		assignColor(c_spin_color,colors[6]);
		fillRGB(c_spin_color);
     df8:	cf 01       	movw	r24, r30
     dfa:	0e 94 a6 04 	call	0x94c	; 0x94c <fillRGB>
		break;		
     dfe:	08 95       	ret

		case PLAY: //Taste play
		colormode=0;
     e00:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <colormode>
		defaultcolors=0;
     e04:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <defaultcolors>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     e08:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>

		case PLAY: //Taste play
		colormode=0;
		defaultcolors=0;
		turnofftimer();
		irFlag=0;
     e0c:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <irFlag>
		state=0;
     e10:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		clear();
     e14:	0e 94 90 03 	call	0x720	; 0x720 <clear>
     e18:	08 95       	ret

00000e1a <setState>:

}

void setState (int ir)
{
	switch (ir)
     e1a:	84 3d       	cpi	r24, 0xD4	; 212
     e1c:	2b e0       	ldi	r18, 0x0B	; 11
     e1e:	92 07       	cpc	r25, r18
     e20:	09 f4       	brne	.+2      	; 0xe24 <setState+0xa>
     e22:	52 c0       	rjmp	.+164    	; 0xec8 <setState+0xae>
     e24:	a4 f4       	brge	.+40     	; 0xe4e <setState+0x34>
     e26:	85 35       	cpi	r24, 0x55	; 85
     e28:	2a e0       	ldi	r18, 0x0A	; 10
     e2a:	92 07       	cpc	r25, r18
     e2c:	09 f4       	brne	.+2      	; 0xe30 <setState+0x16>
     e2e:	45 c0       	rjmp	.+138    	; 0xeba <setState+0xa0>
     e30:	24 f4       	brge	.+8      	; 0xe3a <setState+0x20>
     e32:	85 31       	cpi	r24, 0x15	; 21
     e34:	9a 40       	sbci	r25, 0x0A	; 10
     e36:	61 f1       	breq	.+88     	; 0xe90 <setState+0x76>
     e38:	52 c0       	rjmp	.+164    	; 0xede <setState+0xc4>
     e3a:	85 3d       	cpi	r24, 0xD5	; 213
     e3c:	2a e0       	ldi	r18, 0x0A	; 10
     e3e:	92 07       	cpc	r25, r18
     e40:	09 f4       	brne	.+2      	; 0xe44 <setState+0x2a>
     e42:	46 c0       	rjmp	.+140    	; 0xed0 <setState+0xb6>
     e44:	84 36       	cpi	r24, 0x64	; 100
     e46:	9b 40       	sbci	r25, 0x0B	; 11
     e48:	09 f4       	brne	.+2      	; 0xe4c <setState+0x32>
     e4a:	46 c0       	rjmp	.+140    	; 0xed8 <setState+0xbe>
     e4c:	48 c0       	rjmp	.+144    	; 0xede <setState+0xc4>
     e4e:	81 37       	cpi	r24, 0x71	; 113
     e50:	2e e0       	ldi	r18, 0x0E	; 14
     e52:	92 07       	cpc	r25, r18
     e54:	b9 f0       	breq	.+46     	; 0xe84 <setState+0x6a>
     e56:	44 f4       	brge	.+16     	; 0xe68 <setState+0x4e>
     e58:	81 33       	cpi	r24, 0x31	; 49
     e5a:	2e e0       	ldi	r18, 0x0E	; 14
     e5c:	92 07       	cpc	r25, r18
     e5e:	31 f1       	breq	.+76     	; 0xeac <setState+0x92>
     e60:	81 36       	cpi	r24, 0x61	; 97
     e62:	9e 40       	sbci	r25, 0x0E	; 14
     e64:	f1 f1       	breq	.+124    	; 0xee2 <setState+0xc8>
     e66:	3b c0       	rjmp	.+118    	; 0xede <setState+0xc4>
     e68:	80 33       	cpi	r24, 0x30	; 48
     e6a:	2f e0       	ldi	r18, 0x0F	; 15
     e6c:	92 07       	cpc	r25, r18
     e6e:	21 f0       	breq	.+8      	; 0xe78 <setState+0x5e>
     e70:	80 37       	cpi	r24, 0x70	; 112
     e72:	9f 40       	sbci	r25, 0x0F	; 15
     e74:	a1 f0       	breq	.+40     	; 0xe9e <setState+0x84>
     e76:	33 c0       	rjmp	.+102    	; 0xede <setState+0xc4>
	{
		case ONE: //Taste 1 //0,1
	    alcoholmode=0;
     e78:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <alcoholmode>
		state=1;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
     e82:	08 95       	ret
		
		case TWO: //Taste 2  //0,2
	    alcoholmode=1;
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <alcoholmode>
	    state=1;
     e8a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
     e8e:	08 95       	ret

		case THREE: //Taste 3  //0,3
	    alcoholmode=2;
     e90:	82 e0       	ldi	r24, 0x02	; 2
     e92:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <alcoholmode>
        state=1;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
     e9c:	08 95       	ret
		
		case FOUR: //Taste 4  //0,4
		alcoholmode=3;
     e9e:	83 e0       	ldi	r24, 0x03	; 3
     ea0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <alcoholmode>
	    state=1;        
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
     eaa:	08 95       	ret
		
		case FIVE: //Taste 5   //0,5
	    alcoholmode=4;
     eac:	84 e0       	ldi	r24, 0x04	; 4
     eae:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <alcoholmode>
	    state=1;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
     eb8:	08 95       	ret

		case SIX: //Taste 6    //0,6
	    alcoholmode=5;
     eba:	85 e0       	ldi	r24, 0x05	; 5
     ebc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <alcoholmode>
	    state=1;       
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
     ec6:	08 95       	ret
		
		case SEVEN: //Taste 7
        state=3;  //akkuanzeige
     ec8:	83 e0       	ldi	r24, 0x03	; 3
     eca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
     ece:	08 95       	ret
        
		case EIGHT: //Taste 8
        state=2;  //debug
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        break;
     ed6:	08 95       	ret
		
		case NINE: //Taste 9
		state=0;  //cspin
     ed8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		break;
     edc:	08 95       	ret
		case EQ: //Taste EQ
		//belegt durch tara
		break;
		
		default:
		state=0;   //cspin
     ede:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     ee2:	08 95       	ret

00000ee4 <taraselection>:
}

void taraselection(int ir,uint8_t adc_val)
{
	
	switch (ir)
     ee4:	81 33       	cpi	r24, 0x31	; 49
     ee6:	2e e0       	ldi	r18, 0x0E	; 14
     ee8:	92 07       	cpc	r25, r18
     eea:	09 f4       	brne	.+2      	; 0xeee <taraselection+0xa>
     eec:	59 c0       	rjmp	.+178    	; 0xfa0 <taraselection+0xbc>
     eee:	4c f4       	brge	.+18     	; 0xf02 <taraselection+0x1e>
     ef0:	85 31       	cpi	r24, 0x15	; 21
     ef2:	2a e0       	ldi	r18, 0x0A	; 10
     ef4:	92 07       	cpc	r25, r18
     ef6:	91 f1       	breq	.+100    	; 0xf5c <taraselection+0x78>
     ef8:	85 35       	cpi	r24, 0x55	; 85
     efa:	9a 40       	sbci	r25, 0x0A	; 10
     efc:	09 f4       	brne	.+2      	; 0xf00 <taraselection+0x1c>
     efe:	61 c0       	rjmp	.+194    	; 0xfc2 <taraselection+0xde>
     f00:	71 c0       	rjmp	.+226    	; 0xfe4 <taraselection+0x100>
     f02:	80 33       	cpi	r24, 0x30	; 48
     f04:	2f e0       	ldi	r18, 0x0F	; 15
     f06:	92 07       	cpc	r25, r18
     f08:	49 f0       	breq	.+18     	; 0xf1c <taraselection+0x38>
     f0a:	80 37       	cpi	r24, 0x70	; 112
     f0c:	2f e0       	ldi	r18, 0x0F	; 15
     f0e:	92 07       	cpc	r25, r18
     f10:	b1 f1       	breq	.+108    	; 0xf7e <taraselection+0x9a>
     f12:	81 37       	cpi	r24, 0x71	; 113
     f14:	9e 40       	sbci	r25, 0x0E	; 14
     f16:	09 f0       	breq	.+2      	; 0xf1a <taraselection+0x36>
     f18:	65 c0       	rjmp	.+202    	; 0xfe4 <taraselection+0x100>
     f1a:	10 c0       	rjmp	.+32     	; 0xf3c <taraselection+0x58>
	{
		case ONE: //Taste 1 //0,1
		adc_offsets[0]=adc_val;
     f1c:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <adc_offsets>
	    alcoholmode=0;
     f20:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <alcoholmode>
		state=1;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		taramode=0;
     f2a:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <taramode>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     f2e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		adc_offsets[0]=adc_val;
	    alcoholmode=0;
		state=1;
		taramode=0;
		turnofftimer();
		irFlag=0;
     f32:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <irFlag>
		clear();
     f36:	0e 94 90 03 	call	0x720	; 0x720 <clear>
		break;
     f3a:	08 95       	ret
		
		case TWO: //Taste 2  //0,2
		adc_offsets[1]=adc_val;
     f3c:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <adc_offsets+0x1>
		alcoholmode=1;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <alcoholmode>
		state=1;
     f46:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		taramode=0;
     f4a:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <taramode>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     f4e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		adc_offsets[1]=adc_val;
		alcoholmode=1;
		state=1;
		taramode=0;
		turnofftimer();
		irFlag=0;
     f52:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <irFlag>
		clear();		
     f56:	0e 94 90 03 	call	0x720	; 0x720 <clear>
		break;
     f5a:	08 95       	ret

		case THREE: //Taste 3  //0,3
		adc_offsets[2]=adc_val;
     f5c:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <adc_offsets+0x2>
		alcoholmode=2;
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <alcoholmode>
		state=1;
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		taramode=0;
     f6c:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <taramode>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     f70:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		adc_offsets[2]=adc_val;
		alcoholmode=2;
		state=1;
		taramode=0;
		turnofftimer();
		irFlag=0;
     f74:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <irFlag>
		clear();
     f78:	0e 94 90 03 	call	0x720	; 0x720 <clear>
		break;
     f7c:	08 95       	ret
		
		case FOUR: //Taste 4 //0,4
		adc_offsets[3]=adc_val;
     f7e:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <adc_offsets+0x3>
		alcoholmode=3;
     f82:	83 e0       	ldi	r24, 0x03	; 3
     f84:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <alcoholmode>
		state=1;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		taramode=0;
     f8e:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <taramode>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     f92:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		adc_offsets[3]=adc_val;
		alcoholmode=3;
		state=1;
		taramode=0;
		turnofftimer();
		irFlag=0;
     f96:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <irFlag>
		clear();
     f9a:	0e 94 90 03 	call	0x720	; 0x720 <clear>
		break;
     f9e:	08 95       	ret
		
		case FIVE: //Taste 5  //0,5
		adc_offsets[4]=adc_val;
     fa0:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <adc_offsets+0x4>
		alcoholmode=4;
     fa4:	84 e0       	ldi	r24, 0x04	; 4
     fa6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <alcoholmode>
		state=1;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		taramode=0;
     fb0:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <taramode>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     fb4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		adc_offsets[4]=adc_val;
		alcoholmode=4;
		state=1;
		taramode=0;
		turnofftimer();
		irFlag=0;
     fb8:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <irFlag>
		clear();
     fbc:	0e 94 90 03 	call	0x720	; 0x720 <clear>
		break;
     fc0:	08 95       	ret

		case SIX: //Taste 6  //0,6
		adc_offsets[5]=adc_val;
     fc2:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <adc_offsets+0x5>
		alcoholmode=5;
     fc6:	85 e0       	ldi	r24, 0x05	; 5
     fc8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <alcoholmode>
		state=1;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		taramode=0;
     fd2:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <taramode>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
     fd6:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		adc_offsets[5]=adc_val;
		alcoholmode=5;
		state=1;
		taramode=0;
		turnofftimer();
		irFlag=0;
     fda:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <irFlag>
		clear();
     fde:	0e 94 90 03 	call	0x720	; 0x720 <clear>
		break;
     fe2:	08 95       	ret
		
		default:
		displayMenu(20,20,20); //weiss fuer tara
     fe4:	44 e1       	ldi	r20, 0x14	; 20
     fe6:	64 e1       	ldi	r22, 0x14	; 20
     fe8:	84 e1       	ldi	r24, 0x14	; 20
     fea:	0e 94 3f 06 	call	0xc7e	; 0xc7e <displayMenu>
     fee:	08 95       	ret

00000ff0 <init_ml>:
		break;
	}
}

void init_ml()
{
     ff0:	2f 92       	push	r2
     ff2:	3f 92       	push	r3
     ff4:	4f 92       	push	r4
     ff6:	5f 92       	push	r5
     ff8:	6f 92       	push	r6
     ffa:	7f 92       	push	r7
     ffc:	8f 92       	push	r8
     ffe:	9f 92       	push	r9
    1000:	af 92       	push	r10
    1002:	bf 92       	push	r11
    1004:	cf 92       	push	r12
    1006:	df 92       	push	r13
    1008:	ef 92       	push	r14
    100a:	ff 92       	push	r15
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
	//uint64_t ml1=(112200)/vcc;    //255* 438mV     438mV entsprechen 500ml      //vcc zwischen 3700 und 4200
	//uint64_t ml2=(112200)/vcc;    //255* 438mV
	//uint64_t ml3=(112200)/vcc;    //255* 438mV 
	ml[0]=149600/vcc;    
    1014:	20 90 58 01 	lds	r2, 0x0158	; 0x800158 <__data_end>
    1018:	30 90 59 01 	lds	r3, 0x0159	; 0x800159 <__data_end+0x1>
    101c:	40 90 5a 01 	lds	r4, 0x015A	; 0x80015a <__data_end+0x2>
    1020:	50 90 5b 01 	lds	r5, 0x015B	; 0x80015b <__data_end+0x3>
    1024:	60 90 5c 01 	lds	r6, 0x015C	; 0x80015c <__data_end+0x4>
    1028:	70 90 5d 01 	lds	r7, 0x015D	; 0x80015d <__data_end+0x5>
    102c:	80 90 5e 01 	lds	r8, 0x015E	; 0x80015e <__data_end+0x6>
    1030:	90 90 5f 01 	lds	r9, 0x015F	; 0x80015f <__data_end+0x7>
    1034:	c8 e0       	ldi	r28, 0x08	; 8
    1036:	d1 e0       	ldi	r29, 0x01	; 1
    1038:	a2 2c       	mov	r10, r2
    103a:	b3 2c       	mov	r11, r3
    103c:	c4 2c       	mov	r12, r4
    103e:	d5 2c       	mov	r13, r5
    1040:	e6 2c       	mov	r14, r6
    1042:	f7 2c       	mov	r15, r7
    1044:	08 2d       	mov	r16, r8
    1046:	19 2d       	mov	r17, r9
    1048:	20 e6       	ldi	r18, 0x60	; 96
    104a:	38 e4       	ldi	r19, 0x48	; 72
    104c:	42 e0       	ldi	r20, 0x02	; 2
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__udivdi3>
    105c:	28 83       	st	Y, r18
	ml[1]=29920/vcc;   
    105e:	20 ee       	ldi	r18, 0xE0	; 224
    1060:	34 e7       	ldi	r19, 0x74	; 116
    1062:	40 e0       	ldi	r20, 0x00	; 0
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__udivdi3>
    1072:	29 83       	std	Y+1, r18	; 0x01
	ml[2]=44880/vcc;
    1074:	20 e5       	ldi	r18, 0x50	; 80
    1076:	3f ea       	ldi	r19, 0xAF	; 175
    1078:	40 e0       	ldi	r20, 0x00	; 0
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__udivdi3>
    1088:	2a 83       	std	Y+2, r18	; 0x02
	ml[3]=59840/vcc;
    108a:	20 ec       	ldi	r18, 0xC0	; 192
    108c:	39 ee       	ldi	r19, 0xE9	; 233
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__udivdi3>
    109e:	2b 83       	std	Y+3, r18	; 0x03
	ml[4]=72800/vcc;
    10a0:	20 e6       	ldi	r18, 0x60	; 96
    10a2:	3c e1       	ldi	r19, 0x1C	; 28
    10a4:	41 e0       	ldi	r20, 0x01	; 1
    10a6:	50 e0       	ldi	r21, 0x00	; 0
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__udivdi3>
    10b4:	2c 83       	std	Y+4, r18	; 0x04
	ml[5]=88760/vcc;
    10b6:	28 eb       	ldi	r18, 0xB8	; 184
    10b8:	3a e5       	ldi	r19, 0x5A	; 90
    10ba:	41 e0       	ldi	r20, 0x01	; 1
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__udivdi3>
    10ca:	2d 83       	std	Y+5, r18	; 0x05
	
	



}
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	df 90       	pop	r13
    10da:	cf 90       	pop	r12
    10dc:	bf 90       	pop	r11
    10de:	af 90       	pop	r10
    10e0:	9f 90       	pop	r9
    10e2:	8f 90       	pop	r8
    10e4:	7f 90       	pop	r7
    10e6:	6f 90       	pop	r6
    10e8:	5f 90       	pop	r5
    10ea:	4f 90       	pop	r4
    10ec:	3f 90       	pop	r3
    10ee:	2f 90       	pop	r2
    10f0:	08 95       	ret

000010f2 <main>:
void akku_anzeige();
void init_ml();
///////////////////////////////////////////////////////////////////////////////////////////////////
int main(void) {
	//initTimer();
	initADC();
    10f2:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	init_ml();
    10f6:	0e 94 f8 07 	call	0xff0	; 0xff0 <init_ml>

	//initIR();
	//DDRB |= (1 << 5) | (1 << 4);		   // set PB5 (pin 28) and PC4 (pin 27) for output
    DDRB |= (1 << 1);				        //set PB1 (D9) output for LED ring
    10fa:	21 9a       	sbi	0x04, 1	; 4
	DDRC &= ~(1 << 5); 				        // set PC5 input for ADC 
    10fc:	3d 98       	cbi	0x07, 5	; 7
	DDRC &= ~(1 << 4); 				        // set PC4 input for ADC vergleichswert
    10fe:	3c 98       	cbi	0x07, 4	; 7

	DDRC &= ~(1 << 1);                       //set PC1 input for IR
    1100:	39 98       	cbi	0x07, 1	; 7
		}
		else
		{
			if (milli-IRmodeStart>500)
			{
				ready=1;
    1102:	77 24       	eor	r7, r7
    1104:	73 94       	inc	r7
    1106:	c7 e5       	ldi	r28, 0x57	; 87
    1108:	d1 e0       	ldi	r29, 0x01	; 1
				{
					colorselection(ir);
				}
				else if (taramode)
				{
					adc_tara=ADCH;
    110a:	0f 2e       	mov	r0, r31
    110c:	f9 e7       	ldi	r31, 0x79	; 121
    110e:	8f 2e       	mov	r8, r31
    1110:	91 2c       	mov	r9, r1
    1112:	f0 2d       	mov	r31, r0

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
    1114:	0f 2e       	mov	r0, r31
    1116:	ff e6       	ldi	r31, 0x6F	; 111
    1118:	2f 2e       	mov	r2, r31
    111a:	31 2c       	mov	r3, r1
    111c:	f0 2d       	mov	r31, r0
				else if (ir!=0 && !colormode && !taramode)
				{
					turnofftimer();
					irFlag=0;
					clear();
					setState (ir);
    111e:	0f 2e       	mov	r0, r31
    1120:	ff e7       	ldi	r31, 0x7F	; 127
    1122:	4f 2e       	mov	r4, r31
    1124:	f1 e0       	ldi	r31, 0x01	; 1
    1126:	5f 2e       	mov	r5, r31
    1128:	f0 2d       	mov	r31, r0
	DDRC &= ~(1 << 1);                       //set PC1 input for IR

	while (1) 
	{
     
	if (irFlag==0) 
    112a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <irFlag>
    112e:	81 11       	cpse	r24, r1
    1130:	25 c0       	rjmp	.+74     	; 0x117c <main+0x8a>
	{
	fillFlag=0;
    1132:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <fillFlag>
	ready=0;
    1136:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ready>
	switch(state)
    113a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    113e:	8a 30       	cpi	r24, 0x0A	; 10
    1140:	99 f0       	breq	.+38     	; 0x1168 <main+0x76>
    1142:	28 f4       	brcc	.+10     	; 0x114e <main+0x5c>
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	41 f0       	breq	.+16     	; 0x1158 <main+0x66>
    1148:	85 30       	cpi	r24, 0x05	; 5
    114a:	59 f0       	breq	.+22     	; 0x1162 <main+0x70>
    114c:	ee cf       	rjmp	.-36     	; 0x112a <main+0x38>
    114e:	8f 30       	cpi	r24, 0x0F	; 15
    1150:	91 f0       	breq	.+36     	; 0x1176 <main+0x84>
    1152:	84 31       	cpi	r24, 0x14	; 20
    1154:	19 f0       	breq	.+6      	; 0x115c <main+0x6a>
    1156:	e9 cf       	rjmp	.-46     	; 0x112a <main+0x38>
	{
	case 1 :
		
		adc_anzeige();
    1158:	0e 94 bc 04 	call	0x978	; 0x978 <adc_anzeige>
	case 20  :
	
	auswahl();
    115c:	0e 94 a2 03 	call	0x744	; 0x744 <auswahl>
	break;
    1160:	e4 cf       	rjmp	.-56     	; 0x112a <main+0x38>
	
	case 5  :
	//adc_anzeige();
	c_spin(); 
    1162:	0e 94 3a 03 	call	0x674	; 0x674 <c_spin>
	break;
    1166:	e1 cf       	rjmp	.-62     	; 0x112a <main+0x38>
	
	case 10  :
	ReadCommand(0b0110111010101111);
    1168:	6f ea       	ldi	r22, 0xAF	; 175
    116a:	7e e6       	ldi	r23, 0x6E	; 110
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 44 04 	call	0x888	; 0x888 <ReadCommand>
	break;
    1174:	da cf       	rjmp	.-76     	; 0x112a <main+0x38>
	
	case 15 :
	//ReadCommand(akkuoffset);
	akku_anzeige();
    1176:	0e 94 a9 05 	call	0xb52	; 0xb52 <akku_anzeige>
    117a:	d7 cf       	rjmp	.-82     	; 0x112a <main+0x38>
	}
	}
	else
	{
		
		if (fillFlag==0)
    117c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <fillFlag>
    1180:	81 11       	cpse	r24, r1
    1182:	1d c0       	rjmp	.+58     	; 0x11be <main+0xcc>
		{
			
		    displayMenu(0,10,15); //tuerkis fuer tara
    1184:	4f e0       	ldi	r20, 0x0F	; 15
    1186:	6a e0       	ldi	r22, 0x0A	; 10
    1188:	0e 94 3f 06 	call	0xc7e	; 0xc7e <displayMenu>
			fillFlag=1;
    118c:	70 92 83 01 	sts	0x0183, r7	; 0x800183 <fillFlag>
			initTimer();
    1190:	0e 94 88 09 	call	0x1310	; 0x1310 <initTimer>
			IRmodeStart=milli;
    1194:	00 91 b1 01 	lds	r16, 0x01B1	; 0x8001b1 <milli>
    1198:	10 91 b2 01 	lds	r17, 0x01B2	; 0x8001b2 <milli+0x1>
    119c:	00 93 9e 01 	sts	0x019E, r16	; 0x80019e <IRmodeStart>
    11a0:	10 93 9f 01 	sts	0x019F, r17	; 0x80019f <IRmodeStart+0x1>
    11a4:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <IRmodeStart+0x2>
    11a8:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <IRmodeStart+0x3>
    11ac:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <IRmodeStart+0x4>
    11b0:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <IRmodeStart+0x5>
    11b4:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <IRmodeStart+0x6>
    11b8:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <IRmodeStart+0x7>
    11bc:	b6 cf       	rjmp	.-148    	; 0x112a <main+0x38>
		}
		else
		{
			if (milli-IRmodeStart>500)
    11be:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <milli>
    11c2:	30 91 b2 01 	lds	r19, 0x01B2	; 0x8001b2 <milli+0x1>
    11c6:	a0 90 9e 01 	lds	r10, 0x019E	; 0x80019e <IRmodeStart>
    11ca:	b0 90 9f 01 	lds	r11, 0x019F	; 0x80019f <IRmodeStart+0x1>
    11ce:	c0 90 a0 01 	lds	r12, 0x01A0	; 0x8001a0 <IRmodeStart+0x2>
    11d2:	d0 90 a1 01 	lds	r13, 0x01A1	; 0x8001a1 <IRmodeStart+0x3>
    11d6:	e0 90 a2 01 	lds	r14, 0x01A2	; 0x8001a2 <IRmodeStart+0x4>
    11da:	f0 90 a3 01 	lds	r15, 0x01A3	; 0x8001a3 <IRmodeStart+0x5>
    11de:	00 91 a4 01 	lds	r16, 0x01A4	; 0x8001a4 <IRmodeStart+0x6>
    11e2:	10 91 a5 01 	lds	r17, 0x01A5	; 0x8001a5 <IRmodeStart+0x7>
    11e6:	a9 01       	movw	r20, r18
    11e8:	35 2f       	mov	r19, r21
    11ea:	40 e0       	ldi	r20, 0x00	; 0
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 49 0c 	call	0x1892	; 0x1892 <__subdi3>
    11fa:	24 3f       	cpi	r18, 0xF4	; 244
    11fc:	31 40       	sbci	r19, 0x01	; 1
    11fe:	41 05       	cpc	r20, r1
    1200:	51 05       	cpc	r21, r1
    1202:	61 05       	cpc	r22, r1
    1204:	71 05       	cpc	r23, r1
    1206:	81 05       	cpc	r24, r1
    1208:	91 05       	cpc	r25, r1
    120a:	09 f0       	breq	.+2      	; 0x120e <main+0x11c>
    120c:	08 f4       	brcc	.+2      	; 0x1210 <main+0x11e>
    120e:	8d cf       	rjmp	.-230    	; 0x112a <main+0x38>
			{
				ready=1;
    1210:	70 92 01 01 	sts	0x0101, r7	; 0x800101 <ready>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1214:	ff e7       	ldi	r31, 0x7F	; 127
    1216:	28 e3       	ldi	r18, 0x38	; 56
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	f1 50       	subi	r31, 0x01	; 1
    121c:	20 40       	sbci	r18, 0x00	; 0
    121e:	80 40       	sbci	r24, 0x00	; 0
    1220:	e1 f7       	brne	.-8      	; 0x121a <main+0x128>
    1222:	00 c0       	rjmp	.+0      	; 0x1224 <main+0x132>
    1224:	00 00       	nop
				_delay_ms(50);
				ir = getIRCommandRec();
    1226:	0e 94 43 01 	call	0x286	; 0x286 <getIRCommandRec>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <ir>
    1232:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <ir+0x1>
    1236:	a0 93 81 01 	sts	0x0181, r26	; 0x800181 <ir+0x2>
    123a:	b0 93 82 01 	sts	0x0182, r27	; 0x800182 <ir+0x3>
    123e:	ed e2       	ldi	r30, 0x2D	; 45
    1240:	f1 e0       	ldi	r31, 0x01	; 1
    1242:	20 e0       	ldi	r18, 0x00	; 0
				int d;
				validinput=0;
				for (d=0;d<21;d++)
				{
					if (ir==validcodes[d])
    1244:	41 91       	ld	r20, Z+
    1246:	51 91       	ld	r21, Z+
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	84 17       	cp	r24, r20
    124e:	95 07       	cpc	r25, r21
    1250:	a6 07       	cpc	r26, r22
    1252:	b7 07       	cpc	r27, r23
    1254:	09 f4       	brne	.+2      	; 0x1258 <main+0x166>
					{
						validinput=1;
    1256:	27 2d       	mov	r18, r7
				ready=1;
				_delay_ms(50);
				ir = getIRCommandRec();
				int d;
				validinput=0;
				for (d=0;d<21;d++)
    1258:	ec 17       	cp	r30, r28
    125a:	fd 07       	cpc	r31, r29
    125c:	99 f7       	brne	.-26     	; 0x1244 <main+0x152>
    125e:	20 93 7d 01 	sts	0x017D, r18	; 0x80017d <validinput>
						validinput=1;
					}
				}
				
								
				if (validinput)
    1262:	22 23       	and	r18, r18
    1264:	09 f4       	brne	.+2      	; 0x1268 <main+0x176>
    1266:	61 cf       	rjmp	.-318    	; 0x112a <main+0x38>
				{
							
				if (ir==VOLPLUS && !colormode && !taramode)  //if taste6 color mode  
    1268:	84 39       	cpi	r24, 0x94	; 148
    126a:	eb e0       	ldi	r30, 0x0B	; 11
    126c:	9e 07       	cpc	r25, r30
    126e:	a1 05       	cpc	r26, r1
    1270:	b1 05       	cpc	r27, r1
    1272:	69 f4       	brne	.+26     	; 0x128e <main+0x19c>
    1274:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <colormode>
    1278:	21 11       	cpse	r18, r1
    127a:	3b c0       	rjmp	.+118    	; 0x12f2 <main+0x200>
    127c:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <taramode>
    1280:	21 11       	cpse	r18, r1
    1282:	23 c0       	rjmp	.+70     	; 0x12ca <main+0x1d8>
				{
				colormode=1;
    1284:	70 92 7e 01 	sts	0x017E, r7	; 0x80017e <colormode>
				displayPalette();	
    1288:	0e 94 0b 06 	call	0xc16	; 0xc16 <displayPalette>
    128c:	4e cf       	rjmp	.-356    	; 0x112a <main+0x38>
								
				}
				else if (ir==EQ && !taramode && !colormode)  //TODO: put taramode on different pin
    128e:	81 36       	cpi	r24, 0x61	; 97
    1290:	fe e0       	ldi	r31, 0x0E	; 14
    1292:	9f 07       	cpc	r25, r31
    1294:	a1 05       	cpc	r26, r1
    1296:	b1 05       	cpc	r27, r1
    1298:	81 f4       	brne	.+32     	; 0x12ba <main+0x1c8>
    129a:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <taramode>
    129e:	21 11       	cpse	r18, r1
    12a0:	10 c0       	rjmp	.+32     	; 0x12c2 <main+0x1d0>
    12a2:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <colormode>
    12a6:	21 11       	cpse	r18, r1
    12a8:	24 c0       	rjmp	.+72     	; 0x12f2 <main+0x200>
				{
				taramode=1;
    12aa:	70 92 7c 01 	sts	0x017C, r7	; 0x80017c <taramode>
				displayMenu(20,20,20); //weiss fuer tara
    12ae:	44 e1       	ldi	r20, 0x14	; 20
    12b0:	64 e1       	ldi	r22, 0x14	; 20
    12b2:	84 e1       	ldi	r24, 0x14	; 20
    12b4:	0e 94 3f 06 	call	0xc7e	; 0xc7e <displayMenu>
    12b8:	38 cf       	rjmp	.-400    	; 0x112a <main+0x38>
					
				}
				else if (ir!=0 && !colormode && !taramode)
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	a1 05       	cpc	r26, r1
    12be:	b1 05       	cpc	r27, r1
    12c0:	a1 f0       	breq	.+40     	; 0x12ea <main+0x1f8>
    12c2:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <colormode>
    12c6:	21 11       	cpse	r18, r1
    12c8:	14 c0       	rjmp	.+40     	; 0x12f2 <main+0x200>
    12ca:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <taramode>
    12ce:	21 11       	cpse	r18, r1
    12d0:	18 c0       	rjmp	.+48     	; 0x1302 <main+0x210>

void turnofftimer()

{
		//TIMSK1 = 0b00000010; //an
		TIMSK1 = 0b00000000; //aus
    12d2:	f1 01       	movw	r30, r2
    12d4:	10 82       	st	Z, r1
					
				}
				else if (ir!=0 && !colormode && !taramode)
				{
					turnofftimer();
					irFlag=0;
    12d6:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <irFlag>
					clear();
    12da:	0e 94 90 03 	call	0x720	; 0x720 <clear>
					setState (ir);
    12de:	f2 01       	movw	r30, r4
    12e0:	80 81       	ld	r24, Z
    12e2:	91 81       	ldd	r25, Z+1	; 0x01
    12e4:	0e 94 0d 07 	call	0xe1a	; 0xe1a <setState>
    12e8:	20 cf       	rjmp	.-448    	; 0x112a <main+0x38>

				}
				else if (colormode)
    12ea:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <colormode>
    12ee:	22 23       	and	r18, r18
    12f0:	19 f0       	breq	.+6      	; 0x12f8 <main+0x206>
				{
					colorselection(ir);
    12f2:	0e 94 56 06 	call	0xcac	; 0xcac <colorselection>
    12f6:	19 cf       	rjmp	.-462    	; 0x112a <main+0x38>
				}
				else if (taramode)
    12f8:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <taramode>
    12fc:	22 23       	and	r18, r18
    12fe:	09 f4       	brne	.+2      	; 0x1302 <main+0x210>
    1300:	14 cf       	rjmp	.-472    	; 0x112a <main+0x38>
				{
					adc_tara=ADCH;
    1302:	f4 01       	movw	r30, r8
    1304:	60 81       	ld	r22, Z
    1306:	60 93 7b 01 	sts	0x017B, r22	; 0x80017b <adc_tara>
					taraselection(ir,adc_tara);
    130a:	0e 94 72 07 	call	0xee4	; 0xee4 <taraselection>
    130e:	0d cf       	rjmp	.-486    	; 0x112a <main+0x38>

00001310 <initTimer>:

void sec_timer()
{
	TIMSK1 = 0b00000010;
	
	sei();
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	84 bd       	out	0x24, r24	; 36
    1314:	95 e0       	ldi	r25, 0x05	; 5
    1316:	95 bd       	out	0x25, r25	; 37
    1318:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    131c:	9a e0       	ldi	r25, 0x0A	; 10
    131e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    1322:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
    1326:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    132a:	80 e8       	ldi	r24, 0x80	; 128
    132c:	87 bd       	out	0x27, r24	; 39
    132e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1332:	84 e6       	ldi	r24, 0x64	; 100
    1334:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1338:	78 94       	sei
    133a:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <millisekunden+0x1>
    133e:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <millisekunden>
    1342:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <sekunde+0x1>
    1346:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <sekunde>
    134a:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <minute+0x1>
    134e:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <minute>
    1352:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <stunde+0x1>
    1356:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <stunde>
    135a:	08 95       	ret

0000135c <__vector_14>:
}
///////////////////////////////////////////////////////////////////////////////////////////////////
ISR(TIMER0_COMPA_vect) { //muss irgendwie definiert werden sonst klappt nicht
    135c:	1f 92       	push	r1
    135e:	0f 92       	push	r0
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	0f 92       	push	r0
    1364:	11 24       	eor	r1, r1

}
    1366:	0f 90       	pop	r0
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	0f 90       	pop	r0
    136c:	1f 90       	pop	r1
    136e:	18 95       	reti

00001370 <__vector_11>:

///////////////////////////////////////////////////////////////////////////////////////////////////
ISR(TIMER1_COMPA_vect) {
    1370:	1f 92       	push	r1
    1372:	0f 92       	push	r0
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	0f 92       	push	r0
    1378:	11 24       	eor	r1, r1
    137a:	2f 93       	push	r18
    137c:	8f 93       	push	r24
    137e:	9f 93       	push	r25
	cli();
    1380:	f8 94       	cli
	
    milli++;
    1382:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <milli>
    1386:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <milli+0x1>
    138a:	01 96       	adiw	r24, 0x01	; 1
    138c:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <milli+0x1>
    1390:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <milli>
	millisekunden++;
    1394:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <millisekunden>
    1398:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <millisekunden+0x1>
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <millisekunden+0x1>
    13a2:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <millisekunden>
	if(millisekunden == 1000)
    13a6:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <millisekunden>
    13aa:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <millisekunden+0x1>
    13ae:	88 3e       	cpi	r24, 0xE8	; 232
    13b0:	93 40       	sbci	r25, 0x03	; 3
    13b2:	e9 f5       	brne	.+122    	; 0x142e <__vector_11+0xbe>
	{
		sekunde++;
    13b4:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <sekunde>
    13b8:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <sekunde+0x1>
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <sekunde+0x1>
    13c2:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <sekunde>
		millisekunden = 0;
    13c6:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <millisekunden+0x1>
    13ca:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <millisekunden>
		if(sekunde == 60)
    13ce:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <sekunde>
    13d2:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <sekunde+0x1>
    13d6:	cc 97       	sbiw	r24, 0x3c	; 60
    13d8:	69 f4       	brne	.+26     	; 0x13f4 <__vector_11+0x84>
		{
			minute++;
    13da:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <minute>
    13de:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <minute+0x1>
    13e2:	01 96       	adiw	r24, 0x01	; 1
    13e4:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <minute+0x1>
    13e8:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <minute>
			sekunde = 0;
    13ec:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <sekunde+0x1>
    13f0:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <sekunde>
		}
		if(minute == 60)
    13f4:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <minute>
    13f8:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <minute+0x1>
    13fc:	cc 97       	sbiw	r24, 0x3c	; 60
    13fe:	69 f4       	brne	.+26     	; 0x141a <__vector_11+0xaa>
		{
			stunde++;
    1400:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <stunde>
    1404:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <stunde+0x1>
    1408:	01 96       	adiw	r24, 0x01	; 1
    140a:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <stunde+0x1>
    140e:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <stunde>
			minute = 0;
    1412:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <minute+0x1>
    1416:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <minute>
		}
		if(stunde == 24)
    141a:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <stunde>
    141e:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <stunde+0x1>
    1422:	48 97       	sbiw	r24, 0x18	; 24
    1424:	21 f4       	brne	.+8      	; 0x142e <__vector_11+0xbe>
		{
			stunde = 0;
    1426:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <stunde+0x1>
    142a:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <stunde>
		}
	}
	sei();
    142e:	78 94       	sei
}
    1430:	9f 91       	pop	r25
    1432:	8f 91       	pop	r24
    1434:	2f 91       	pop	r18
    1436:	0f 90       	pop	r0
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	0f 90       	pop	r0
    143c:	1f 90       	pop	r1
    143e:	18 95       	reti

00001440 <__subsf3>:
    1440:	50 58       	subi	r21, 0x80	; 128

00001442 <__addsf3>:
    1442:	bb 27       	eor	r27, r27
    1444:	aa 27       	eor	r26, r26
    1446:	0e 94 38 0a 	call	0x1470	; 0x1470 <__addsf3x>
    144a:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__fp_round>
    144e:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fp_pscA>
    1452:	38 f0       	brcs	.+14     	; 0x1462 <__addsf3+0x20>
    1454:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fp_pscB>
    1458:	20 f0       	brcs	.+8      	; 0x1462 <__addsf3+0x20>
    145a:	39 f4       	brne	.+14     	; 0x146a <__addsf3+0x28>
    145c:	9f 3f       	cpi	r25, 0xFF	; 255
    145e:	19 f4       	brne	.+6      	; 0x1466 <__addsf3+0x24>
    1460:	26 f4       	brtc	.+8      	; 0x146a <__addsf3+0x28>
    1462:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <__fp_nan>
    1466:	0e f4       	brtc	.+2      	; 0x146a <__addsf3+0x28>
    1468:	e0 95       	com	r30
    146a:	e7 fb       	bst	r30, 7
    146c:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__fp_inf>

00001470 <__addsf3x>:
    1470:	e9 2f       	mov	r30, r25
    1472:	0e 94 21 0b 	call	0x1642	; 0x1642 <__fp_split3>
    1476:	58 f3       	brcs	.-42     	; 0x144e <__addsf3+0xc>
    1478:	ba 17       	cp	r27, r26
    147a:	62 07       	cpc	r22, r18
    147c:	73 07       	cpc	r23, r19
    147e:	84 07       	cpc	r24, r20
    1480:	95 07       	cpc	r25, r21
    1482:	20 f0       	brcs	.+8      	; 0x148c <__addsf3x+0x1c>
    1484:	79 f4       	brne	.+30     	; 0x14a4 <__addsf3x+0x34>
    1486:	a6 f5       	brtc	.+104    	; 0x14f0 <__addsf3x+0x80>
    1488:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_zero>
    148c:	0e f4       	brtc	.+2      	; 0x1490 <__addsf3x+0x20>
    148e:	e0 95       	com	r30
    1490:	0b 2e       	mov	r0, r27
    1492:	ba 2f       	mov	r27, r26
    1494:	a0 2d       	mov	r26, r0
    1496:	0b 01       	movw	r0, r22
    1498:	b9 01       	movw	r22, r18
    149a:	90 01       	movw	r18, r0
    149c:	0c 01       	movw	r0, r24
    149e:	ca 01       	movw	r24, r20
    14a0:	a0 01       	movw	r20, r0
    14a2:	11 24       	eor	r1, r1
    14a4:	ff 27       	eor	r31, r31
    14a6:	59 1b       	sub	r21, r25
    14a8:	99 f0       	breq	.+38     	; 0x14d0 <__addsf3x+0x60>
    14aa:	59 3f       	cpi	r21, 0xF9	; 249
    14ac:	50 f4       	brcc	.+20     	; 0x14c2 <__addsf3x+0x52>
    14ae:	50 3e       	cpi	r21, 0xE0	; 224
    14b0:	68 f1       	brcs	.+90     	; 0x150c <__addsf3x+0x9c>
    14b2:	1a 16       	cp	r1, r26
    14b4:	f0 40       	sbci	r31, 0x00	; 0
    14b6:	a2 2f       	mov	r26, r18
    14b8:	23 2f       	mov	r18, r19
    14ba:	34 2f       	mov	r19, r20
    14bc:	44 27       	eor	r20, r20
    14be:	58 5f       	subi	r21, 0xF8	; 248
    14c0:	f3 cf       	rjmp	.-26     	; 0x14a8 <__addsf3x+0x38>
    14c2:	46 95       	lsr	r20
    14c4:	37 95       	ror	r19
    14c6:	27 95       	ror	r18
    14c8:	a7 95       	ror	r26
    14ca:	f0 40       	sbci	r31, 0x00	; 0
    14cc:	53 95       	inc	r21
    14ce:	c9 f7       	brne	.-14     	; 0x14c2 <__addsf3x+0x52>
    14d0:	7e f4       	brtc	.+30     	; 0x14f0 <__addsf3x+0x80>
    14d2:	1f 16       	cp	r1, r31
    14d4:	ba 0b       	sbc	r27, r26
    14d6:	62 0b       	sbc	r22, r18
    14d8:	73 0b       	sbc	r23, r19
    14da:	84 0b       	sbc	r24, r20
    14dc:	ba f0       	brmi	.+46     	; 0x150c <__addsf3x+0x9c>
    14de:	91 50       	subi	r25, 0x01	; 1
    14e0:	a1 f0       	breq	.+40     	; 0x150a <__addsf3x+0x9a>
    14e2:	ff 0f       	add	r31, r31
    14e4:	bb 1f       	adc	r27, r27
    14e6:	66 1f       	adc	r22, r22
    14e8:	77 1f       	adc	r23, r23
    14ea:	88 1f       	adc	r24, r24
    14ec:	c2 f7       	brpl	.-16     	; 0x14de <__addsf3x+0x6e>
    14ee:	0e c0       	rjmp	.+28     	; 0x150c <__addsf3x+0x9c>
    14f0:	ba 0f       	add	r27, r26
    14f2:	62 1f       	adc	r22, r18
    14f4:	73 1f       	adc	r23, r19
    14f6:	84 1f       	adc	r24, r20
    14f8:	48 f4       	brcc	.+18     	; 0x150c <__addsf3x+0x9c>
    14fa:	87 95       	ror	r24
    14fc:	77 95       	ror	r23
    14fe:	67 95       	ror	r22
    1500:	b7 95       	ror	r27
    1502:	f7 95       	ror	r31
    1504:	9e 3f       	cpi	r25, 0xFE	; 254
    1506:	08 f0       	brcs	.+2      	; 0x150a <__addsf3x+0x9a>
    1508:	b0 cf       	rjmp	.-160    	; 0x146a <__addsf3+0x28>
    150a:	93 95       	inc	r25
    150c:	88 0f       	add	r24, r24
    150e:	08 f0       	brcs	.+2      	; 0x1512 <__addsf3x+0xa2>
    1510:	99 27       	eor	r25, r25
    1512:	ee 0f       	add	r30, r30
    1514:	97 95       	ror	r25
    1516:	87 95       	ror	r24
    1518:	08 95       	ret

0000151a <__fixunssfsi>:
    151a:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fp_splitA>
    151e:	88 f0       	brcs	.+34     	; 0x1542 <__fixunssfsi+0x28>
    1520:	9f 57       	subi	r25, 0x7F	; 127
    1522:	98 f0       	brcs	.+38     	; 0x154a <__fixunssfsi+0x30>
    1524:	b9 2f       	mov	r27, r25
    1526:	99 27       	eor	r25, r25
    1528:	b7 51       	subi	r27, 0x17	; 23
    152a:	b0 f0       	brcs	.+44     	; 0x1558 <__fixunssfsi+0x3e>
    152c:	e1 f0       	breq	.+56     	; 0x1566 <__fixunssfsi+0x4c>
    152e:	66 0f       	add	r22, r22
    1530:	77 1f       	adc	r23, r23
    1532:	88 1f       	adc	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	1a f0       	brmi	.+6      	; 0x153e <__fixunssfsi+0x24>
    1538:	ba 95       	dec	r27
    153a:	c9 f7       	brne	.-14     	; 0x152e <__fixunssfsi+0x14>
    153c:	14 c0       	rjmp	.+40     	; 0x1566 <__fixunssfsi+0x4c>
    153e:	b1 30       	cpi	r27, 0x01	; 1
    1540:	91 f0       	breq	.+36     	; 0x1566 <__fixunssfsi+0x4c>
    1542:	0e 94 43 0b 	call	0x1686	; 0x1686 <__fp_zero>
    1546:	b1 e0       	ldi	r27, 0x01	; 1
    1548:	08 95       	ret
    154a:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_zero>
    154e:	67 2f       	mov	r22, r23
    1550:	78 2f       	mov	r23, r24
    1552:	88 27       	eor	r24, r24
    1554:	b8 5f       	subi	r27, 0xF8	; 248
    1556:	39 f0       	breq	.+14     	; 0x1566 <__fixunssfsi+0x4c>
    1558:	b9 3f       	cpi	r27, 0xF9	; 249
    155a:	cc f3       	brlt	.-14     	; 0x154e <__fixunssfsi+0x34>
    155c:	86 95       	lsr	r24
    155e:	77 95       	ror	r23
    1560:	67 95       	ror	r22
    1562:	b3 95       	inc	r27
    1564:	d9 f7       	brne	.-10     	; 0x155c <__fixunssfsi+0x42>
    1566:	3e f4       	brtc	.+14     	; 0x1576 <__fixunssfsi+0x5c>
    1568:	90 95       	com	r25
    156a:	80 95       	com	r24
    156c:	70 95       	com	r23
    156e:	61 95       	neg	r22
    1570:	7f 4f       	sbci	r23, 0xFF	; 255
    1572:	8f 4f       	sbci	r24, 0xFF	; 255
    1574:	9f 4f       	sbci	r25, 0xFF	; 255
    1576:	08 95       	ret

00001578 <__floatunsisf>:
    1578:	e8 94       	clt
    157a:	09 c0       	rjmp	.+18     	; 0x158e <__floatsisf+0x12>

0000157c <__floatsisf>:
    157c:	97 fb       	bst	r25, 7
    157e:	3e f4       	brtc	.+14     	; 0x158e <__floatsisf+0x12>
    1580:	90 95       	com	r25
    1582:	80 95       	com	r24
    1584:	70 95       	com	r23
    1586:	61 95       	neg	r22
    1588:	7f 4f       	sbci	r23, 0xFF	; 255
    158a:	8f 4f       	sbci	r24, 0xFF	; 255
    158c:	9f 4f       	sbci	r25, 0xFF	; 255
    158e:	99 23       	and	r25, r25
    1590:	a9 f0       	breq	.+42     	; 0x15bc <__floatsisf+0x40>
    1592:	f9 2f       	mov	r31, r25
    1594:	96 e9       	ldi	r25, 0x96	; 150
    1596:	bb 27       	eor	r27, r27
    1598:	93 95       	inc	r25
    159a:	f6 95       	lsr	r31
    159c:	87 95       	ror	r24
    159e:	77 95       	ror	r23
    15a0:	67 95       	ror	r22
    15a2:	b7 95       	ror	r27
    15a4:	f1 11       	cpse	r31, r1
    15a6:	f8 cf       	rjmp	.-16     	; 0x1598 <__floatsisf+0x1c>
    15a8:	fa f4       	brpl	.+62     	; 0x15e8 <__floatsisf+0x6c>
    15aa:	bb 0f       	add	r27, r27
    15ac:	11 f4       	brne	.+4      	; 0x15b2 <__floatsisf+0x36>
    15ae:	60 ff       	sbrs	r22, 0
    15b0:	1b c0       	rjmp	.+54     	; 0x15e8 <__floatsisf+0x6c>
    15b2:	6f 5f       	subi	r22, 0xFF	; 255
    15b4:	7f 4f       	sbci	r23, 0xFF	; 255
    15b6:	8f 4f       	sbci	r24, 0xFF	; 255
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	16 c0       	rjmp	.+44     	; 0x15e8 <__floatsisf+0x6c>
    15bc:	88 23       	and	r24, r24
    15be:	11 f0       	breq	.+4      	; 0x15c4 <__floatsisf+0x48>
    15c0:	96 e9       	ldi	r25, 0x96	; 150
    15c2:	11 c0       	rjmp	.+34     	; 0x15e6 <__floatsisf+0x6a>
    15c4:	77 23       	and	r23, r23
    15c6:	21 f0       	breq	.+8      	; 0x15d0 <__floatsisf+0x54>
    15c8:	9e e8       	ldi	r25, 0x8E	; 142
    15ca:	87 2f       	mov	r24, r23
    15cc:	76 2f       	mov	r23, r22
    15ce:	05 c0       	rjmp	.+10     	; 0x15da <__floatsisf+0x5e>
    15d0:	66 23       	and	r22, r22
    15d2:	71 f0       	breq	.+28     	; 0x15f0 <__floatsisf+0x74>
    15d4:	96 e8       	ldi	r25, 0x86	; 134
    15d6:	86 2f       	mov	r24, r22
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	2a f0       	brmi	.+10     	; 0x15e8 <__floatsisf+0x6c>
    15de:	9a 95       	dec	r25
    15e0:	66 0f       	add	r22, r22
    15e2:	77 1f       	adc	r23, r23
    15e4:	88 1f       	adc	r24, r24
    15e6:	da f7       	brpl	.-10     	; 0x15de <__floatsisf+0x62>
    15e8:	88 0f       	add	r24, r24
    15ea:	96 95       	lsr	r25
    15ec:	87 95       	ror	r24
    15ee:	97 f9       	bld	r25, 7
    15f0:	08 95       	ret

000015f2 <__fp_inf>:
    15f2:	97 f9       	bld	r25, 7
    15f4:	9f 67       	ori	r25, 0x7F	; 127
    15f6:	80 e8       	ldi	r24, 0x80	; 128
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	08 95       	ret

000015fe <__fp_nan>:
    15fe:	9f ef       	ldi	r25, 0xFF	; 255
    1600:	80 ec       	ldi	r24, 0xC0	; 192
    1602:	08 95       	ret

00001604 <__fp_pscA>:
    1604:	00 24       	eor	r0, r0
    1606:	0a 94       	dec	r0
    1608:	16 16       	cp	r1, r22
    160a:	17 06       	cpc	r1, r23
    160c:	18 06       	cpc	r1, r24
    160e:	09 06       	cpc	r0, r25
    1610:	08 95       	ret

00001612 <__fp_pscB>:
    1612:	00 24       	eor	r0, r0
    1614:	0a 94       	dec	r0
    1616:	12 16       	cp	r1, r18
    1618:	13 06       	cpc	r1, r19
    161a:	14 06       	cpc	r1, r20
    161c:	05 06       	cpc	r0, r21
    161e:	08 95       	ret

00001620 <__fp_round>:
    1620:	09 2e       	mov	r0, r25
    1622:	03 94       	inc	r0
    1624:	00 0c       	add	r0, r0
    1626:	11 f4       	brne	.+4      	; 0x162c <__fp_round+0xc>
    1628:	88 23       	and	r24, r24
    162a:	52 f0       	brmi	.+20     	; 0x1640 <__fp_round+0x20>
    162c:	bb 0f       	add	r27, r27
    162e:	40 f4       	brcc	.+16     	; 0x1640 <__fp_round+0x20>
    1630:	bf 2b       	or	r27, r31
    1632:	11 f4       	brne	.+4      	; 0x1638 <__fp_round+0x18>
    1634:	60 ff       	sbrs	r22, 0
    1636:	04 c0       	rjmp	.+8      	; 0x1640 <__fp_round+0x20>
    1638:	6f 5f       	subi	r22, 0xFF	; 255
    163a:	7f 4f       	sbci	r23, 0xFF	; 255
    163c:	8f 4f       	sbci	r24, 0xFF	; 255
    163e:	9f 4f       	sbci	r25, 0xFF	; 255
    1640:	08 95       	ret

00001642 <__fp_split3>:
    1642:	57 fd       	sbrc	r21, 7
    1644:	90 58       	subi	r25, 0x80	; 128
    1646:	44 0f       	add	r20, r20
    1648:	55 1f       	adc	r21, r21
    164a:	59 f0       	breq	.+22     	; 0x1662 <__fp_splitA+0x10>
    164c:	5f 3f       	cpi	r21, 0xFF	; 255
    164e:	71 f0       	breq	.+28     	; 0x166c <__fp_splitA+0x1a>
    1650:	47 95       	ror	r20

00001652 <__fp_splitA>:
    1652:	88 0f       	add	r24, r24
    1654:	97 fb       	bst	r25, 7
    1656:	99 1f       	adc	r25, r25
    1658:	61 f0       	breq	.+24     	; 0x1672 <__fp_splitA+0x20>
    165a:	9f 3f       	cpi	r25, 0xFF	; 255
    165c:	79 f0       	breq	.+30     	; 0x167c <__fp_splitA+0x2a>
    165e:	87 95       	ror	r24
    1660:	08 95       	ret
    1662:	12 16       	cp	r1, r18
    1664:	13 06       	cpc	r1, r19
    1666:	14 06       	cpc	r1, r20
    1668:	55 1f       	adc	r21, r21
    166a:	f2 cf       	rjmp	.-28     	; 0x1650 <__fp_split3+0xe>
    166c:	46 95       	lsr	r20
    166e:	f1 df       	rcall	.-30     	; 0x1652 <__fp_splitA>
    1670:	08 c0       	rjmp	.+16     	; 0x1682 <__fp_splitA+0x30>
    1672:	16 16       	cp	r1, r22
    1674:	17 06       	cpc	r1, r23
    1676:	18 06       	cpc	r1, r24
    1678:	99 1f       	adc	r25, r25
    167a:	f1 cf       	rjmp	.-30     	; 0x165e <__fp_splitA+0xc>
    167c:	86 95       	lsr	r24
    167e:	71 05       	cpc	r23, r1
    1680:	61 05       	cpc	r22, r1
    1682:	08 94       	sec
    1684:	08 95       	ret

00001686 <__fp_zero>:
    1686:	e8 94       	clt

00001688 <__fp_szero>:
    1688:	bb 27       	eor	r27, r27
    168a:	66 27       	eor	r22, r22
    168c:	77 27       	eor	r23, r23
    168e:	cb 01       	movw	r24, r22
    1690:	97 f9       	bld	r25, 7
    1692:	08 95       	ret

00001694 <__mulsf3>:
    1694:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3x>
    1698:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__fp_round>
    169c:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fp_pscA>
    16a0:	38 f0       	brcs	.+14     	; 0x16b0 <__mulsf3+0x1c>
    16a2:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fp_pscB>
    16a6:	20 f0       	brcs	.+8      	; 0x16b0 <__mulsf3+0x1c>
    16a8:	95 23       	and	r25, r21
    16aa:	11 f0       	breq	.+4      	; 0x16b0 <__mulsf3+0x1c>
    16ac:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__fp_inf>
    16b0:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <__fp_nan>
    16b4:	11 24       	eor	r1, r1
    16b6:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <__fp_szero>

000016ba <__mulsf3x>:
    16ba:	0e 94 21 0b 	call	0x1642	; 0x1642 <__fp_split3>
    16be:	70 f3       	brcs	.-36     	; 0x169c <__mulsf3+0x8>

000016c0 <__mulsf3_pse>:
    16c0:	95 9f       	mul	r25, r21
    16c2:	c1 f3       	breq	.-16     	; 0x16b4 <__mulsf3+0x20>
    16c4:	95 0f       	add	r25, r21
    16c6:	50 e0       	ldi	r21, 0x00	; 0
    16c8:	55 1f       	adc	r21, r21
    16ca:	62 9f       	mul	r22, r18
    16cc:	f0 01       	movw	r30, r0
    16ce:	72 9f       	mul	r23, r18
    16d0:	bb 27       	eor	r27, r27
    16d2:	f0 0d       	add	r31, r0
    16d4:	b1 1d       	adc	r27, r1
    16d6:	63 9f       	mul	r22, r19
    16d8:	aa 27       	eor	r26, r26
    16da:	f0 0d       	add	r31, r0
    16dc:	b1 1d       	adc	r27, r1
    16de:	aa 1f       	adc	r26, r26
    16e0:	64 9f       	mul	r22, r20
    16e2:	66 27       	eor	r22, r22
    16e4:	b0 0d       	add	r27, r0
    16e6:	a1 1d       	adc	r26, r1
    16e8:	66 1f       	adc	r22, r22
    16ea:	82 9f       	mul	r24, r18
    16ec:	22 27       	eor	r18, r18
    16ee:	b0 0d       	add	r27, r0
    16f0:	a1 1d       	adc	r26, r1
    16f2:	62 1f       	adc	r22, r18
    16f4:	73 9f       	mul	r23, r19
    16f6:	b0 0d       	add	r27, r0
    16f8:	a1 1d       	adc	r26, r1
    16fa:	62 1f       	adc	r22, r18
    16fc:	83 9f       	mul	r24, r19
    16fe:	a0 0d       	add	r26, r0
    1700:	61 1d       	adc	r22, r1
    1702:	22 1f       	adc	r18, r18
    1704:	74 9f       	mul	r23, r20
    1706:	33 27       	eor	r19, r19
    1708:	a0 0d       	add	r26, r0
    170a:	61 1d       	adc	r22, r1
    170c:	23 1f       	adc	r18, r19
    170e:	84 9f       	mul	r24, r20
    1710:	60 0d       	add	r22, r0
    1712:	21 1d       	adc	r18, r1
    1714:	82 2f       	mov	r24, r18
    1716:	76 2f       	mov	r23, r22
    1718:	6a 2f       	mov	r22, r26
    171a:	11 24       	eor	r1, r1
    171c:	9f 57       	subi	r25, 0x7F	; 127
    171e:	50 40       	sbci	r21, 0x00	; 0
    1720:	9a f0       	brmi	.+38     	; 0x1748 <__mulsf3_pse+0x88>
    1722:	f1 f0       	breq	.+60     	; 0x1760 <__mulsf3_pse+0xa0>
    1724:	88 23       	and	r24, r24
    1726:	4a f0       	brmi	.+18     	; 0x173a <__mulsf3_pse+0x7a>
    1728:	ee 0f       	add	r30, r30
    172a:	ff 1f       	adc	r31, r31
    172c:	bb 1f       	adc	r27, r27
    172e:	66 1f       	adc	r22, r22
    1730:	77 1f       	adc	r23, r23
    1732:	88 1f       	adc	r24, r24
    1734:	91 50       	subi	r25, 0x01	; 1
    1736:	50 40       	sbci	r21, 0x00	; 0
    1738:	a9 f7       	brne	.-22     	; 0x1724 <__mulsf3_pse+0x64>
    173a:	9e 3f       	cpi	r25, 0xFE	; 254
    173c:	51 05       	cpc	r21, r1
    173e:	80 f0       	brcs	.+32     	; 0x1760 <__mulsf3_pse+0xa0>
    1740:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__fp_inf>
    1744:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <__fp_szero>
    1748:	5f 3f       	cpi	r21, 0xFF	; 255
    174a:	e4 f3       	brlt	.-8      	; 0x1744 <__mulsf3_pse+0x84>
    174c:	98 3e       	cpi	r25, 0xE8	; 232
    174e:	d4 f3       	brlt	.-12     	; 0x1744 <__mulsf3_pse+0x84>
    1750:	86 95       	lsr	r24
    1752:	77 95       	ror	r23
    1754:	67 95       	ror	r22
    1756:	b7 95       	ror	r27
    1758:	f7 95       	ror	r31
    175a:	e7 95       	ror	r30
    175c:	9f 5f       	subi	r25, 0xFF	; 255
    175e:	c1 f7       	brne	.-16     	; 0x1750 <__mulsf3_pse+0x90>
    1760:	fe 2b       	or	r31, r30
    1762:	88 0f       	add	r24, r24
    1764:	91 1d       	adc	r25, r1
    1766:	96 95       	lsr	r25
    1768:	87 95       	ror	r24
    176a:	97 f9       	bld	r25, 7
    176c:	08 95       	ret

0000176e <__divmodhi4>:
    176e:	97 fb       	bst	r25, 7
    1770:	07 2e       	mov	r0, r23
    1772:	16 f4       	brtc	.+4      	; 0x1778 <__divmodhi4+0xa>
    1774:	00 94       	com	r0
    1776:	07 d0       	rcall	.+14     	; 0x1786 <__divmodhi4_neg1>
    1778:	77 fd       	sbrc	r23, 7
    177a:	09 d0       	rcall	.+18     	; 0x178e <__divmodhi4_neg2>
    177c:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__udivmodhi4>
    1780:	07 fc       	sbrc	r0, 7
    1782:	05 d0       	rcall	.+10     	; 0x178e <__divmodhi4_neg2>
    1784:	3e f4       	brtc	.+14     	; 0x1794 <__divmodhi4_exit>

00001786 <__divmodhi4_neg1>:
    1786:	90 95       	com	r25
    1788:	81 95       	neg	r24
    178a:	9f 4f       	sbci	r25, 0xFF	; 255
    178c:	08 95       	ret

0000178e <__divmodhi4_neg2>:
    178e:	70 95       	com	r23
    1790:	61 95       	neg	r22
    1792:	7f 4f       	sbci	r23, 0xFF	; 255

00001794 <__divmodhi4_exit>:
    1794:	08 95       	ret

00001796 <__divmodsi4>:
    1796:	05 2e       	mov	r0, r21
    1798:	97 fb       	bst	r25, 7
    179a:	1e f4       	brtc	.+6      	; 0x17a2 <__divmodsi4+0xc>
    179c:	00 94       	com	r0
    179e:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__negsi2>
    17a2:	57 fd       	sbrc	r21, 7
    17a4:	07 d0       	rcall	.+14     	; 0x17b4 <__divmodsi4_neg2>
    17a6:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__udivmodsi4>
    17aa:	07 fc       	sbrc	r0, 7
    17ac:	03 d0       	rcall	.+6      	; 0x17b4 <__divmodsi4_neg2>
    17ae:	4e f4       	brtc	.+18     	; 0x17c2 <__divmodsi4_exit>
    17b0:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__negsi2>

000017b4 <__divmodsi4_neg2>:
    17b4:	50 95       	com	r21
    17b6:	40 95       	com	r20
    17b8:	30 95       	com	r19
    17ba:	21 95       	neg	r18
    17bc:	3f 4f       	sbci	r19, 0xFF	; 255
    17be:	4f 4f       	sbci	r20, 0xFF	; 255
    17c0:	5f 4f       	sbci	r21, 0xFF	; 255

000017c2 <__divmodsi4_exit>:
    17c2:	08 95       	ret

000017c4 <__negsi2>:
    17c4:	90 95       	com	r25
    17c6:	80 95       	com	r24
    17c8:	70 95       	com	r23
    17ca:	61 95       	neg	r22
    17cc:	7f 4f       	sbci	r23, 0xFF	; 255
    17ce:	8f 4f       	sbci	r24, 0xFF	; 255
    17d0:	9f 4f       	sbci	r25, 0xFF	; 255
    17d2:	08 95       	ret

000017d4 <__umoddi3>:
    17d4:	68 94       	set
    17d6:	01 c0       	rjmp	.+2      	; 0x17da <__udivdi3_umoddi3>

000017d8 <__udivdi3>:
    17d8:	e8 94       	clt

000017da <__udivdi3_umoddi3>:
    17da:	8f 92       	push	r8
    17dc:	9f 92       	push	r9
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__udivmod64>
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	9f 90       	pop	r9
    17ec:	8f 90       	pop	r8
    17ee:	08 95       	ret

000017f0 <__udivmod64>:
    17f0:	88 24       	eor	r8, r8
    17f2:	99 24       	eor	r9, r9
    17f4:	f4 01       	movw	r30, r8
    17f6:	e4 01       	movw	r28, r8
    17f8:	b0 e4       	ldi	r27, 0x40	; 64
    17fa:	9f 93       	push	r25
    17fc:	aa 27       	eor	r26, r26
    17fe:	9a 15       	cp	r25, r10
    1800:	8b 04       	cpc	r8, r11
    1802:	9c 04       	cpc	r9, r12
    1804:	ed 05       	cpc	r30, r13
    1806:	fe 05       	cpc	r31, r14
    1808:	cf 05       	cpc	r28, r15
    180a:	d0 07       	cpc	r29, r16
    180c:	a1 07       	cpc	r26, r17
    180e:	98 f4       	brcc	.+38     	; 0x1836 <__udivmod64+0x46>
    1810:	ad 2f       	mov	r26, r29
    1812:	dc 2f       	mov	r29, r28
    1814:	cf 2f       	mov	r28, r31
    1816:	fe 2f       	mov	r31, r30
    1818:	e9 2d       	mov	r30, r9
    181a:	98 2c       	mov	r9, r8
    181c:	89 2e       	mov	r8, r25
    181e:	98 2f       	mov	r25, r24
    1820:	87 2f       	mov	r24, r23
    1822:	76 2f       	mov	r23, r22
    1824:	65 2f       	mov	r22, r21
    1826:	54 2f       	mov	r21, r20
    1828:	43 2f       	mov	r20, r19
    182a:	32 2f       	mov	r19, r18
    182c:	22 27       	eor	r18, r18
    182e:	b8 50       	subi	r27, 0x08	; 8
    1830:	31 f7       	brne	.-52     	; 0x17fe <__udivmod64+0xe>
    1832:	bf 91       	pop	r27
    1834:	27 c0       	rjmp	.+78     	; 0x1884 <__udivmod64+0x94>
    1836:	1b 2e       	mov	r1, r27
    1838:	bf 91       	pop	r27
    183a:	bb 27       	eor	r27, r27
    183c:	22 0f       	add	r18, r18
    183e:	33 1f       	adc	r19, r19
    1840:	44 1f       	adc	r20, r20
    1842:	55 1f       	adc	r21, r21
    1844:	66 1f       	adc	r22, r22
    1846:	77 1f       	adc	r23, r23
    1848:	88 1f       	adc	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	88 1c       	adc	r8, r8
    184e:	99 1c       	adc	r9, r9
    1850:	ee 1f       	adc	r30, r30
    1852:	ff 1f       	adc	r31, r31
    1854:	cc 1f       	adc	r28, r28
    1856:	dd 1f       	adc	r29, r29
    1858:	aa 1f       	adc	r26, r26
    185a:	bb 1f       	adc	r27, r27
    185c:	8a 14       	cp	r8, r10
    185e:	9b 04       	cpc	r9, r11
    1860:	ec 05       	cpc	r30, r12
    1862:	fd 05       	cpc	r31, r13
    1864:	ce 05       	cpc	r28, r14
    1866:	df 05       	cpc	r29, r15
    1868:	a0 07       	cpc	r26, r16
    186a:	b1 07       	cpc	r27, r17
    186c:	48 f0       	brcs	.+18     	; 0x1880 <__udivmod64+0x90>
    186e:	8a 18       	sub	r8, r10
    1870:	9b 08       	sbc	r9, r11
    1872:	ec 09       	sbc	r30, r12
    1874:	fd 09       	sbc	r31, r13
    1876:	ce 09       	sbc	r28, r14
    1878:	df 09       	sbc	r29, r15
    187a:	a0 0b       	sbc	r26, r16
    187c:	b1 0b       	sbc	r27, r17
    187e:	21 60       	ori	r18, 0x01	; 1
    1880:	1a 94       	dec	r1
    1882:	e1 f6       	brne	.-72     	; 0x183c <__udivmod64+0x4c>
    1884:	2e f4       	brtc	.+10     	; 0x1890 <__udivmod64+0xa0>
    1886:	94 01       	movw	r18, r8
    1888:	af 01       	movw	r20, r30
    188a:	be 01       	movw	r22, r28
    188c:	cd 01       	movw	r24, r26
    188e:	00 0c       	add	r0, r0
    1890:	08 95       	ret

00001892 <__subdi3>:
    1892:	2a 19       	sub	r18, r10
    1894:	3b 09       	sbc	r19, r11
    1896:	4c 09       	sbc	r20, r12
    1898:	5d 09       	sbc	r21, r13
    189a:	6e 09       	sbc	r22, r14
    189c:	7f 09       	sbc	r23, r15
    189e:	80 0b       	sbc	r24, r16
    18a0:	91 0b       	sbc	r25, r17
    18a2:	08 95       	ret

000018a4 <__cmpdi2_s8>:
    18a4:	00 24       	eor	r0, r0
    18a6:	a7 fd       	sbrc	r26, 7
    18a8:	00 94       	com	r0
    18aa:	2a 17       	cp	r18, r26
    18ac:	30 05       	cpc	r19, r0
    18ae:	40 05       	cpc	r20, r0
    18b0:	50 05       	cpc	r21, r0
    18b2:	60 05       	cpc	r22, r0
    18b4:	70 05       	cpc	r23, r0
    18b6:	80 05       	cpc	r24, r0
    18b8:	90 05       	cpc	r25, r0
    18ba:	08 95       	ret

000018bc <__udivmodhi4>:
    18bc:	aa 1b       	sub	r26, r26
    18be:	bb 1b       	sub	r27, r27
    18c0:	51 e1       	ldi	r21, 0x11	; 17
    18c2:	07 c0       	rjmp	.+14     	; 0x18d2 <__udivmodhi4_ep>

000018c4 <__udivmodhi4_loop>:
    18c4:	aa 1f       	adc	r26, r26
    18c6:	bb 1f       	adc	r27, r27
    18c8:	a6 17       	cp	r26, r22
    18ca:	b7 07       	cpc	r27, r23
    18cc:	10 f0       	brcs	.+4      	; 0x18d2 <__udivmodhi4_ep>
    18ce:	a6 1b       	sub	r26, r22
    18d0:	b7 0b       	sbc	r27, r23

000018d2 <__udivmodhi4_ep>:
    18d2:	88 1f       	adc	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	5a 95       	dec	r21
    18d8:	a9 f7       	brne	.-22     	; 0x18c4 <__udivmodhi4_loop>
    18da:	80 95       	com	r24
    18dc:	90 95       	com	r25
    18de:	bc 01       	movw	r22, r24
    18e0:	cd 01       	movw	r24, r26
    18e2:	08 95       	ret

000018e4 <__udivmodsi4>:
    18e4:	a1 e2       	ldi	r26, 0x21	; 33
    18e6:	1a 2e       	mov	r1, r26
    18e8:	aa 1b       	sub	r26, r26
    18ea:	bb 1b       	sub	r27, r27
    18ec:	fd 01       	movw	r30, r26
    18ee:	0d c0       	rjmp	.+26     	; 0x190a <__udivmodsi4_ep>

000018f0 <__udivmodsi4_loop>:
    18f0:	aa 1f       	adc	r26, r26
    18f2:	bb 1f       	adc	r27, r27
    18f4:	ee 1f       	adc	r30, r30
    18f6:	ff 1f       	adc	r31, r31
    18f8:	a2 17       	cp	r26, r18
    18fa:	b3 07       	cpc	r27, r19
    18fc:	e4 07       	cpc	r30, r20
    18fe:	f5 07       	cpc	r31, r21
    1900:	20 f0       	brcs	.+8      	; 0x190a <__udivmodsi4_ep>
    1902:	a2 1b       	sub	r26, r18
    1904:	b3 0b       	sbc	r27, r19
    1906:	e4 0b       	sbc	r30, r20
    1908:	f5 0b       	sbc	r31, r21

0000190a <__udivmodsi4_ep>:
    190a:	66 1f       	adc	r22, r22
    190c:	77 1f       	adc	r23, r23
    190e:	88 1f       	adc	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	1a 94       	dec	r1
    1914:	69 f7       	brne	.-38     	; 0x18f0 <__udivmodsi4_loop>
    1916:	60 95       	com	r22
    1918:	70 95       	com	r23
    191a:	80 95       	com	r24
    191c:	90 95       	com	r25
    191e:	9b 01       	movw	r18, r22
    1920:	ac 01       	movw	r20, r24
    1922:	bd 01       	movw	r22, r26
    1924:	cf 01       	movw	r24, r30
    1926:	08 95       	ret

00001928 <_exit>:
    1928:	f8 94       	cli

0000192a <__stop_program>:
    192a:	ff cf       	rjmp	.-2      	; 0x192a <__stop_program>
